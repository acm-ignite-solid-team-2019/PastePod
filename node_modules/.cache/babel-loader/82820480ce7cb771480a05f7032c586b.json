{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@comunica/core\");\n/**\n * A comunica actor for rdf-resolve-quad-pattern events.\n *\n * Actor types:\n * * Input:  IActionRdfResolveQuadPattern:      A quad pattern and an optional context.\n * * Test:   <none>\n * * Output: IActorRdfResolveQuadPatternOutput: The resulting quad stream and optional metadata.\n *\n * @see IActionRdfResolveQuadPattern\n * @see IActorRdfResolveQuadPatternOutput\n */\n\n\nvar ActorRdfResolveQuadPattern =\n/*#__PURE__*/\nfunction (_core_1$Actor) {\n  _inherits(ActorRdfResolveQuadPattern, _core_1$Actor);\n\n  function ActorRdfResolveQuadPattern(args) {\n    _classCallCheck(this, ActorRdfResolveQuadPattern);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfResolveQuadPattern).call(this, args));\n  }\n  /**\n   * Convert a metadata callback to a lazy callback where the response value is cached.\n   * @param {() => Promise<{[p: string]: any}>} metadata A metadata callback\n   * @return {() => Promise<{[p: string]: any}>} The callback where the response will be cached.\n   */\n\n\n  _createClass(ActorRdfResolveQuadPattern, [{\n    key: \"getContextSources\",\n\n    /**\n     * Get the sources from the given context.\n     * @param {ActionContext} context An optional context.\n     * @return {IDataSource[]} The array of sources or null.\n     */\n    value: function getContextSources(context) {\n      return context ? context.get(exports.KEY_CONTEXT_SOURCES) : null;\n    }\n    /**\n     * Get the source from the given context.\n     * @param {ActionContext} context An optional context.\n     * @return {IDataSource} The source or null.\n     */\n\n  }, {\n    key: \"getContextSource\",\n    value: function getContextSource(context) {\n      return context ? context.get(exports.KEY_CONTEXT_SOURCE) : null;\n    }\n    /**\n     * Check if the given context has a single source of the given type.\n     * @param {string} requiredType The required source type name.\n     * @param {ActionContext} context An optional context.\n     * @return {boolean} If the given context has a single source of the given type.\n     */\n\n  }, {\n    key: \"hasContextSingleSource\",\n    value: function hasContextSingleSource(requiredType, context) {\n      var source = this.getContextSource(context);\n      return !!(source && source.type === requiredType && source.value);\n    }\n  }], [{\n    key: \"cachifyMetadata\",\n    value: function cachifyMetadata(metadata) {\n      var lastReturn = null;\n      return function () {\n        return lastReturn || (lastReturn = metadata());\n      };\n    }\n  }]);\n\n  return ActorRdfResolveQuadPattern;\n}(core_1.Actor);\n\nexports.ActorRdfResolveQuadPattern = ActorRdfResolveQuadPattern;\n/**\n * @type {string} Context entry for data sources.\n * @value {DataSources} An array or stream of sources.\n */\n\nexports.KEY_CONTEXT_SOURCES = '@comunica/bus-rdf-resolve-quad-pattern:sources';\n/**\n * @type {string} Context entry for a data source.\n * @value {IDataSource} A source.\n */\n\nexports.KEY_CONTEXT_SOURCE = '@comunica/bus-rdf-resolve-quad-pattern:source';","map":null,"metadata":{},"sourceType":"script"}