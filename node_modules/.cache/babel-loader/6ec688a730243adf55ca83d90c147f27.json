{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar asynciterator_1 = require(\"asynciterator\"); // based on https://github.com/LinkedDataFragments/Client.js/blob/master/lib/sparql/SortIterator.js\n\n\nvar SortIterator =\n/*#__PURE__*/\nfunction (_asynciterator_1$Tran) {\n  _inherits(SortIterator, _asynciterator_1$Tran);\n\n  function SortIterator(source, sort, options) {\n    var _this;\n\n    _classCallCheck(this, SortIterator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SortIterator).call(this, source, options)); // The `window` parameter indicates the length of the sliding window to apply sorting\n\n    var window = options && options.window;\n    _this.windowLength = isFinite(window) && window > 0 ? window : Infinity;\n    _this.sort = sort;\n    _this.sorted = [];\n    return _this;\n  } // Reads the smallest item in the current sorting window\n\n\n  _createClass(SortIterator, [{\n    key: \"_read\",\n    value: function _read(count, done) {\n      var item;\n      var length = this.sorted.length; // Try to read items until we reach the desired window length\n\n      while (length !== this.windowLength) {\n        item = this.source.read();\n\n        if (item === null) {\n          break;\n        } // Insert the item in the sorted window (smallest last)\n\n\n        var left = 0;\n        var right = length - 1;\n        var mid = void 0;\n        var order = void 0;\n\n        while (left <= right) {\n          mid = Math.trunc((left + right) / 2);\n          order = this.sort(item, this.sorted[mid]);\n\n          if (order < 0) {\n            left = mid + 1;\n          } else if (order > 0) {\n            right = mid - 1;\n          } else {\n            left = mid;\n            right = -1;\n          }\n        }\n\n        this.sorted.splice(left, 0, item);\n        length++;\n      } // Push the smallest item in the window\n\n\n      if (length === this.windowLength) {\n        this._push(this.sorted.pop());\n      }\n\n      done();\n    } // Flushes remaining data after the source has ended\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(done) {\n      var length = this.sorted.length;\n\n      while (length--) {\n        this._push(this.sorted.pop());\n      }\n\n      done();\n    }\n  }]);\n\n  return SortIterator;\n}(asynciterator_1.TransformIterator);\n\nexports.SortIterator = SortIterator;","map":null,"metadata":{},"sourceType":"script"}