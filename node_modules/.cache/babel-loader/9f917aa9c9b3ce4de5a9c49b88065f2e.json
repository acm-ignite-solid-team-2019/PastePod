{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nexports.__esModule = true;\nexports.domProps = domProps;\nexports.getDisplayName = getDisplayName;\nexports.createTaskQueue = createTaskQueue;\n/**\n * Filters component properties that are safe to use in the DOM.\n */\n\nfunction domProps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var safe = {};\n\n  for (var name in props) {\n    // Skip properties with uppercase letters (except for className)\n    if (!/^([a-z-]+|className)$/.test(name)) continue; // Skip non-string values\n\n    var value = props[name];\n    if (typeof value !== 'string') continue; // Keep all others\n\n    safe[name] = value;\n  }\n\n  return safe;\n}\n/**\n * Determines the display name of a component\n * https://reactjs.org/docs/higher-order-components.html\n */\n\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n}\n/**\n * Creates a task queue that enforces a minimum time between tasks.\n * Optionally, new tasks can cause any old ones to be dropped.\n */\n\n\nfunction createTaskQueue() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$drop = _ref.drop,\n      drop = _ref$drop === void 0 ? false : _ref$drop,\n      _ref$timeBetween = _ref.timeBetween,\n      timeBetween = _ref$timeBetween === void 0 ? 10 : _ref$timeBetween,\n      _ref$concurrent = _ref.concurrent,\n      concurrent = _ref$concurrent === void 0 ? drop ? 1 : 4 : _ref$concurrent;\n\n  var queue = [],\n      scheduler = 0; // Runs all queued tasks, with the required minimum time in between\n\n  function runQueuedTasks() {\n    scheduler = queue.length && setTimeout(runQueuedTasks, timeBetween);\n    queue.splice(0, concurrent).forEach(\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var run, resolve, reject;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                run = _ref2.run, resolve = _ref2.resolve, reject = _ref2.reject;\n                _context.prev = 1;\n                _context.t0 = resolve;\n                _context.next = 5;\n                return run();\n\n              case 5:\n                _context.t1 = _context.sent;\n                (0, _context.t0)(_context.t1);\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t2 = _context[\"catch\"](1);\n                reject(_context.t2);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n\n  return {\n    /** Schedules the given task(s) */\n    schedule: function schedule(functions) {\n      var _queue;\n\n      var group = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      // Schedule a single task\n      if (!Array.isArray(functions)) return schedule([functions])[0]; // Create the tasks and their result promises\n\n      var tasks = [];\n      var results = functions.map(function (run) {\n        return new Promise(function (resolve, reject) {\n          return tasks.push({\n            run: run,\n            resolve: resolve,\n            reject: reject,\n            group: group\n          });\n        });\n      }); // Schedule the tasks\n\n      if (drop) queue = tasks;else (_queue = queue).push.apply(_queue, tasks);\n      if (!scheduler) runQueuedTasks();\n      return results;\n    },\n\n    /** Forgets pending tasks (optionally only those in a given group).\n        Returns a boolean indicating whether there were any. */\n    clear: function clear(group) {\n      var hadPendingTasks = queue.length > 0;\n      queue = queue.filter(function (task) {\n        return group !== undefined && task.group !== group;\n      });\n      return hadPendingTasks;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}