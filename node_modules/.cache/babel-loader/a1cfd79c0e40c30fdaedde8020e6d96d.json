{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _slicedToArray = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar immutable_1 = require(\"immutable\");\n\nvar E = require(\"../expressions\");\n\nvar C = require(\"../util/Consts\");\n\nvar Err = require(\"../util/Errors\");\n\nvar Helpers_1 = require(\"./Helpers\");\n\nvar index_1 = require(\"./index\");\n\nfunction _bound(_ref) {\n  var args = _ref.args,\n      mapping = _ref.mapping;\n  var variable = args[0];\n\n  if (variable.expressionType !== E.ExpressionType.Variable) {\n    throw new Err.InvalidArgumentTypes(args, C.SpecialOperator.BOUND);\n  }\n\n  var val = mapping.has(variable.name) && !!mapping.get(variable.name);\n  return Helpers_1.bool(val);\n} // BOUND ----------------------------------------------------------------------\n\n\nvar bound = {\n  arity: 1,\n  applyAsync: function () {\n    var _applyAsync = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(_ref2) {\n      var args, mapping;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              args = _ref2.args, mapping = _ref2.mapping;\n              return _context.abrupt(\"return\", _bound({\n                args: args,\n                mapping: mapping\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function applyAsync(_x) {\n      return _applyAsync.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref3) {\n    var args = _ref3.args,\n        mapping = _ref3.mapping;\n    return _bound({\n      args: args,\n      mapping: mapping\n    });\n  }\n}; // IF -------------------------------------------------------------------------\n\nvar ifSPARQL = {\n  arity: 3,\n  applyAsync: function () {\n    var _applyAsync2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(_ref4) {\n      var args, mapping, evaluate, valFirst, ebv;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              args = _ref4.args, mapping = _ref4.mapping, evaluate = _ref4.evaluate;\n              _context2.next = 3;\n              return evaluate(args[0], mapping);\n\n            case 3:\n              valFirst = _context2.sent;\n              ebv = valFirst.coerceEBV();\n              return _context2.abrupt(\"return\", ebv ? evaluate(args[1], mapping) : evaluate(args[2], mapping));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function applyAsync(_x2) {\n      return _applyAsync2.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref5) {\n    var args = _ref5.args,\n        mapping = _ref5.mapping,\n        evaluate = _ref5.evaluate;\n    var valFirst = evaluate(args[0], mapping);\n    var ebv = valFirst.coerceEBV();\n    return ebv ? evaluate(args[1], mapping) : evaluate(args[2], mapping);\n  }\n}; // COALESCE -------------------------------------------------------------------\n\nvar coalesce = {\n  arity: Infinity,\n  applyAsync: function () {\n    var _applyAsync3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(_ref6) {\n      var args, mapping, evaluate, errors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, expr;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              args = _ref6.args, mapping = _ref6.mapping, evaluate = _ref6.evaluate;\n              errors = [];\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _iteratorError = undefined;\n              _context3.prev = 5;\n              _iterator = args[Symbol.iterator]();\n\n            case 7:\n              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                _context3.next = 21;\n                break;\n              }\n\n              expr = _step.value;\n              _context3.prev = 9;\n              _context3.next = 12;\n              return evaluate(expr, mapping);\n\n            case 12:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](9);\n              errors.push(_context3.t0);\n\n            case 18:\n              _iteratorNormalCompletion = true;\n              _context3.next = 7;\n              break;\n\n            case 21:\n              _context3.next = 27;\n              break;\n\n            case 23:\n              _context3.prev = 23;\n              _context3.t1 = _context3[\"catch\"](5);\n              _didIteratorError = true;\n              _iteratorError = _context3.t1;\n\n            case 27:\n              _context3.prev = 27;\n              _context3.prev = 28;\n\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n\n            case 30:\n              _context3.prev = 30;\n\n              if (!_didIteratorError) {\n                _context3.next = 33;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 33:\n              return _context3.finish(30);\n\n            case 34:\n              return _context3.finish(27);\n\n            case 35:\n              throw new Err.CoalesceError(errors);\n\n            case 36:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[5, 23, 27, 35], [9, 15], [28,, 30, 34]]);\n    }));\n\n    function applyAsync(_x3) {\n      return _applyAsync3.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref7) {\n    var args = _ref7.args,\n        mapping = _ref7.mapping,\n        evaluate = _ref7.evaluate;\n    var errors = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = args[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var expr = _step2.value;\n\n        try {\n          return evaluate(expr, mapping);\n        } catch (err) {\n          errors.push(err);\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    throw new Err.CoalesceError(errors);\n  }\n}; // logical-or (||) ------------------------------------------------------------\n// https://www.w3.org/TR/sparql11-query/#func-logical-or\n\nvar logicalOr = {\n  arity: 2,\n  applyAsync: function () {\n    var _applyAsync4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(_ref8) {\n      var args, mapping, evaluate, _args4, leftExpr, rightExpr, leftTerm, left, rightTerm, right, _rightTerm, _right;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              args = _ref8.args, mapping = _ref8.mapping, evaluate = _ref8.evaluate;\n              _args4 = _slicedToArray(args, 2), leftExpr = _args4[0], rightExpr = _args4[1];\n              _context4.prev = 2;\n              _context4.next = 5;\n              return evaluate(leftExpr, mapping);\n\n            case 5:\n              leftTerm = _context4.sent;\n              left = leftTerm.coerceEBV();\n\n              if (!left) {\n                _context4.next = 9;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", Helpers_1.bool(true));\n\n            case 9:\n              _context4.next = 11;\n              return evaluate(rightExpr, mapping);\n\n            case 11:\n              rightTerm = _context4.sent;\n              right = rightTerm.coerceEBV();\n              return _context4.abrupt(\"return\", Helpers_1.bool(right));\n\n            case 16:\n              _context4.prev = 16;\n              _context4.t0 = _context4[\"catch\"](2);\n              _context4.next = 20;\n              return evaluate(rightExpr, mapping);\n\n            case 20:\n              _rightTerm = _context4.sent;\n              _right = _rightTerm.coerceEBV();\n\n              if (_right) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw _context4.t0;\n\n            case 24:\n              return _context4.abrupt(\"return\", Helpers_1.bool(true));\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[2, 16]]);\n    }));\n\n    function applyAsync(_x4) {\n      return _applyAsync4.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref9) {\n    var args = _ref9.args,\n        mapping = _ref9.mapping,\n        evaluate = _ref9.evaluate;\n\n    var _args6 = _slicedToArray(args, 2),\n        leftExpr = _args6[0],\n        rightExpr = _args6[1];\n\n    try {\n      var leftTerm = evaluate(leftExpr, mapping);\n      var left = leftTerm.coerceEBV();\n\n      if (left) {\n        return Helpers_1.bool(true);\n      }\n\n      var rightTerm = evaluate(rightExpr, mapping);\n      var right = rightTerm.coerceEBV();\n      return Helpers_1.bool(right);\n    } catch (leftErr) {\n      var _rightTerm2 = evaluate(rightExpr, mapping);\n\n      var _right2 = _rightTerm2.coerceEBV();\n\n      if (!_right2) {\n        throw leftErr;\n      }\n\n      return Helpers_1.bool(true);\n    }\n  }\n}; // logical-and (&&) -----------------------------------------------------------\n// https://www.w3.org/TR/sparql11-query/#func-logical-and\n\nvar logicalAnd = {\n  arity: 2,\n  applyAsync: function () {\n    var _applyAsync5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(_ref10) {\n      var args, mapping, evaluate, _args7, leftExpr, rightExpr, leftTerm, left, rightTerm, right, _rightTerm3, _right3;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              args = _ref10.args, mapping = _ref10.mapping, evaluate = _ref10.evaluate;\n              _args7 = _slicedToArray(args, 2), leftExpr = _args7[0], rightExpr = _args7[1];\n              _context5.prev = 2;\n              _context5.next = 5;\n              return evaluate(leftExpr, mapping);\n\n            case 5:\n              leftTerm = _context5.sent;\n              left = leftTerm.coerceEBV();\n\n              if (left) {\n                _context5.next = 9;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", Helpers_1.bool(false));\n\n            case 9:\n              _context5.next = 11;\n              return evaluate(rightExpr, mapping);\n\n            case 11:\n              rightTerm = _context5.sent;\n              right = rightTerm.coerceEBV();\n              return _context5.abrupt(\"return\", Helpers_1.bool(right));\n\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](2);\n              _context5.next = 20;\n              return evaluate(rightExpr, mapping);\n\n            case 20:\n              _rightTerm3 = _context5.sent;\n              _right3 = _rightTerm3.coerceEBV();\n\n              if (!_right3) {\n                _context5.next = 24;\n                break;\n              }\n\n              throw _context5.t0;\n\n            case 24:\n              return _context5.abrupt(\"return\", Helpers_1.bool(false));\n\n            case 25:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this, [[2, 16]]);\n    }));\n\n    function applyAsync(_x5) {\n      return _applyAsync5.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref11) {\n    var args = _ref11.args,\n        mapping = _ref11.mapping,\n        evaluate = _ref11.evaluate;\n\n    var _args9 = _slicedToArray(args, 2),\n        leftExpr = _args9[0],\n        rightExpr = _args9[1];\n\n    try {\n      var leftTerm = evaluate(leftExpr, mapping);\n      var left = leftTerm.coerceEBV();\n\n      if (!left) {\n        return Helpers_1.bool(false);\n      }\n\n      var rightTerm = evaluate(rightExpr, mapping);\n      var right = rightTerm.coerceEBV();\n      return Helpers_1.bool(right);\n    } catch (leftErr) {\n      var _rightTerm4 = evaluate(rightExpr, mapping);\n\n      var _right4 = _rightTerm4.coerceEBV();\n\n      if (_right4) {\n        throw leftErr;\n      }\n\n      return Helpers_1.bool(false);\n    }\n  }\n}; // sameTerm -------------------------------------------------------------------\n\nvar sameTerm = {\n  arity: 2,\n  applyAsync: function () {\n    var _applyAsync6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(_ref12) {\n      var args, mapping, evaluate, _args$map, _args$map2, leftExpr, rightExpr, left, right;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              args = _ref12.args, mapping = _ref12.mapping, evaluate = _ref12.evaluate;\n              _args$map = args.map(function (a) {\n                return evaluate(a, mapping);\n              }), _args$map2 = _slicedToArray(_args$map, 2), leftExpr = _args$map2[0], rightExpr = _args$map2[1];\n              _context6.next = 4;\n              return leftExpr;\n\n            case 4:\n              left = _context6.sent;\n              _context6.next = 7;\n              return rightExpr;\n\n            case 7:\n              right = _context6.sent;\n              return _context6.abrupt(\"return\", Helpers_1.bool(left.toRDF().equals(right.toRDF())));\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function applyAsync(_x6) {\n      return _applyAsync6.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref13) {\n    var args = _ref13.args,\n        mapping = _ref13.mapping,\n        evaluate = _ref13.evaluate;\n\n    var _args$map3 = args.map(function (a) {\n      return evaluate(a, mapping);\n    }),\n        _args$map4 = _slicedToArray(_args$map3, 2),\n        left = _args$map4[0],\n        right = _args$map4[1];\n\n    return Helpers_1.bool(left.toRDF().equals(right.toRDF()));\n  }\n}; // IN -------------------------------------------------------------------------\n\nvar inSPARQL = {\n  arity: Infinity,\n  checkArity: function checkArity(args) {\n    return args.length >= 1;\n  },\n  applyAsync: function () {\n    var _applyAsync7 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(_ref14) {\n      var args, mapping, evaluate, _args11, leftExpr, remaining, left;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              args = _ref14.args, mapping = _ref14.mapping, evaluate = _ref14.evaluate;\n              _args11 = _toArray(args), leftExpr = _args11[0], remaining = _args11.slice(1);\n              _context7.next = 4;\n              return evaluate(leftExpr, mapping);\n\n            case 4:\n              left = _context7.sent;\n              return _context7.abrupt(\"return\", inRecursiveAsync(left, {\n                args: remaining,\n                mapping: mapping,\n                evaluate: evaluate\n              }, []));\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function applyAsync(_x7) {\n      return _applyAsync7.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(_ref15) {\n    var args = _ref15.args,\n        mapping = _ref15.mapping,\n        evaluate = _ref15.evaluate;\n\n    var _args13 = _toArray(args),\n        leftExpr = _args13[0],\n        remaining = _args13.slice(1);\n\n    var left = evaluate(leftExpr, mapping);\n    return inRecursiveSync(left, {\n      args: remaining,\n      mapping: mapping,\n      evaluate: evaluate\n    }, []);\n  }\n};\n\nfunction inRecursiveAsync(_x8, _x9, _x10) {\n  return _inRecursiveAsync.apply(this, arguments);\n}\n\nfunction _inRecursiveAsync() {\n  _inRecursiveAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee9(needle, _ref16, results) {\n    var args, mapping, evaluate, noErrors, next, isEqual;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            args = _ref16.args, mapping = _ref16.mapping, evaluate = _ref16.evaluate;\n\n            if (!(args.length === 0)) {\n              _context9.next = 4;\n              break;\n            }\n\n            noErrors = results.every(function (v) {\n              return !v;\n            });\n            return _context9.abrupt(\"return\", noErrors ? Helpers_1.bool(false) : Promise.reject(new Err.InError(results)));\n\n          case 4:\n            _context9.prev = 4;\n            _context9.next = 7;\n            return evaluate(args.shift(), mapping);\n\n          case 7:\n            next = _context9.sent;\n            isEqual = index_1.regularFunctions.get(C.RegularOperator.EQUAL);\n\n            if (!isEqual.apply([needle, next])) {\n              _context9.next = 13;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", Helpers_1.bool(true));\n\n          case 13:\n            inRecursiveAsync(needle, {\n              args: args,\n              mapping: mapping,\n              evaluate: evaluate\n            }, [].concat(_toConsumableArray(results), [false]));\n\n          case 14:\n            _context9.next = 19;\n            break;\n\n          case 16:\n            _context9.prev = 16;\n            _context9.t0 = _context9[\"catch\"](4);\n            return _context9.abrupt(\"return\", inRecursiveAsync(needle, {\n              args: args,\n              mapping: mapping,\n              evaluate: evaluate\n            }, [].concat(_toConsumableArray(results), [_context9.t0])));\n\n          case 19:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, this, [[4, 16]]);\n  }));\n  return _inRecursiveAsync.apply(this, arguments);\n}\n\nfunction inRecursiveSync(needle, _ref17, results) {\n  var args = _ref17.args,\n      mapping = _ref17.mapping,\n      evaluate = _ref17.evaluate;\n\n  if (args.length === 0) {\n    var noErrors = results.every(function (v) {\n      return !v;\n    });\n\n    if (noErrors) {\n      Helpers_1.bool(false);\n    } else {\n      throw new Err.InError(results);\n    }\n  }\n\n  try {\n    var next = evaluate(args.shift(), mapping);\n    var isEqual = index_1.regularFunctions.get(C.RegularOperator.EQUAL);\n\n    if (isEqual.apply([needle, next])) {\n      return Helpers_1.bool(true);\n    } else {\n      inRecursiveSync(needle, {\n        args: args,\n        mapping: mapping,\n        evaluate: evaluate\n      }, [].concat(_toConsumableArray(results), [false]));\n    }\n  } catch (err) {\n    return inRecursiveSync(needle, {\n      args: args,\n      mapping: mapping,\n      evaluate: evaluate\n    }, [].concat(_toConsumableArray(results), [err]));\n  }\n} // NOT IN ---------------------------------------------------------------------\n\n\nvar notInSPARQL = {\n  arity: Infinity,\n  checkArity: function checkArity(args) {\n    return args.length >= 1;\n  },\n  applyAsync: function () {\n    var _applyAsync8 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(context) {\n      var _in, isIn;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _in = index_1.specialFunctions.get(C.SpecialOperator.IN);\n              _context8.next = 3;\n              return _in.applyAsync(context);\n\n            case 3:\n              isIn = _context8.sent;\n              return _context8.abrupt(\"return\", Helpers_1.bool(!isIn.typedValue));\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function applyAsync(_x11) {\n      return _applyAsync8.apply(this, arguments);\n    }\n\n    return applyAsync;\n  }(),\n  applySync: function applySync(context) {\n    var _in = index_1.specialFunctions.get(C.SpecialOperator.IN);\n\n    var isIn = _in.applySync(context);\n\n    return Helpers_1.bool(!isIn.typedValue);\n  }\n};\nvar _specialDefinitions = {\n  // --------------------------------------------------------------------------\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // --------------------------------------------------------------------------\n  'bound': bound,\n  'if': ifSPARQL,\n  'coalesce': coalesce,\n  '&&': logicalAnd,\n  '||': logicalOr,\n  'sameterm': sameTerm,\n  'in': inSPARQL,\n  'notin': notInSPARQL\n};\nexports.specialDefinitions = immutable_1.Map(_specialDefinitions);","map":null,"metadata":{},"sourceType":"script"}