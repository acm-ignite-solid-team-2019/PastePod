{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n/**\n * A comunica Slice Query Operation Actor.\n */\n\n\nvar ActorQueryOperationSlice =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationSlice, _bus_query_operation_);\n\n  function ActorQueryOperationSlice(args) {\n    _classCallCheck(this, ActorQueryOperationSlice);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationSlice).call(this, args, 'slice'));\n  }\n\n  _createClass(ActorQueryOperationSlice, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pattern, context) {\n        var output, hasLength, bindingsStream, metadata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = bus_query_operation_1.ActorQueryOperation;\n                _context2.next = 3;\n                return this.mediatorQueryOperation.mediate({\n                  operation: pattern.input,\n                  context: context\n                });\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                output = _context2.t0.getSafeBindings.call(_context2.t0, _context2.t1);\n                // Slice the bindings stream\n                hasLength = !!pattern.length || pattern.length === 0;\n                bindingsStream = output.bindingsStream.range(pattern.start, hasLength ? pattern.start + pattern.length - 1 : Infinity); // If we find metadata, apply slicing on the total number of items\n\n                metadata = !output.metadata ? null : function () {\n                  return output.metadata().then(function (subMetadata) {\n                    var totalItems = subMetadata.totalItems;\n\n                    if (isFinite(totalItems)) {\n                      totalItems = Math.max(0, totalItems - pattern.start);\n\n                      if (hasLength) {\n                        totalItems = Math.min(totalItems, pattern.length);\n                      }\n                    }\n\n                    return Object.assign({}, subMetadata, {\n                      totalItems: totalItems\n                    });\n                  });\n                };\n                return _context2.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: bindingsStream,\n                  metadata: metadata,\n                  variables: output.variables\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }]);\n\n  return ActorQueryOperationSlice;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nexports.ActorQueryOperationSlice = ActorQueryOperationSlice;","map":null,"metadata":{},"sourceType":"script"}