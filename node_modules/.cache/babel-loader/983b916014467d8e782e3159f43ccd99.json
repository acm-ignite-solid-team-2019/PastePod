{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RDFDM = require(\"@rdfjs/data-model\");\n\nvar E = require(\"../expressions/Expressions\");\n\nvar C = require(\"../util/Consts\");\n\nvar Err = require(\"../util/Errors\");\n\nvar Transformation_1 = require(\"../Transformation\");\n\nvar AsyncEvaluator =\n/*#__PURE__*/\nfunction () {\n  function AsyncEvaluator(algExpr) {\n    var _this$evaluators;\n\n    var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AsyncEvaluator);\n\n    this.algExpr = algExpr;\n    this.hooks = hooks; // tslint:disable-next-line:member-ordering\n\n    this.evaluators = (_this$evaluators = {}, _defineProperty(_this$evaluators, E.ExpressionType.Term, this.evalTerm), _defineProperty(_this$evaluators, E.ExpressionType.Variable, this.evalVariable), _defineProperty(_this$evaluators, E.ExpressionType.Operator, this.evalOperator), _defineProperty(_this$evaluators, E.ExpressionType.SpecialOperator, this.evalSpecialOperator), _defineProperty(_this$evaluators, E.ExpressionType.Named, this.evalNamed), _defineProperty(_this$evaluators, E.ExpressionType.Existence, this.evalExistence), _defineProperty(_this$evaluators, E.ExpressionType.Aggregate, this.evalAggregate), _this$evaluators);\n    this.expr = Transformation_1.transformAlgebra(algExpr, hooks);\n  }\n\n  _createClass(AsyncEvaluator, [{\n    key: \"evaluate\",\n    value: function () {\n      var _evaluate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(mapping) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.evalRecursive(this.expr, mapping);\n\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", log(result).toRDF());\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function evaluate(_x) {\n        return _evaluate.apply(this, arguments);\n      }\n\n      return evaluate;\n    }()\n  }, {\n    key: \"evaluateAsEBV\",\n    value: function () {\n      var _evaluateAsEBV = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(mapping) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.evalRecursive(this.expr, mapping);\n\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", log(result).coerceEBV());\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function evaluateAsEBV(_x2) {\n        return _evaluateAsEBV.apply(this, arguments);\n      }\n\n      return evaluateAsEBV;\n    }()\n  }, {\n    key: \"evaluateAsInternal\",\n    value: function () {\n      var _evaluateAsInternal = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(mapping) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.evalRecursive(this.expr, mapping));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function evaluateAsInternal(_x3) {\n        return _evaluateAsInternal.apply(this, arguments);\n      }\n\n      return evaluateAsInternal;\n    }()\n  }, {\n    key: \"evalRecursive\",\n    value: function () {\n      var _evalRecursive = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(expr, mapping) {\n        var evaluator;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                evaluator = this.evaluators[expr.expressionType];\n\n                if (evaluator) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Err.InvalidExpressionType(expr);\n\n              case 3:\n                return _context4.abrupt(\"return\", evaluator.bind(this)(expr, mapping));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function evalRecursive(_x4, _x5) {\n        return _evalRecursive.apply(this, arguments);\n      }\n\n      return evalRecursive;\n    }()\n  }, {\n    key: \"evalTerm\",\n    value: function () {\n      var _evalTerm = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(expr, mapping) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", expr);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function evalTerm(_x6, _x7) {\n        return _evalTerm.apply(this, arguments);\n      }\n\n      return evalTerm;\n    }()\n  }, {\n    key: \"evalVariable\",\n    value: function () {\n      var _evalVariable = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(expr, mapping) {\n        var term;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                term = mapping.get(expr.name);\n\n                if (term) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Err.UnboundVariableError(expr.name, mapping);\n\n              case 3:\n                return _context6.abrupt(\"return\", Transformation_1.transformTerm({\n                  term: term,\n                  type: 'expression',\n                  expressionType: 'term'\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function evalVariable(_x8, _x9) {\n        return _evalVariable.apply(this, arguments);\n      }\n\n      return evalVariable;\n    }()\n  }, {\n    key: \"evalOperator\",\n    value: function () {\n      var _evalOperator = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(expr, mapping) {\n        var _this = this;\n\n        var argPromises, argResults;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                argPromises = expr.args.map(function (arg) {\n                  return _this.evalRecursive(arg, mapping);\n                });\n                _context7.next = 3;\n                return Promise.all(argPromises);\n\n              case 3:\n                argResults = _context7.sent;\n                return _context7.abrupt(\"return\", expr.apply(argResults));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function evalOperator(_x10, _x11) {\n        return _evalOperator.apply(this, arguments);\n      }\n\n      return evalOperator;\n    }()\n  }, {\n    key: \"evalSpecialOperator\",\n    value: function () {\n      var _evalSpecialOperator = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(expr, mapping) {\n        var evaluate, context;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                evaluate = this.evalRecursive.bind(this);\n                context = {\n                  args: expr.args,\n                  mapping: mapping,\n                  evaluate: evaluate\n                };\n                return _context8.abrupt(\"return\", expr.applyAsync(context));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function evalSpecialOperator(_x12, _x13) {\n        return _evalSpecialOperator.apply(this, arguments);\n      }\n\n      return evalSpecialOperator;\n    }()\n  }, {\n    key: \"evalNamed\",\n    value: function () {\n      var _evalNamed = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(expr, mapping) {\n        var _this2 = this;\n\n        var argPromises, argResults;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                argPromises = expr.args.map(function (arg) {\n                  return _this2.evalRecursive(arg, mapping);\n                });\n                _context9.next = 3;\n                return Promise.all(argPromises);\n\n              case 3:\n                argResults = _context9.sent;\n                return _context9.abrupt(\"return\", expr.apply(argResults));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function evalNamed(_x14, _x15) {\n        return _evalNamed.apply(this, arguments);\n      }\n\n      return evalNamed;\n    }()\n  }, {\n    key: \"evalExistence\",\n    value: function () {\n      var _evalExistence = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(expr, mapping) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return expr.exists_with(mapping);\n\n              case 2:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", Transformation_1.transformTerm({\n                  term: RDFDM.literal(result.toString(), C.make(C.TypeURL.XSD_BOOLEAN)),\n                  expressionType: 'term',\n                  type: 'expression'\n                }));\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function evalExistence(_x16, _x17) {\n        return _evalExistence.apply(this, arguments);\n      }\n\n      return evalExistence;\n    }()\n  }, {\n    key: \"evalAggregate\",\n    value: function () {\n      var _evalAggregate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(expr, _mapping) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return expr.aggregate();\n\n              case 2:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", Transformation_1.transformTerm({\n                  type: 'expression',\n                  expressionType: 'term',\n                  term: result\n                }));\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function evalAggregate(_x18, _x19) {\n        return _evalAggregate.apply(this, arguments);\n      }\n\n      return evalAggregate;\n    }()\n  }]);\n\n  return AsyncEvaluator;\n}();\n\nexports.AsyncEvaluator = AsyncEvaluator;\n\nfunction log(val) {\n  // console.log(val);\n  return val;\n}","map":null,"metadata":{},"sourceType":"script"}