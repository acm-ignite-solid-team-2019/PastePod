{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Traverses a path to collect mutationExpressions into an expression.\n * This is needed because mutations can be chained.\n *\n * Requires:\n * - a mutationExpressions property on the path proxy\n */\n\nvar MutationExpressionsHandler =\n/*#__PURE__*/\nfunction () {\n  function MutationExpressionsHandler() {\n    _classCallCheck(this, MutationExpressionsHandler);\n  }\n\n  _createClass(MutationExpressionsHandler, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pathData) {\n        var mutationExpressions, current;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mutationExpressions = []; // Add all mutationExpressions to the path\n\n                current = pathData;\n\n              case 2:\n                if (!current) {\n                  _context.next = 15;\n                  break;\n                }\n\n                if (!current.mutationExpressions) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.t0 = mutationExpressions.unshift;\n                _context.t1 = mutationExpressions;\n                _context.t2 = _toConsumableArray;\n                _context.next = 9;\n                return current.mutationExpressions;\n\n              case 9:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t2)(_context.t3);\n\n                _context.t0.apply.call(_context.t0, _context.t1, _context.t4);\n\n              case 12:\n                // Move to parent link\n                current = current.parent;\n                _context.next = 2;\n                break;\n\n              case 15:\n                return _context.abrupt(\"return\", mutationExpressions);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n\n      return handle;\n    }()\n  }]);\n\n  return MutationExpressionsHandler;\n}();\n\nexports.default = MutationExpressionsHandler;","map":null,"metadata":{},"sourceType":"script"}