{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nvar core_1 = require(\"@comunica/core\");\n\nvar immutable_1 = require(\"immutable\");\n\nvar sparqljson_to_tree_1 = require(\"sparqljson-to-tree\");\n\nvar stream_1 = require(\"stream\");\n\nvar isMap = immutable_1.Map.isMap;\n/**\n * A comunica Tree SPARQL Serialize Actor.\n */\n\nvar ActorSparqlSerializeTree =\n/*#__PURE__*/\nfunction (_bus_sparql_serialize) {\n  _inherits(ActorSparqlSerializeTree, _bus_sparql_serialize);\n\n  function ActorSparqlSerializeTree(args) {\n    _classCallCheck(this, ActorSparqlSerializeTree);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorSparqlSerializeTree).call(this, args));\n  }\n  /**\n   *\n   * @param {BindingsStream} bindingsStream\n   * @param context\n   * @param {IConverterSettings} converterSettings\n   * @return {Promise<string>}\n   */\n\n\n  _createClass(ActorSparqlSerializeTree, [{\n    key: \"testHandleChecked\",\n    value: function () {\n      var _testHandleChecked = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(action.type !== 'bindings')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This actor can only handle bindings streams.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testHandleChecked(_x) {\n        return _testHandleChecked.apply(this, arguments);\n      }\n\n      return testHandleChecked;\n    }()\n  }, {\n    key: \"runHandle\",\n    value: function () {\n      var _runHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action, mediaType) {\n        var data, resultStream;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = new stream_1.Readable();\n\n                data._read = function () {\n                  return;\n                };\n\n                resultStream = action.bindingsStream;\n                resultStream.on('error', function (e) {\n                  return data.emit('error', e);\n                });\n                ActorSparqlSerializeTree.bindingsStreamToGraphQl(resultStream, action.context, {\n                  materializeRdfJsTerms: true\n                }).then(function (result) {\n                  data.push(JSON.stringify(result, null, '  '));\n                  data.push(null);\n                });\n                return _context2.abrupt(\"return\", {\n                  data: data\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runHandle(_x2, _x3) {\n        return _runHandle.apply(this, arguments);\n      }\n\n      return runHandle;\n    }()\n  }], [{\n    key: \"bindingsStreamToGraphQl\",\n    value: function bindingsStreamToGraphQl(bindingsStream, context, converterSettings) {\n      var actionContext = isMap(context) ? context : core_1.ActionContext(context);\n      return new Promise(function (resolve, reject) {\n        var bindingsArray = [];\n        var converter = new sparqljson_to_tree_1.Converter(converterSettings);\n        var schema = {\n          singularizeVariables: {}\n        };\n\n        if (actionContext && actionContext.has('@context')) {\n          var _arr = Object.keys(actionContext.get('@context'));\n\n          for (var _i = 0; _i < _arr.length; _i++) {\n            var key = _arr[_i];\n\n            if (actionContext.get('@context')[key]['@singular']) {\n              schema.singularizeVariables[key] = true;\n            }\n          }\n        }\n\n        bindingsStream.on('error', reject);\n        bindingsStream.on('data', function (bindings) {\n          var rawBindings = bindings.toJS();\n          var reKeyedBindings = {}; // Removes the '?' prefix\n\n          for (var _key in rawBindings) {\n            var bindingValue = rawBindings[_key];\n\n            if (bindingValue) {\n              reKeyedBindings[_key.substr(1)] = bindingValue;\n            }\n          }\n\n          bindingsArray.push(reKeyedBindings);\n        });\n        bindingsStream.on('end', function () {\n          resolve(converter.bindingsToTree(bindingsArray, schema));\n        });\n      });\n    }\n  }]);\n\n  return ActorSparqlSerializeTree;\n}(bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes);\n\nexports.ActorSparqlSerializeTree = ActorSparqlSerializeTree;","map":null,"metadata":{},"sourceType":"script"}