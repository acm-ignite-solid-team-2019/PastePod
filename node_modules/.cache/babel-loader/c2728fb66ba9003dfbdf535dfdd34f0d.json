{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar utils_datasource_1 = require(\"@comunica/utils-datasource\");\n\nvar asynciterator_1 = require(\"asynciterator\");\n\nvar fetch_sparql_endpoint_1 = require(\"fetch-sparql-endpoint\");\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica SPARQL Endpoint Query Operation Actor.\n */\n\n\nvar ActorQueryOperationSparqlEndpoint =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationSparqlEndpoint, _bus_query_operation_);\n\n  function ActorQueryOperationSparqlEndpoint(args) {\n    var _this;\n\n    _classCallCheck(this, ActorQueryOperationSparqlEndpoint);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationSparqlEndpoint).call(this, args));\n    _this.endpointFetcher = new fetch_sparql_endpoint_1.SparqlEndpointFetcher({\n      fetch: function fetch(input, init) {\n        return _this.mediatorHttp.mediate({\n          input: input,\n          init: init,\n          context: _this.lastContext\n        });\n      },\n      prefixVariableQuestionMark: true\n    });\n    return _this;\n  }\n  /**\n   * Wrap a pattern in a select query.\n   * @param {Operation} operation An operation.\n   * @return {Project} A select query.\n   */\n\n\n  _createClass(ActorQueryOperationSparqlEndpoint, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        var source;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (action.operation) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Missing field \\'operation\\' in the query operation action: ' + require('util').inspect(action));\n\n              case 2:\n                _context.next = 4;\n                return utils_datasource_1.DataSourceUtils.getSingleSource(action.context);\n\n              case 4:\n                source = _context.sent;\n\n                if (!(source && source.type === 'sparql')) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  httpRequests: 1\n                });\n\n              case 7:\n                throw new Error(this.name + ' requires a single source with a \\'sparql\\' endpoint to be present in the context.');\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var endpoint, selectQuery, query, bindingsStream, metadata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return utils_datasource_1.DataSourceUtils.getSingleSource(action.context);\n\n              case 2:\n                endpoint = _context2.sent.value;\n                selectQuery = ActorQueryOperationSparqlEndpoint.patternToSelectQuery(action.operation);\n                query = sparqlalgebrajs_1.toSparql(selectQuery);\n                bindingsStream = new asynciterator_1.BufferedIterator({\n                  autoStart: false,\n                  maxBufferSize: Infinity\n                });\n                this.lastContext = action.context;\n                this.endpointFetcher.fetchBindings(endpoint, query).then(function (rawBindingsStream) {\n                  var totalItems = 0;\n                  rawBindingsStream.on('error', function (error) {\n                    return bindingsStream.emit('error', error);\n                  });\n                  rawBindingsStream.on('data', function (rawBindings) {\n                    totalItems++;\n\n                    bindingsStream._push(bus_query_operation_1.Bindings(rawBindings));\n                  });\n                  rawBindingsStream.on('end', function () {\n                    bindingsStream.emit('metadata', {\n                      totalItems: totalItems\n                    });\n                    bindingsStream.close();\n                  });\n                });\n                metadata = ActorQueryOperationSparqlEndpoint.cachifyMetadata(function () {\n                  return new Promise(function (resolve, reject) {\n                    bindingsStream._fillBuffer();\n\n                    bindingsStream.on('error', reject);\n                    bindingsStream.on('end', function () {\n                      return reject(new Error('No metadata was found'));\n                    });\n                    bindingsStream.on('metadata', resolve);\n                  });\n                });\n                return _context2.abrupt(\"return\", {\n                  type: 'bindings',\n                  metadata: metadata,\n                  bindingsStream: bindingsStream,\n                  variables: selectQuery.variables.map(rdf_string_1.termToString)\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }], [{\n    key: \"patternToSelectQuery\",\n    value: function patternToSelectQuery(operation) {\n      if (operation.type === 'project') {\n        return operation;\n      }\n\n      var variables = sparqlalgebrajs_1.Util.inScopeVariables(operation);\n      return ActorQueryOperationSparqlEndpoint.FACTORY.createProject(operation, variables);\n    }\n  }]);\n\n  return ActorQueryOperationSparqlEndpoint;\n}(bus_query_operation_1.ActorQueryOperation);\n\nActorQueryOperationSparqlEndpoint.FACTORY = new sparqlalgebrajs_1.Factory();\nActorQueryOperationSparqlEndpoint.ALGEBRA_TYPES = Object.keys(sparqlalgebrajs_1.Algebra.types).map(function (key) {\n  return sparqlalgebrajs_1.Algebra.types[key];\n});\nexports.ActorQueryOperationSparqlEndpoint = ActorQueryOperationSparqlEndpoint;","map":null,"metadata":{},"sourceType":"script"}