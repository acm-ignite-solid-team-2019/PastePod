{"ast":null,"code":"var _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar AsyncIterator = require('asynciterator'); // https://en.wikipedia.org/wiki/Hash_join\n\n\nvar HashJoin =\n/*#__PURE__*/\nfunction (_AsyncIterator) {\n  \"use strict\";\n\n  _inherits(HashJoin, _AsyncIterator);\n\n  function HashJoin(left, right, funHash, funJoin) {\n    var _this;\n\n    _classCallCheck(this, HashJoin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HashJoin).call(this, right));\n    _this.left = left;\n    _this.right = right;\n    _this.funHash = funHash;\n    _this.funJoin = funJoin;\n    _this.leftMap = new Map();\n    _this.match = null;\n    _this.matches = [];\n    _this.matchIdx = 0;\n    _this.readable = false;\n\n    _this.left.on('end', allowJoining.bind(_assertThisInitialized(_assertThisInitialized(_this))));\n\n    _this.left.on('data', addItem.bind(_assertThisInitialized(_assertThisInitialized(_this))));\n\n    function addItem(item) {\n      var hash = this.funHash(item);\n      if (!this.leftMap.has(hash)) this.leftMap.set(hash, []);\n      var arr = this.leftMap.get(hash);\n      arr.push(item);\n    }\n\n    function allowJoining() {\n      var _this2 = this;\n\n      if (this.leftMap.size <= 0) return this.close();\n      this.readable = true;\n      this.right.on('readable', function () {\n        return _this2.readable = true;\n      });\n      this.right.on('end', function () {\n        if (!_this2.hasResults()) _this2._end();\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(HashJoin, [{\n    key: \"hasResults\",\n    value: function hasResults() {\n      return !this.right.ended || this.matchIdx < this.matches.length;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get(_getPrototypeOf(HashJoin.prototype), \"close\", this).call(this);\n\n      this.left.close();\n      this.right.close();\n    }\n  }, {\n    key: \"read\",\n    value: function read() {\n      if (this.ended || !this.readable) return null;\n\n      while (this.matchIdx < this.matches.length) {\n        var item = this.matches[this.matchIdx++];\n        var result = this.funJoin(item, this.match);\n        if (result !== null) return result;\n      }\n\n      if (!this.hasResults()) this._end();\n      this.match = this.right.read();\n\n      if (this.match === null) {\n        this.readable = false;\n        return null;\n      }\n\n      var hash = this.funHash(this.match);\n      this.matches = this.leftMap.get(hash) || [];\n      this.matchIdx = 0; // array is filled again so recursive call can have results\n\n      return this.read();\n    }\n  }]);\n\n  return HashJoin;\n}(AsyncIterator);\n\nmodule.exports = HashJoin;","map":null,"metadata":{},"sourceType":"script"}