{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _awaitAsyncGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/awaitAsyncGenerator\"));\n\nvar _wrapAsyncGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapAsyncGenerator\"));\n\nvar _asyncIterator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncIterator\"));\n/**\n * Executes the query represented by a path.\n *\n * Requires:\n * - a queryEngine property in the path settings\n * - a sparql property on the path proxy\n */\n\n\nvar ExecuteQueryHandler =\n/*#__PURE__*/\nfunction () {\n  function ExecuteQueryHandler() {\n    _classCallCheck(this, ExecuteQueryHandler);\n  }\n\n  _createClass(ExecuteQueryHandler, [{\n    key: \"handle\",\n    value: function handle(pathData, path) {\n      var _this = this;\n\n      return (0, _wrapAsyncGenerator2.default)(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var queryEngine, query, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, bindings;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Retrieve the query engine and query\n                queryEngine = pathData.settings.queryEngine;\n\n                if (queryEngine) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error(\"\".concat(pathData, \" has no queryEngine setting\"));\n\n              case 3:\n                _context.next = 5;\n                return (0, _awaitAsyncGenerator2.default)(path.sparql);\n\n              case 5:\n                query = _context.sent;\n\n                if (query) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"\".concat(pathData, \" has no sparql property\"));\n\n              case 8:\n                // Extract the term from every query result\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 10;\n                _iterator = (0, _asyncIterator2.default)(queryEngine.execute(query));\n\n              case 12:\n                _context.next = 14;\n                return (0, _awaitAsyncGenerator2.default)(_iterator.next());\n\n              case 14:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 18;\n                return (0, _awaitAsyncGenerator2.default)(_step.value);\n\n              case 18:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 26;\n                  break;\n                }\n\n                bindings = _value;\n                _context.next = 23;\n                return _this.extractTerm(bindings, pathData);\n\n              case 23:\n                _iteratorNormalCompletion = true;\n                _context.next = 12;\n                break;\n\n              case 26:\n                _context.next = 32;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](10);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 32:\n                _context.prev = 32;\n                _context.prev = 33;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                _context.next = 37;\n                return (0, _awaitAsyncGenerator2.default)(_iterator.return());\n\n              case 37:\n                _context.prev = 37;\n\n                if (!_didIteratorError) {\n                  _context.next = 40;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 40:\n                return _context.finish(37);\n\n              case 41:\n                return _context.finish(32);\n\n              case 42:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[10, 28, 32, 42], [33,, 37, 41]]);\n      }))();\n    }\n    /**\n     * Extracts the first term from a query result binding as a new path.\n     */\n\n  }, {\n    key: \"extractTerm\",\n    value: function extractTerm(binding, pathData) {\n      // Extract the first term from the binding map\n      if (binding.size !== 1) throw new Error('Only single-variable queries are supported');\n      var term = binding.values().next().value; // Each result is a new path that starts from the given term as subject\n\n      return pathData.extendPath({\n        subject: term\n      }, null);\n    }\n  }]);\n\n  return ExecuteQueryHandler;\n}();\n\nexports.default = ExecuteQueryHandler;","map":null,"metadata":{},"sourceType":"script"}