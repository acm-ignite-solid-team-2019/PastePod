{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _solidAuthClient = _interopRequireDefault(require(\"solid-auth-client\"));\n\nvar _v = _interopRequireDefault(require(\"uuid/v4\"));\n\nvar _context = _interopRequireDefault(require(\"./context.json\"));\n\nvar _ldflex = require(\"ldflex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _awaitAsyncGenerator(value) {\n  return new _AwaitValue(value);\n}\n\nfunction _wrapAsyncGenerator(fn) {\n  return function () {\n    return new _AsyncGenerator(fn.apply(this, arguments));\n  };\n}\n\nfunction _AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof _AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(\"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen.return !== \"function\") {\n    this.return = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\n_AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\n_AsyncGenerator.prototype.throw = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\n_AsyncGenerator.prototype.return = function (arg) {\n  return this._invoke(\"return\", arg);\n};\n\nfunction _AwaitValue(value) {\n  this.wrapped = value;\n}\n\nfunction _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol === \"function\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n/* babel-plugin-inline-import './activity.ttl' */\n\n\nvar activityTemplate = \"_:activity a _:type;\\n    <https://www.w3.org/ns/activitystreams#actor> _:actor;\\n    <https://www.w3.org/ns/activitystreams#object> _:object;\\n    <https://www.w3.org/ns/activitystreams#published> _:published.\\n\";\nvar _context$Context = _context.default['@context'],\n    as = _context$Context.as,\n    xsd = _context$Context.xsd;\n/**\n * Handler that creates an activity in the user's data pod\n * Requires:\n * - the `root.user` handler\n * - the `root[...]` resolver\n */\n\nvar CreateActivityHandler =\n/*#__PURE__*/\nfunction () {\n  function CreateActivityHandler() {\n    _classCallCheck(this, CreateActivityHandler);\n\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$type = _ref2.type,\n        type = _ref2$type === void 0 ? \"\".concat(as, \"#Like\") : _ref2$type,\n        _ref2$path = _ref2.path,\n        path = _ref2$path === void 0 ? '/public/activities' : _ref2$path;\n\n    this._type = type;\n    this._path = path;\n  }\n\n  _createClass(CreateActivityHandler, [{\n    key: \"handle\",\n    value: function handle(path, proxy) {\n      var self = this;\n      var root = proxy.root;\n      var user = root.user; // Return an iterator over the new activity URLs\n\n      return function () {\n        return (0, _ldflex.toIterablePromise)(\n        /*#__PURE__*/\n        _wrapAsyncGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var activities, inserts, type, actor, time, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, object, id, props, location, _i, _id;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // Create an activity for each object on the path\n                  activities = [];\n                  inserts = [];\n                  type = self._type;\n                  _context2.next = 5;\n                  return _awaitAsyncGenerator(user);\n\n                case 5:\n                  actor = _context2.sent;\n                  time = new Date().toISOString();\n                  _iteratorNormalCompletion = true;\n                  _didIteratorError = false;\n                  _context2.prev = 9;\n                  _iterator = _asyncIterator(proxy);\n\n                case 11:\n                  _context2.next = 13;\n                  return _awaitAsyncGenerator(_iterator.next());\n\n                case 13:\n                  _step = _context2.sent;\n                  _iteratorNormalCompletion = _step.done;\n                  _context2.next = 17;\n                  return _awaitAsyncGenerator(_step.value);\n\n                case 17:\n                  _value = _context2.sent;\n\n                  if (_iteratorNormalCompletion) {\n                    _context2.next = 24;\n                    break;\n                  }\n\n                  object = _value;\n\n                  if (typeof object === 'string' || object.termType === 'NamedNode') {\n                    id = \"#\".concat((0, _v.default)());\n                    props = {\n                      id: id,\n                      type: type,\n                      actor: actor,\n                      object: object,\n                      time: time\n                    };\n                    activities.push(id);\n                    inserts.push(self._createActivity(props));\n                  }\n\n                case 21:\n                  _iteratorNormalCompletion = true;\n                  _context2.next = 11;\n                  break;\n\n                case 24:\n                  _context2.next = 30;\n                  break;\n\n                case 26:\n                  _context2.prev = 26;\n                  _context2.t0 = _context2[\"catch\"](9);\n                  _didIteratorError = true;\n                  _iteratorError = _context2.t0;\n\n                case 30:\n                  _context2.prev = 30;\n                  _context2.prev = 31;\n\n                  if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                    _context2.next = 35;\n                    break;\n                  }\n\n                  _context2.next = 35;\n                  return _awaitAsyncGenerator(_iterator.return());\n\n                case 35:\n                  _context2.prev = 35;\n\n                  if (!_didIteratorError) {\n                    _context2.next = 38;\n                    break;\n                  }\n\n                  throw _iteratorError;\n\n                case 38:\n                  return _context2.finish(35);\n\n                case 39:\n                  return _context2.finish(30);\n\n                case 40:\n                  _context2.t1 = URL;\n                  _context2.t2 = self._path;\n                  _context2.next = 44;\n                  return _awaitAsyncGenerator(user.pim_storage);\n\n                case 44:\n                  _context2.t3 = _context2.sent;\n                  location = new _context2.t1(_context2.t2, _context2.t3);\n                  _context2.next = 48;\n                  return _awaitAsyncGenerator(self._sendPatch(location, {\n                    insert: inserts.join('')\n                  }));\n\n                case 48:\n                  _i = 0;\n\n                case 49:\n                  if (!(_i < activities.length)) {\n                    _context2.next = 56;\n                    break;\n                  }\n\n                  _id = activities[_i];\n                  _context2.next = 53;\n                  return root[new URL(_id, location)];\n\n                case 53:\n                  _i++;\n                  _context2.next = 49;\n                  break;\n\n                case 56:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee, this, [[9, 26, 30, 40], [31,, 35, 39]]);\n        })));\n      };\n    } // Creates a Turtle snippet representing the activity\n\n  }, {\n    key: \"_createActivity\",\n    value: function _createActivity(_ref3) {\n      var id = _ref3.id,\n          type = _ref3.type,\n          actor = _ref3.actor,\n          object = _ref3.object,\n          time = _ref3.time;\n      return activityTemplate.replace(/_:activity/, \"<\".concat(id, \">\")).replace(/_:type/, \"<\".concat(type, \">\")).replace(/_:actor/g, \"<\".concat(actor, \">\")).replace(/_:object/g, \"<\".concat(object, \">\")).replace(/_:published/g, \"\\\"\".concat(time, \"\\\"^^<\").concat(xsd, \"dateTime>\"));\n    } // Sends a PATCH request to create the activity\n\n  }, {\n    key: \"_sendPatch\",\n    value: function _sendPatch(resource, _ref4) {\n      var insert = _ref4.insert;\n      var patch = \"INSERT {\\n\".concat(insert, \"\\n}\");\n      return _solidAuthClient.default.fetch(resource, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/sparql-update'\n        },\n        body: patch\n      });\n    }\n  }]);\n\n  return CreateActivityHandler;\n}();\n\nexports.default = CreateActivityHandler;","map":null,"metadata":{},"sourceType":"script"}