{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar data_model_1 = require(\"@rdfjs/data-model\");\n\nvar asynciterator_1 = require(\"asynciterator\");\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * An abstract actor that handles Path operations.\n *\n * Provides multiple helper functions used by the Path operation actors.\n */\n\n\nvar ActorAbstractPath =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorAbstractPath, _bus_query_operation_);\n\n  function ActorAbstractPath(args, predicateType) {\n    var _this;\n\n    _classCallCheck(this, ActorAbstractPath);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorAbstractPath).call(this, args, 'path'));\n    _this.predicateType = predicateType;\n    return _this;\n  }\n\n  _createClass(ActorAbstractPath, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(pattern.predicate.type !== this.predicateType)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This Actor only supports ' + this.predicateType + ' Path operations.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }() // generates a blank node that does not yet occur in the path\n\n  }, {\n    key: \"generateBlankNode\",\n    value: function generateBlankNode(path, name) {\n      if (!name) {\n        return this.generateBlankNode(path, 'b');\n      } // path predicates can't contain variables/blank nodes\n\n\n      if (path && (path.subject.value === name || path.object.value === name)) {\n        return this.generateBlankNode(path, name + 'b');\n      }\n\n      return data_model_1.blankNode(name);\n    } // based on definition in spec https://www.w3.org/TR/sparql11-query/\n    // returns all nodes visited by infinitely repeating the given predicate, starting from x\n\n  }, {\n    key: \"ALPeval\",\n    value: function () {\n      var _ALPeval = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(x, predicate, context) {\n        var it;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                it = new asynciterator_1.BufferedIterator();\n                _context2.next = 3;\n                return this.ALP(x, predicate, context, {}, it, {\n                  count: 0\n                });\n\n              case 3:\n                return _context2.abrupt(\"return\", it);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function ALPeval(_x3, _x4, _x5) {\n        return _ALPeval.apply(this, arguments);\n      }\n\n      return ALPeval;\n    }()\n  }, {\n    key: \"ALP\",\n    value: function () {\n      var _ALP = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(x, predicate, context, V, it, counter) {\n        var _this2 = this;\n\n        var s, b, bString, path, results;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                s = rdf_string_1.termToString(x);\n\n                if (!V[s]) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                it._push(x);\n\n                V[s] = x;\n                b = this.generateBlankNode();\n                bString = rdf_string_1.termToString(b);\n                path = ActorAbstractPath.FACTORY.createPath(x, predicate, b);\n                _context4.t0 = bus_query_operation_1.ActorQueryOperation;\n                _context4.next = 11;\n                return this.mediatorQueryOperation.mediate({\n                  operation: path,\n                  context: context\n                });\n\n              case 11:\n                _context4.t1 = _context4.sent;\n                results = _context4.t0.getSafeBindings.call(_context4.t0, _context4.t1);\n                counter.count++;\n                results.bindingsStream.on('data',\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(bindings) {\n                    var result;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            result = bindings.get(bString);\n                            _context3.next = 3;\n                            return _this2.ALP(result, predicate, context, V, it, counter);\n\n                          case 3:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function (_x12) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n                results.bindingsStream.on('end', function () {\n                  if (--counter.count === 0) {\n                    it.close();\n                  }\n                });\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function ALP(_x6, _x7, _x8, _x9, _x10, _x11) {\n        return _ALP.apply(this, arguments);\n      }\n\n      return ALP;\n    }()\n  }]);\n\n  return ActorAbstractPath;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nActorAbstractPath.FACTORY = new sparqlalgebrajs_1.Factory();\nexports.ActorAbstractPath = ActorAbstractPath;","map":null,"metadata":{},"sourceType":"script"}