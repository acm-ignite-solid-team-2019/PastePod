{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar asynciterator_1 = require(\"asynciterator\");\n/**\n * An {@link AsyncReiterable} that is backed by an array.\n */\n\n\nvar AsyncReiterableArray =\n/*#__PURE__*/\nfunction () {\n  function AsyncReiterableArray(array, terminate) {\n    _classCallCheck(this, AsyncReiterableArray);\n\n    this.array = array.slice();\n    this.iterators = [];\n\n    if (terminate) {\n      this.array.push(null);\n    }\n  }\n  /**\n   * Create a new {@link AsyncReiterableArray} with the given data elements\n   * that will be ended.\n   * @param {T[]} array An array of data elements.\n   * @return {AsyncReiterableArray<T>} A new ended {@link AsyncReiterableArray} with the given data elements.\n   */\n\n\n  _createClass(AsyncReiterableArray, [{\n    key: \"iterator\",\n    value: function iterator() {\n      if (this.isEnded()) {\n        return new asynciterator_1.ArrayIterator(this.array.slice(0, this.array.length - 1));\n      }\n\n      var iterator = new asynciterator_1.BufferedIterator();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var data = _step.value;\n          AsyncReiterableArray.pushToIterator(iterator, data);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.iterators.push(iterator);\n      return iterator;\n    }\n  }, {\n    key: \"push\",\n    value: function push(data) {\n      if (this.isEnded()) {\n        throw new Error('Can not push data anymore into an AsyncReiterableArray after it has been terminated.');\n      }\n\n      this.array.push(data);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.iterators[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var iterator = _step2.value;\n          AsyncReiterableArray.pushToIterator(iterator, data);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isEnded\",\n    value: function isEnded() {\n      return this.array.length > 0 && this.array[this.array.length - 1] === null;\n    }\n  }], [{\n    key: \"fromFixedData\",\n    value: function fromFixedData(array) {\n      return new AsyncReiterableArray(array, true);\n    }\n    /**\n     * Create a new {@link AsyncReiterableArray} with the given data elements\n     * that will not be ended.\n     * @param {T[]} initialData An array of initial data elements.\n     * @return {AsyncReiterableArray<T>} A new open-ended {@link AsyncReiterableArray} with the given data elements.\n     */\n\n  }, {\n    key: \"fromInitialData\",\n    value: function fromInitialData(initialData) {\n      return new AsyncReiterableArray(initialData, false);\n    }\n    /**\n     * @return {AsyncReiterableArray<T>} A new open-ended {@link AsyncReiterableArray} without data elements.\n     */\n\n  }, {\n    key: \"fromInitialEmpty\",\n    value: function fromInitialEmpty() {\n      return AsyncReiterableArray.fromInitialData([]);\n    }\n  }, {\n    key: \"pushToIterator\",\n    value: function pushToIterator(iterator, data) {\n      if (data === null) {\n        iterator.close();\n      } else {\n        iterator._push(data);\n      }\n    }\n  }]);\n\n  return AsyncReiterableArray;\n}();\n\nexports.AsyncReiterableArray = AsyncReiterableArray;","map":null,"metadata":{},"sourceType":"script"}