{"ast":null,"code":"// **N3StreamWriter** serializes a quad stream into a text stream.\nvar Transform = require('stream').Transform,\n    util = require('util'),\n    N3Writer = require('./N3Writer.js'); // ## Constructor\n\n\nfunction N3StreamWriter(options) {\n  if (!(this instanceof N3StreamWriter)) return new N3StreamWriter(options); // Initialize Transform base class\n\n  Transform.call(this, {\n    encoding: 'utf8'\n  });\n  this._writableState.objectMode = true; // Set up writer with a dummy stream object\n\n  var self = this;\n  var writer = this._writer = new N3Writer({\n    write: function write(quad, encoding, callback) {\n      self.push(quad);\n      callback && callback();\n    },\n    end: function end(callback) {\n      self.push(null);\n      callback && callback();\n    }\n  }, options); // Implement Transform methods on top of writer\n\n  this._transform = function (quad, encoding, done) {\n    writer.addQuad(quad, done);\n  };\n\n  this._flush = function (done) {\n    writer.end(done);\n  };\n}\n\nutil.inherits(N3StreamWriter, Transform); // ### Serializes a stream of quads\n\nN3StreamWriter.prototype.import = function (stream) {\n  var self = this;\n  stream.on('data', function (quad) {\n    self.write(quad);\n  });\n  stream.on('end', function () {\n    self.end();\n  });\n  stream.on('error', function (error) {\n    self.emit('error', error);\n  });\n  stream.on('prefix', function (prefix, iri) {\n    self._writer.addPrefix(prefix, iri);\n  });\n  return this;\n}; // ## Exports\n\n\nmodule.exports = N3StreamWriter;","map":null,"metadata":{},"sourceType":"script"}