{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nvar stream_1 = require(\"stream\");\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\n\n\nvar ActorSparqlSerializeSparqlJson =\n/*#__PURE__*/\nfunction (_bus_sparql_serialize) {\n  _inherits(ActorSparqlSerializeSparqlJson, _bus_sparql_serialize);\n\n  function ActorSparqlSerializeSparqlJson(args) {\n    _classCallCheck(this, ActorSparqlSerializeSparqlJson);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorSparqlSerializeSparqlJson).call(this, args));\n  }\n  /**\n   * Converts an RDF term to its JSON representation.\n   * @param {RDF.Term} value An RDF term.\n   * @return {any} A JSON object.\n   */\n\n\n  _createClass(ActorSparqlSerializeSparqlJson, [{\n    key: \"testHandleChecked\",\n    value: function () {\n      var _testHandleChecked = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(['bindings', 'boolean'].indexOf(action.type) < 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This actor can only handle bindings streams or booleans.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testHandleChecked(_x, _x2) {\n        return _testHandleChecked.apply(this, arguments);\n      }\n\n      return testHandleChecked;\n    }()\n  }, {\n    key: \"runHandle\",\n    value: function () {\n      var _runHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action, mediaType, context) {\n        var data, head, empty, resultStream;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = new stream_1.Readable();\n\n                data._read = function () {\n                  return;\n                }; // Write head\n\n\n                head = {};\n\n                if (action.type === 'bindings' && action.variables.length) {\n                  head.vars = action.variables.map(function (v) {\n                    return v.substr(1);\n                  });\n                }\n\n                data.push('{\"head\": ' + JSON.stringify(head) + ',\\n');\n                empty = true;\n\n                if (!(action.type === 'bindings')) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                resultStream = action.bindingsStream; // Write bindings\n\n                resultStream.on('error', function (e) {\n                  data.emit('error', e);\n                });\n                resultStream.on('data', function (bindings) {\n                  if (empty) {\n                    data.push('\"results\": { \"bindings\": [\\n');\n                  } else {\n                    data.push(',\\n');\n                  } // JSON SPARQL results spec does not allow unbound variables and blank node bindings\n\n\n                  var realBindings = bindings.filter(function (v, k) {\n                    return !!v && k.startsWith('?');\n                  });\n                  data.push(JSON.stringify(realBindings.mapEntries(function (_ref) {\n                    var _ref2 = _slicedToArray(_ref, 2),\n                        key = _ref2[0],\n                        value = _ref2[1];\n\n                    return [key.substr(1), ActorSparqlSerializeSparqlJson.bindingToJsonBindings(value)];\n                  }).toJSON()));\n                  empty = false;\n                }); // Close streams\n\n                resultStream.on('end', function () {\n                  if (empty) {\n                    data.push('\"results\": { \"bindings\": [] }}\\n');\n                  } else {\n                    data.push('\\n]}}\\n');\n                  }\n\n                  data.push(null);\n                });\n                _context2.next = 27;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = data;\n                _context2.next = 17;\n                return action.booleanResult;\n\n              case 17:\n                _context2.t1 = _context2.sent;\n                _context2.t2 = '\"boolean\":' + _context2.t1;\n                _context2.t3 = _context2.t2 + '\\n}\\n';\n\n                _context2.t0.push.call(_context2.t0, _context2.t3);\n\n                data.push(null);\n                _context2.next = 27;\n                break;\n\n              case 24:\n                _context2.prev = 24;\n                _context2.t4 = _context2[\"catch\"](13);\n                setImmediate(function () {\n                  return data.emit('error', _context2.t4);\n                });\n\n              case 27:\n                return _context2.abrupt(\"return\", {\n                  data: data\n                });\n\n              case 28:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[13, 24]]);\n      }));\n\n      function runHandle(_x3, _x4, _x5) {\n        return _runHandle.apply(this, arguments);\n      }\n\n      return runHandle;\n    }()\n  }], [{\n    key: \"bindingToJsonBindings\",\n    value: function bindingToJsonBindings(value) {\n      if (value.termType === 'Literal') {\n        var literal = value;\n        var jsonValue = {\n          value: literal.value,\n          type: 'literal'\n        };\n        var language = literal.language;\n        var datatype = literal.datatype;\n\n        if (language) {\n          jsonValue['xml:lang'] = language;\n        } else if (datatype && datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n          jsonValue.datatype = datatype.value;\n        }\n\n        return jsonValue;\n      } else if (value.termType === 'BlankNode') {\n        return {\n          value: value.value,\n          type: 'bnode'\n        };\n      } else {\n        return {\n          value: value.value,\n          type: 'uri'\n        };\n      }\n    }\n  }]);\n\n  return ActorSparqlSerializeSparqlJson;\n}(bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes);\n\nexports.ActorSparqlSerializeSparqlJson = ActorSparqlSerializeSparqlJson;","map":null,"metadata":{},"sourceType":"script"}