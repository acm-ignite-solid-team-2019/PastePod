{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@comunica/core\");\n/**\n * A mediator that picks the first actor that resolves its test.\n */\n\n\nvar MediatorRace =\n/*#__PURE__*/\nfunction (_core_1$Mediator) {\n  _inherits(MediatorRace, _core_1$Mediator);\n\n  function MediatorRace(args) {\n    _classCallCheck(this, MediatorRace);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MediatorRace).call(this, args));\n  }\n\n  _createClass(MediatorRace, [{\n    key: \"mediateWith\",\n    value: function mediateWith(action, testResults) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var errors = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var testResult = _step.value;\n            testResult.reply.then(function () {\n              resolve(testResult.actor);\n            }).catch(function (error) {\n              // Reject if all replies were rejected\n              errors.push(error);\n\n              if (errors.length === testResults.length) {\n                reject(new Error(_this.name + ' mediated over all rejecting actors:\\n' + errors.map(function (e) {\n                  return e.toString();\n                }).join('\\n')));\n              }\n            });\n          };\n\n          for (var _iterator = testResults[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return MediatorRace;\n}(core_1.Mediator);\n\nexports.MediatorRace = MediatorRace;","map":null,"metadata":{},"sourceType":"script"}