{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Traverses a path to collect links and nodes into an expression.\n */\n\nvar PathExpressionHandler =\n/*#__PURE__*/\nfunction () {\n  function PathExpressionHandler() {\n    _classCallCheck(this, PathExpressionHandler);\n  }\n\n  _createClass(PathExpressionHandler, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pathData) {\n        var segments, current, predicate, subject;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                segments = [];\n                current = pathData; // Add all predicates to the path\n\n              case 2:\n                if (!current.parent) {\n                  _context.next = 11;\n                  break;\n                }\n\n                if (!current.predicate) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return current.predicate;\n\n              case 6:\n                predicate = _context.sent;\n                segments.unshift({\n                  predicate: predicate\n                });\n\n              case 8:\n                // Move to parent link\n                current = current.parent;\n                _context.next = 2;\n                break;\n\n              case 11:\n                if (current.subject) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Expected root subject in \".concat(current));\n\n              case 13:\n                _context.next = 15;\n                return current.subject;\n\n              case 15:\n                subject = _context.sent;\n                segments.unshift({\n                  subject: subject\n                });\n                return _context.abrupt(\"return\", segments);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n\n      return handle;\n    }()\n  }]);\n\n  return PathExpressionHandler;\n}();\n\nexports.default = PathExpressionHandler;","map":null,"metadata":{},"sourceType":"script"}