{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ActorRdfDereference_1 = require(\"./ActorRdfDereference\");\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\n\n\nvar ActorRdfDereferenceMediaMappings =\n/*#__PURE__*/\nfunction (_ActorRdfDereference_) {\n  _inherits(ActorRdfDereferenceMediaMappings, _ActorRdfDereference_);\n\n  function ActorRdfDereferenceMediaMappings(args) {\n    _classCallCheck(this, ActorRdfDereferenceMediaMappings);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfDereferenceMediaMappings).call(this, args));\n  }\n  /**\n   * Get the media type based on the extension of the given path,\n   * which can be an URL or file path.\n   * @param {string} path A path.\n   * @return {string} A media type or the empty string.\n   */\n\n\n  _createClass(ActorRdfDereferenceMediaMappings, [{\n    key: \"getMediaTypeFromExtension\",\n    value: function getMediaTypeFromExtension(path) {\n      var dotIndex = path.lastIndexOf('.');\n\n      if (dotIndex >= 0) {\n        var ext = path.substr(dotIndex); // ignore dot\n\n        return this.mediaMappings[ext.substring(1)] || '';\n      }\n\n      return '';\n    }\n  }]);\n\n  return ActorRdfDereferenceMediaMappings;\n}(ActorRdfDereference_1.ActorRdfDereference);\n\nexports.ActorRdfDereferenceMediaMappings = ActorRdfDereferenceMediaMappings;","map":null,"metadata":{},"sourceType":"script"}