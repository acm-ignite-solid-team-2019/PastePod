{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_rdf_metadata_1 = require(\"@comunica/bus-rdf-metadata\");\n\nvar stream_1 = require(\"stream\");\n/**\n * An RDF Metadata Actor that splits off the metadata based on the existence of a 'foaf:primaryTopic' link.\n * Only non-triple quad streams are supported.\n */\n\n\nvar ActorRdfMetadataPrimaryTopic =\n/*#__PURE__*/\nfunction (_bus_rdf_metadata_1$A) {\n  _inherits(ActorRdfMetadataPrimaryTopic, _bus_rdf_metadata_1$A);\n\n  function ActorRdfMetadataPrimaryTopic(args) {\n    _classCallCheck(this, ActorRdfMetadataPrimaryTopic);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfMetadataPrimaryTopic).call(this, args));\n  }\n\n  _createClass(ActorRdfMetadataPrimaryTopic, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!action.triples) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This actor only supports non-triple quad streams.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var data, metadata, attachListeners;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = new stream_1.Readable({\n                  objectMode: true\n                });\n                metadata = new stream_1.Readable({\n                  objectMode: true\n                }); // Delay attachment of listeners until the data or metadata stream is being read.\n\n                attachListeners = function attachListeners() {\n                  // Attach listeners only once\n                  data._read = metadata._read = function () {\n                    return;\n                  }; // Forward errors\n\n\n                  action.quads.on('error', function (error) {\n                    data.emit('error', error);\n                    metadata.emit('error', error);\n                  }); // First pass over data to categorize in graphs,\n                  // and to detect the primaryTopic triple.\n\n                  var graphs = {};\n                  var endpointIdentifier = null;\n                  var primaryTopics = {};\n                  action.quads.on('data', function (quad) {\n                    if (quad.predicate.value === 'http://rdfs.org/ns/void#subset' && quad.object.value === action.pageUrl) {\n                      endpointIdentifier = quad.subject.value;\n                    } else if (quad.predicate.value === 'http://xmlns.com/foaf/0.1/primaryTopic') {\n                      primaryTopics[quad.object.value] = quad.subject.value;\n                    }\n\n                    var quads = graphs[quad.graph.value];\n\n                    if (!quads) {\n                      quads = graphs[quad.graph.value] = [];\n                    }\n\n                    quads.push(quad);\n                  }); // When the stream has finished,\n                  // determine the appropriate metadata graph,\n                  // and emit all quads to the appropriate streams.\n\n                  action.quads.on('end', function () {\n                    var metadataGraph = endpointIdentifier ? primaryTopics[endpointIdentifier] : null;\n\n                    for (var graphName in graphs) {\n                      if (graphName === metadataGraph) {\n                        var _iteratorNormalCompletion = true;\n                        var _didIteratorError = false;\n                        var _iteratorError = undefined;\n\n                        try {\n                          for (var _iterator = graphs[graphName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            var quad = _step.value;\n                            metadata.push(quad);\n                          }\n                        } catch (err) {\n                          _didIteratorError = true;\n                          _iteratorError = err;\n                        } finally {\n                          try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                              _iterator.return();\n                            }\n                          } finally {\n                            if (_didIteratorError) {\n                              throw _iteratorError;\n                            }\n                          }\n                        }\n                      } else {\n                        var _iteratorNormalCompletion2 = true;\n                        var _didIteratorError2 = false;\n                        var _iteratorError2 = undefined;\n\n                        try {\n                          for (var _iterator2 = graphs[graphName][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var _quad = _step2.value;\n                            data.push(_quad);\n                          }\n                        } catch (err) {\n                          _didIteratorError2 = true;\n                          _iteratorError2 = err;\n                        } finally {\n                          try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                              _iterator2.return();\n                            }\n                          } finally {\n                            if (_didIteratorError2) {\n                              throw _iteratorError2;\n                            }\n                          }\n                        }\n                      }\n                    }\n\n                    data.push(null);\n                    metadata.push(null);\n                  });\n                };\n\n                data._read = metadata._read = function () {\n                  attachListeners();\n                };\n\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  metadata: metadata\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return ActorRdfMetadataPrimaryTopic;\n}(bus_rdf_metadata_1.ActorRdfMetadata);\n\nexports.ActorRdfMetadataPrimaryTopic = ActorRdfMetadataPrimaryTopic;","map":null,"metadata":{},"sourceType":"script"}