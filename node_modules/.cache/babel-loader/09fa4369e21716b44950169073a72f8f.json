{"ast":null,"code":"var _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AsyncIterator = require('asynciterator'); // merges the contents of multiple streams\n\n\nvar MergeIterator =\n/*#__PURE__*/\nfunction (_AsyncIterator) {\n  \"use strict\";\n\n  _inherits(MergeIterator, _AsyncIterator);\n\n  function MergeIterator(streams) {\n    var _this;\n\n    _classCallCheck(this, MergeIterator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MergeIterator).call(this));\n    if (!Array.isArray(streams)) streams = Array.prototype.slice.call(arguments);\n    _this.streams = streams;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var stream = _step.value;\n        stream.on('readable', function () {\n          return _this.emit('readable');\n        });\n        stream.on('end', function () {\n          return _this._removeStream(stream);\n        });\n      };\n\n      for (var _iterator = streams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (_this.streams.length === 0) _this.close();\n    _this.idx = _this.streams.length - 1;\n    return _this;\n  }\n\n  _createClass(MergeIterator, [{\n    key: \"_removeStream\",\n    value: function _removeStream(stream) {\n      var idx = this.streams.indexOf(stream);\n      if (idx < 0) return;\n      this.streams.splice(idx, 1);\n      if (this.idx >= this.streams.length) --this.idx;\n      if (this.streams.length === 0) this._end();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get(_getPrototypeOf(MergeIterator.prototype), \"close\", this).call(this);\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.streams[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var stream = _step2.value;\n          stream.close();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"read\",\n    value: function read() {\n      for (var attempts = 0; attempts < this.streams.length; ++attempts) {\n        this.idx = (this.idx + 1) % this.streams.length;\n        var item = this.streams[this.idx].read();\n        if (item !== null) return item;\n      }\n\n      return null;\n    }\n  }]);\n\n  return MergeIterator;\n}(AsyncIterator);\n\nmodule.exports = MergeIterator;","map":null,"metadata":{},"sourceType":"script"}