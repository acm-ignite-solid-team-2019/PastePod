{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\n\nvar utils_datasource_1 = require(\"@comunica/utils-datasource\");\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar MediatedQuadSource_1 = require(\"./MediatedQuadSource\");\n/**\n * A comunica Hypermedia RDF Resolve Quad Pattern Actor.\n */\n\n\nvar ActorRdfResolveQuadPatternHypermedia =\n/*#__PURE__*/\nfunction (_bus_rdf_resolve_quad) {\n  _inherits(ActorRdfResolveQuadPatternHypermedia, _bus_rdf_resolve_quad);\n\n  function ActorRdfResolveQuadPatternHypermedia(args) {\n    var _this;\n\n    _classCallCheck(this, ActorRdfResolveQuadPatternHypermedia);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfResolveQuadPatternHypermedia).call(this, args));\n    _this.sources = {};\n    return _this;\n  }\n\n  _createClass(ActorRdfResolveQuadPatternHypermedia, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return utils_datasource_1.DataSourceUtils.singleSourceHasType(action.context, 'hypermedia');\n\n              case 2:\n                if (_context.sent) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"\".concat(this.name, \" requires a single source with a 'hypermedia' entrypoint to be present in the context.\"));\n\n              case 4:\n                return _context.abrupt(\"return\", true);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n    /**\n     * Choose a Hypermedia hypermedia form.\n     * @param {string} hypermedia A hypermedia URL.\n     * @param {ActionContext} context An optional context.\n     * @return {Promise<ISearchForm>} A promise resolving to a hypermedia form.\n     */\n\n  }, {\n    key: \"chooseForm\",\n    value: function () {\n      var _chooseForm = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(hypermedia, context) {\n        var firstPageMetadata, metadata, searchForm;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.mediatorRdfDereferencePaged.mediate({\n                  context: context,\n                  url: hypermedia\n                });\n\n              case 2:\n                firstPageMetadata = _context2.sent.firstPageMetadata;\n\n                if (firstPageMetadata) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error(\"No metadata was found at hypermedia entrypoint \".concat(hypermedia));\n\n              case 5:\n                _context2.next = 7;\n                return firstPageMetadata();\n\n              case 7:\n                metadata = _context2.sent;\n\n                if (!(!metadata.searchForms || !metadata.searchForms.values.length)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw new Error(\"No Hydra search forms were discovered in the metadata of \".concat(hypermedia, \".\") + \" You may be missing an actor that extracts this metadata\");\n\n              case 10:\n                _context2.next = 12;\n                return this.mediatorRdfResolveHypermedia.mediate({\n                  metadata: metadata,\n                  context: context\n                });\n\n              case 12:\n                searchForm = _context2.sent.searchForm;\n                return _context2.abrupt(\"return\", searchForm);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function chooseForm(_x2, _x3) {\n        return _chooseForm.apply(this, arguments);\n      }\n\n      return chooseForm;\n    }()\n  }, {\n    key: \"createSource\",\n    value: function () {\n      var _createSource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(context) {\n        var _this2 = this;\n\n        var chosenForm, uriConstructor;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // Determine form lazily when a URL is constructed.\n                chosenForm = null; // Create a quad pattern to URL converter\n\n                uriConstructor =\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(subject, predicate, object, graph) {\n                    var hypermedia, entries, input, _i, entry;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (!chosenForm) {\n                              // Collect metadata of the hypermedia\n                              hypermedia = _this2.getContextSource(context).value; // Save the form, so it is determined only once per source.\n\n                              chosenForm = _this2.chooseForm(hypermedia, context);\n                            }\n\n                            entries = {};\n                            input = [{\n                              uri: _this2.subjectUri,\n                              term: subject\n                            }, {\n                              uri: _this2.predicateUri,\n                              term: predicate\n                            }, {\n                              uri: _this2.objectUri,\n                              term: object\n                            }, {\n                              uri: _this2.graphUri,\n                              term: graph\n                            }];\n\n                            for (_i = 0; _i < input.length; _i++) {\n                              entry = input[_i];\n\n                              if (entry.uri && entry.term) {\n                                entries[entry.uri] = rdf_string_1.termToString(entry.term);\n                              }\n                            }\n\n                            _context3.next = 6;\n                            return chosenForm;\n\n                          case 6:\n                            _context3.t0 = entries;\n                            return _context3.abrupt(\"return\", _context3.sent.getUri(_context3.t0));\n\n                          case 8:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function uriConstructor(_x5, _x6, _x7, _x8) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                return _context4.abrupt(\"return\", new MediatedQuadSource_1.MediatedQuadSource(this.mediatorRdfDereferencePaged, uriConstructor, context));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function createSource(_x4) {\n        return _createSource.apply(this, arguments);\n      }\n\n      return createSource;\n    }()\n  }, {\n    key: \"getSource\",\n    value: function () {\n      var _getSource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(context) {\n        var hypermedia;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // Cache the source object for each hypermedia entrypoint\n                hypermedia = this.getContextSource(context).value;\n\n                if (!this.sources[hypermedia]) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.sources[hypermedia]);\n\n              case 3:\n                _context5.next = 5;\n                return this.sources[hypermedia] = this.createSource(context);\n\n              case 5:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getSource(_x9) {\n        return _getSource.apply(this, arguments);\n      }\n\n      return getSource;\n    }()\n  }, {\n    key: \"getOutput\",\n    value: function () {\n      var _getOutput = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(source, pattern, context) {\n        var output;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _get(_getPrototypeOf(ActorRdfResolveQuadPatternHypermedia.prototype), \"getOutput\", this).call(this, source, pattern, context);\n\n              case 2:\n                output = _context6.sent;\n\n                output.metadata = function () {\n                  return new Promise(function (resolve, reject) {\n                    output.data.on('error', reject);\n                    output.data.on('end', function () {\n                      return reject(new Error('No metadata was found'));\n                    });\n                    output.data.on('metadata', function (metadata) {\n                      resolve(metadata());\n                    });\n                  });\n                };\n\n                return _context6.abrupt(\"return\", output);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getOutput(_x10, _x11, _x12) {\n        return _getOutput.apply(this, arguments);\n      }\n\n      return getOutput;\n    }()\n  }]);\n\n  return ActorRdfResolveQuadPatternHypermedia;\n}(bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource);\n\nexports.ActorRdfResolveQuadPatternHypermedia = ActorRdfResolveQuadPatternHypermedia;","map":null,"metadata":{},"sourceType":"script"}