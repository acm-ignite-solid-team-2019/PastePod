{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\n\nfunction resolve(relativeIRI, baseIRI) {\n  baseIRI = baseIRI || '';\n  var baseFragmentPos = baseIRI.indexOf('#'); // Ignore any fragments in the base IRI\n\n  if (baseFragmentPos > 0) {\n    baseIRI = baseIRI.substr(0, baseFragmentPos);\n  } // Convert empty value directly to base IRI\n\n\n  if (!relativeIRI.length) {\n    return baseIRI;\n  } // If the value starts with a query character, concat directly (but strip the existing query)\n\n\n  if (relativeIRI.startsWith('?')) {\n    var baseQueryPos = baseIRI.indexOf('?');\n\n    if (baseQueryPos > 0) {\n      baseIRI = baseIRI.substr(0, baseQueryPos);\n    }\n\n    return baseIRI + relativeIRI;\n  } // If the value starts with a fragment character, concat directly\n\n\n  if (relativeIRI.startsWith('#')) {\n    return baseIRI + relativeIRI;\n  } // Ignore baseIRI if it is empty\n\n\n  if (!baseIRI.length) {\n    return removeDotSegmentsOfPath(relativeIRI, relativeIRI.indexOf(':'));\n  } // Ignore baseIRI if the value is absolute\n\n\n  var valueColonPos = relativeIRI.indexOf(':');\n\n  if (valueColonPos >= 0) {\n    return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n  } // At this point, the baseIRI MUST be absolute, otherwise we error\n\n\n  var baseColonPos = baseIRI.indexOf(':');\n\n  if (baseColonPos < 0) {\n    throw new Error(\"Found invalid baseIRI '\".concat(baseIRI, \"' for value '\").concat(relativeIRI, \"'\"));\n  }\n\n  var baseIRIScheme = baseIRI.substr(0, baseColonPos + 1); // Inherit the baseIRI scheme if the value starts with '//'\n\n  if (relativeIRI.indexOf('//') === 0) {\n    return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n  } // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n\n\n  var baseSlashAfterColonPos;\n\n  if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n    // If there is no additional '/' after the '//'.\n    baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n\n    if (baseSlashAfterColonPos < 0) {\n      // If something other than a '/' follows the '://', append the value after a '/',\n      // otherwise, prefix the value with only the baseIRI scheme.\n      if (baseIRI.length > baseColonPos + 3) {\n        return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n      } else {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n      }\n    }\n  } else {\n    // If there is not even a single '/' after the ':'\n    baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1); // Always true: baseSlashAfterColonPos < 0\n    // If something other than a '/' follows the ':', append the value after a '/',\n    // otherwise, prefix the value with only the baseIRI scheme.\n\n    if (baseIRI.length > baseColonPos + 1) {\n      return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    } else {\n      return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n  } // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n\n\n  if (relativeIRI.indexOf('/') === 0) {\n    return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n  }\n\n  var baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n  var baseIRILastSlashPos = baseIRIPath.lastIndexOf('/'); // Ignore everything after the last '/' in the baseIRI path\n\n  if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n    baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1); // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n    // This change is only allowed if there is something else following the path\n\n    if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n      relativeIRI = relativeIRI.substr(1);\n    }\n  } // Prefix the value with the baseIRI path where\n\n\n  relativeIRI = baseIRIPath + relativeIRI; // Remove dot segment from the IRI\n\n  relativeIRI = removeDotSegments(relativeIRI); // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n\n  return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\n\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\n\nfunction removeDotSegments(path) {\n  // Prepare a buffer with segments between each '/.\n  // Each segment represents an array of characters.\n  var segmentBuffers = [];\n  var i = 0;\n\n  while (i < path.length) {\n    // Remove '/.' or '/..'\n    switch (path[i]) {\n      case '/':\n        if (path[i + 1] === '.') {\n          if (path[i + 2] === '.') {\n            // Append the remaining path as-is if we find an invalid character after the '.'\n            if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n              segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n              i = path.length;\n              break;\n            } // Go to parent directory,\n            // so we remove a parent segment\n\n\n            segmentBuffers.pop(); // Ensure that we end with a slash if there is a trailing '/..'\n\n            if (!path[i + 3]) {\n              segmentBuffers.push([]);\n            }\n\n            i += 3;\n          } else {\n            // Append the remaining path as-is if we find an invalid character after the '.'\n            if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n              segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n              i = path.length;\n              break;\n            } // Ensure that we end with a slash if there is a trailing '/.'\n\n\n            if (!path[i + 2]) {\n              segmentBuffers.push([]);\n            } // Go to the current directory,\n            // so we do nothing\n\n\n            i += 2;\n          }\n        } else {\n          // Start a new segment\n          segmentBuffers.push([]);\n          i++;\n        }\n\n        break;\n\n      case '#':\n      case '?':\n        // Query and fragment string should be appended unchanged\n        if (!segmentBuffers.length) {\n          segmentBuffers.push([]);\n        }\n\n        segmentBuffers[segmentBuffers.length - 1].push(path.substr(i)); // Break the while loop\n\n        i = path.length;\n        break;\n\n      default:\n        // Not a special character, just append it to our buffer\n        if (!segmentBuffers.length) {\n          segmentBuffers.push([]);\n        }\n\n        segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n        i++;\n        break;\n    }\n  }\n\n  return '/' + segmentBuffers.map(function (buffer) {\n    return buffer.join('');\n  }).join('/');\n}\n\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\n\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n  // Determine where we should start looking for the first '/' that indicates the start of the path\n  var searchOffset = colonPosition + 1;\n\n  if (colonPosition >= 0) {\n    if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n      searchOffset = colonPosition + 3;\n    }\n  } else {\n    if (iri[0] === '/' && iri[1] === '/') {\n      searchOffset = 2;\n    }\n  } // Determine the path\n\n\n  var pathSeparator = iri.indexOf('/', searchOffset);\n\n  if (pathSeparator < 0) {\n    return iri;\n  }\n\n  var base = iri.substr(0, pathSeparator);\n  var path = iri.substr(pathSeparator); // Remove dot segments from the path\n\n  return base + removeDotSegments(path);\n}\n\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\n\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n  return !character || character === '#' || character === '?' || character === '/';\n}","map":null,"metadata":{},"sourceType":"script"}