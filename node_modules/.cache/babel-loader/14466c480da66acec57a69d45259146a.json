{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineEnumerableProperties = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineEnumerableProperties\");\n\nvar _defineProperty = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getThen = getThen;\nexports.toIterablePromise = toIterablePromise;\nexports.memoizeIterable = memoizeIterable;\n\nvar _iterableUtils = require(\"./iterableUtils\");\n/**\n * Lazily returns the `then` function of the created promise.\n */\n\n\nfunction getThen(createPromise) {\n  return function (onResolved, onRejected) {\n    return createPromise().then(onResolved, onRejected);\n  };\n}\n/**\n * Returns an iterable that is also a promise to the first element.\n */\n\n\nfunction toIterablePromise(iterable) {\n  var _then, _ref, _mutatorMap;\n\n  // If called with a generator function,\n  // memoize it to enable multiple iterations\n  if (typeof iterable === 'function') iterable = memoizeIterable(iterable()); // Return an object that is iterable and a promise\n\n  return _ref = {}, _defineProperty(_ref, Symbol.asyncIterator, function () {\n    return iterable[Symbol.asyncIterator]();\n  }), _then = \"then\", _mutatorMap = {}, _mutatorMap[_then] = _mutatorMap[_then] || {}, _mutatorMap[_then].get = function () {\n    var _this = this;\n\n    return getThen(function () {\n      return (0, _iterableUtils.getFirstItem)(_this);\n    });\n  }, _defineProperty(_ref, \"catch\", function _catch(onRejected) {\n    return this.then(null, onRejected);\n  }), _defineProperty(_ref, \"finally\", function _finally(callback) {\n    return this.then().finally(callback);\n  }), _defineEnumerableProperties(_ref, _mutatorMap), _ref;\n}\n/**\n * Returns a memoized version of the iterable\n * that can be iterated over as many times as needed.\n */\n\n\nfunction memoizeIterable(iterable) {\n  var cache = [];\n  var iterator = iterable[Symbol.asyncIterator]();\n  return _defineProperty({}, Symbol.asyncIterator, function () {\n    var i = 0;\n    return {\n      next: function () {\n        var _next = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var item;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(i < cache.length)) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", cache[i++]);\n\n                case 2:\n                  if (iterator) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    done: true\n                  });\n\n                case 4:\n                  // Read and cache an item from the iterable otherwise\n                  item = cache[i++] = iterator.next();\n                  _context.next = 7;\n                  return item;\n\n                case 7:\n                  if (!_context.sent.done) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  iterator = null;\n\n                case 9:\n                  return _context.abrupt(\"return\", item);\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function next() {\n          return _next.apply(this, arguments);\n        }\n\n        return next;\n      }()\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"script"}