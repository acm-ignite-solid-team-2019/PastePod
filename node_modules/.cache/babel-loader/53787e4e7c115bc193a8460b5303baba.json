{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n\nvar sparqlee_1 = require(\"sparqlee\");\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar SortIterator_1 = require(\"./SortIterator\");\n/**\n * A comunica OrderBy Sparqlee Query Operation Actor.\n */\n\n\nvar ActorQueryOperationOrderBySparqlee =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationOrderBySparqlee, _bus_query_operation_);\n\n  function ActorQueryOperationOrderBySparqlee(args) {\n    var _this;\n\n    _classCallCheck(this, ActorQueryOperationOrderBySparqlee);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationOrderBySparqlee).call(this, args, 'orderby'));\n    _this.window = args.window || Infinity;\n    return _this;\n  }\n\n  _createClass(ActorQueryOperationOrderBySparqlee, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, expr, _;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Will throw error for unsupported operators\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 3;\n\n                for (_iterator = pattern.expressions[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  expr = _step.value;\n                  expr = this.extractSortExpression(expr);\n                  _ = new sparqlee_1.AsyncEvaluator(expr);\n                }\n\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](3);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 11:\n                _context.prev = 11;\n                _context.prev = 12;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 14:\n                _context.prev = 14;\n\n                if (!_didIteratorError) {\n                  _context.next = 17;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 17:\n                return _context.finish(14);\n\n              case 18:\n                return _context.finish(11);\n\n              case 19:\n                return _context.abrupt(\"return\", true);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 7, 11, 19], [12,, 14, 18]]);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(pattern, context) {\n        var _this2 = this;\n\n        var outputRaw, output, options, bindingsStream, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.mediatorQueryOperation.mediate({\n                  operation: pattern.input,\n                  context: context\n                });\n\n              case 2:\n                outputRaw = _context3.sent;\n                output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);\n                options = {\n                  window: this.window\n                };\n                bindingsStream = output.bindingsStream;\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context3.prev = 9;\n\n                _loop = function _loop() {\n                  var expr = _step2.value;\n                  var origin = output.bindingsStream;\n\n                  var isAscending = _this2.isAscending(expr);\n\n                  expr = _this2.extractSortExpression(expr); // Transform the stream by annotating it with the expr result\n\n                  var evaluator = new sparqlee_1.AsyncEvaluator(expr);\n\n                  var transform =\n                  /*#__PURE__*/\n                  function () {\n                    var _ref = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee2(bindings, next) {\n                      var result;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.prev = 0;\n                              _context2.next = 3;\n                              return evaluator.evaluate(bindings);\n\n                            case 3:\n                              result = _context2.sent;\n\n                              transformedStream._push({\n                                bindings: bindings,\n                                result: result\n                              });\n\n                              _context2.next = 11;\n                              break;\n\n                            case 7:\n                              _context2.prev = 7;\n                              _context2.t0 = _context2[\"catch\"](0);\n\n                              if (!sparqlee_1.isExpressionError(_context2.t0)) {\n                                bindingsStream.emit('error', _context2.t0);\n                              }\n\n                              transformedStream._push({\n                                bindings: bindings,\n                                result: undefined\n                              });\n\n                            case 11:\n                              next();\n\n                            case 12:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2, this, [[0, 7]]);\n                    }));\n\n                    return function transform(_x5, _x6) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }();\n\n                  var transformedStream = origin.transform({\n                    transform: transform\n                  }); // Sort the annoted stream\n\n                  var sortedStream = new SortIterator_1.SortIterator(transformedStream, function (a, b) {\n                    var orderA = rdf_string_1.termToString(a.result);\n                    var orderB = rdf_string_1.termToString(b.result);\n\n                    if (!orderA || !orderB) {\n                      return 0;\n                    }\n\n                    return orderA > orderB === isAscending ? 1 : -1;\n                  }, options); // Remove the annotation\n\n                  bindingsStream = sortedStream.map(function (_ref2) {\n                    var bindings = _ref2.bindings,\n                        result = _ref2.result;\n                    return bindings;\n                  });\n                };\n\n                for (_iterator2 = pattern.expressions[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  _loop();\n                }\n\n                _context3.next = 18;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t0 = _context3[\"catch\"](9);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context3.t0;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.prev = 19;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 21:\n                _context3.prev = 21;\n\n                if (!_didIteratorError2) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 24:\n                return _context3.finish(21);\n\n              case 25:\n                return _context3.finish(18);\n\n              case 26:\n                return _context3.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: bindingsStream,\n                  metadata: output.metadata,\n                  variables: output.variables\n                });\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 14, 18, 26], [19,, 21, 25]]);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }() // Remove descending operator if necessary\n\n  }, {\n    key: \"extractSortExpression\",\n    value: function extractSortExpression(expr) {\n      var expressionType = expr.expressionType,\n          operator = expr.operator;\n\n      if (expressionType !== sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR) {\n        return expr;\n      }\n\n      return operator === 'desc' ? expr.args[0] : expr;\n    }\n  }, {\n    key: \"isAscending\",\n    value: function isAscending(expr) {\n      var expressionType = expr.expressionType,\n          operator = expr.operator;\n\n      if (expressionType !== sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR) {\n        return true;\n      }\n\n      return operator !== 'desc';\n    }\n  }]);\n\n  return ActorQueryOperationOrderBySparqlee;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nexports.ActorQueryOperationOrderBySparqlee = ActorQueryOperationOrderBySparqlee;","map":null,"metadata":{},"sourceType":"script"}