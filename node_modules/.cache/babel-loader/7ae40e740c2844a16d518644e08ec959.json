{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * A comunica RDF SPARQL Serialize Actor.\n *\n * It serializes quad streams (for example resulting from a CONSTRUCT query)\n * to an RDF syntax.\n */\n\n\nvar ActorSparqlSerializeRdf =\n/*#__PURE__*/\nfunction (_bus_sparql_serialize) {\n  _inherits(ActorSparqlSerializeRdf, _bus_sparql_serialize);\n\n  function ActorSparqlSerializeRdf(args) {\n    _classCallCheck(this, ActorSparqlSerializeRdf);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorSparqlSerializeRdf).call(this, args));\n  }\n\n  _createClass(ActorSparqlSerializeRdf, [{\n    key: \"testHandle\",\n    value: function () {\n      var _testHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action, mediaType, context) {\n        var mediaTypes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(action.type !== 'quads')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Actor ' + this.name + ' can only handle quad streams');\n\n              case 2:\n                _context.next = 4;\n                return this.mediatorMediaTypeCombiner.mediate({\n                  context: context,\n                  mediaTypes: true\n                });\n\n              case 4:\n                mediaTypes = _context.sent.mediaTypes;\n\n                if (mediaType in mediaTypes) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error('Actor ' + this.name + ' can not handle media type ' + mediaType + '. All available types: ' + Object.keys(mediaTypes));\n\n              case 7:\n                return _context.abrupt(\"return\", true);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testHandle(_x, _x2, _x3) {\n        return _testHandle.apply(this, arguments);\n      }\n\n      return testHandle;\n    }()\n  }, {\n    key: \"runHandle\",\n    value: function () {\n      var _runHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action, mediaType, context) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.mediatorRdfSerialize.mediate({\n                  context: context,\n                  handle: {\n                    quads: action.quadStream\n                  },\n                  handleMediaType: mediaType\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent.handle);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runHandle(_x4, _x5, _x6) {\n        return _runHandle.apply(this, arguments);\n      }\n\n      return runHandle;\n    }()\n  }, {\n    key: \"testMediaType\",\n    value: function () {\n      var _testMediaType = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(context) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function testMediaType(_x7) {\n        return _testMediaType.apply(this, arguments);\n      }\n\n      return testMediaType;\n    }()\n  }, {\n    key: \"getMediaTypes\",\n    value: function () {\n      var _getMediaTypes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(context) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.mediatorMediaTypeCombiner.mediate({\n                  context: context,\n                  mediaTypes: true\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent.mediaTypes);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getMediaTypes(_x8) {\n        return _getMediaTypes.apply(this, arguments);\n      }\n\n      return getMediaTypes;\n    }()\n  }]);\n\n  return ActorSparqlSerializeRdf;\n}(bus_sparql_serialize_1.ActorSparqlSerialize);\n\nexports.ActorSparqlSerializeRdf = ActorSparqlSerializeRdf;","map":null,"metadata":{},"sourceType":"script"}