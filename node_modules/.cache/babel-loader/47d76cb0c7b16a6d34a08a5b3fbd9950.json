{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nvar rdf_terms_1 = require(\"rdf-terms\");\n\nvar stream_1 = require(\"stream\");\n/**\n * A comunica Table Sparql Serialize Actor.\n */\n\n\nvar ActorSparqlSerializeTable =\n/*#__PURE__*/\nfunction (_bus_sparql_serialize) {\n  _inherits(ActorSparqlSerializeTable, _bus_sparql_serialize);\n\n  function ActorSparqlSerializeTable(args) {\n    var _this;\n\n    _classCallCheck(this, ActorSparqlSerializeTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorSparqlSerializeTable).call(this, args));\n    _this.padding = ActorSparqlSerializeTable.repeat(' ', _this.columnWidth);\n    return _this;\n  }\n\n  _createClass(ActorSparqlSerializeTable, [{\n    key: \"testHandleChecked\",\n    value: function () {\n      var _testHandleChecked = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(['bindings', 'quads'].indexOf(action.type) < 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This actor can only handle bindings or quad streams.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testHandleChecked(_x, _x2) {\n        return _testHandleChecked.apply(this, arguments);\n      }\n\n      return testHandleChecked;\n    }()\n  }, {\n    key: \"pad\",\n    value: function pad(str) {\n      if (str.length <= this.columnWidth) {\n        return str + this.padding.slice(str.length);\n      } else {\n        return str.slice(0, this.columnWidth - 1) + 'â€¦';\n      }\n    }\n  }, {\n    key: \"pushHeader\",\n    value: function pushHeader(data, labels) {\n      var header = labels.map(this.pad, this).join(' ');\n      data.push(header + '\\n' + ActorSparqlSerializeTable.repeat('-', header.length) + '\\n');\n    }\n  }, {\n    key: \"runHandle\",\n    value: function () {\n      var _runHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action, mediaType, context) {\n        var _this2 = this;\n\n        var data, resultStream;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = new stream_1.Readable();\n\n                data._read = function () {\n                  return;\n                };\n\n                if (action.type === 'bindings') {\n                  resultStream = action.bindingsStream;\n                  this.pushHeader(data, action.variables);\n                  resultStream.on('error', function (e) {\n                    return data.emit('error', e);\n                  });\n                  resultStream.on('data', function (bindings) {\n                    return data.push(bindings.map(function (value, key) {\n                      return _this2.pad(value ? value.value : '');\n                    }).join(' ') + '\\n');\n                  });\n                } else {\n                  resultStream = action.quadStream;\n                  this.pushHeader(data, rdf_terms_1.QUAD_TERM_NAMES);\n                  resultStream.on('error', function (e) {\n                    return data.emit('error', e);\n                  });\n                  resultStream.on('data', function (quad) {\n                    return data.push(rdf_terms_1.getTerms(quad).map(function (term) {\n                      return _this2.pad(term.value);\n                    }).join(' ') + '\\n');\n                  });\n                }\n\n                resultStream.on('end', function () {\n                  return data.push(null);\n                });\n                return _context2.abrupt(\"return\", {\n                  data: data\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runHandle(_x3, _x4, _x5) {\n        return _runHandle.apply(this, arguments);\n      }\n\n      return runHandle;\n    }()\n  }], [{\n    key: \"repeat\",\n    value: function repeat(str, count) {\n      return new Array(count + 1).join(str);\n    }\n  }]);\n\n  return ActorSparqlSerializeTable;\n}(bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes);\n\nexports.ActorSparqlSerializeTable = ActorSparqlSerializeTable;","map":null,"metadata":{},"sourceType":"script"}