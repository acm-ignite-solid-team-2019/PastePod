{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar asynciterator_union_1 = require(\"asynciterator-union\");\n/**\n * A comunica Union Query Operation Actor.\n */\n\n\nvar ActorQueryOperationUnion =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationUnion, _bus_query_operation_);\n\n  function ActorQueryOperationUnion(args) {\n    _classCallCheck(this, ActorQueryOperationUnion);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationUnion).call(this, args, 'union'));\n  }\n  /**\n   * Takes the union of the given double array variables.\n   * Uniqueness is guaranteed.\n   * @param {string[][]} variables Double array of variables to take the union of.\n   * @return {string[]} The union of the given variables.\n   */\n\n\n  _createClass(ActorQueryOperationUnion, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pattern, context) {\n        var outputs, bindingsStream, metadata, variables;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all([this.mediatorQueryOperation.mediate({\n                  operation: pattern.left,\n                  context: context\n                }), this.mediatorQueryOperation.mediate({\n                  operation: pattern.right,\n                  context: context\n                })]);\n\n              case 2:\n                _context2.t0 = bus_query_operation_1.ActorQueryOperation.getSafeBindings;\n                outputs = _context2.sent.map(_context2.t0);\n                bindingsStream = new asynciterator_union_1.RoundRobinUnionIterator(outputs.map(function (output) {\n                  return output.bindingsStream;\n                }));\n                metadata = outputs[0].metadata && outputs[1].metadata ? function () {\n                  return Promise.all([outputs[0].metadata(), outputs[1].metadata()]).then(ActorQueryOperationUnion.unionMetadata);\n                } : null;\n                variables = ActorQueryOperationUnion.unionVariables(outputs.map(function (output) {\n                  return output.variables;\n                }));\n                return _context2.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: bindingsStream,\n                  metadata: metadata,\n                  variables: variables\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }], [{\n    key: \"unionVariables\",\n    value: function unionVariables(variables) {\n      return require('lodash.union').apply({}, variables);\n    }\n    /**\n     * Takes the union of the given metadata array.\n     * It will ensure that the totalItems metadata value is properly calculated.\n     * @param {{[p: string]: any}[]} metadatas Array of metadata.\n     * @return {{[p: string]: any}} Union of the metadata.\n     */\n\n  }, {\n    key: \"unionMetadata\",\n    value: function unionMetadata(metadatas) {\n      var totalItems = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = metadatas[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var metadata = _step.value;\n\n          if (metadata.totalItems && isFinite(metadata.totalItems)) {\n            totalItems += metadata.totalItems;\n          } else {\n            totalItems = Infinity;\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return {\n        totalItems: totalItems\n      };\n    }\n  }]);\n\n  return ActorQueryOperationUnion;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nexports.ActorQueryOperationUnion = ActorQueryOperationUnion;","map":null,"metadata":{},"sourceType":"script"}