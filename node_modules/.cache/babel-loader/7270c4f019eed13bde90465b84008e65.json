{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * All known term types.\n * @see RDF.Term\n * @type {[string , string , string , string , string]}\n */\n\nexports.TERM_TYPES = ['NamedNode', 'BlankNode', 'Literal', 'Variable', 'DefaultGraph'];\n/*\n * Utility methods for handling RDFJS terms.\n */\n\n/**\n * Create an array of unique terms from the given array.\n * @param {T[]} terms An array of RDFJS terms.\n * @return {T[]} A new array of unique RDFJS terms.\n */\n\nfunction uniqTerms(terms) {\n  return require('lodash.uniqwith')(terms, function (termA, termB) {\n    return termA.equals(termB);\n  });\n}\n\nexports.uniqTerms = uniqTerms;\n/**\n * Find all terms of the given type in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @param {\"NamedNode\" | \"BlankNode\" | \"Literal\" | \"Variable\" | \"DefaultGraph\"} termType A term type.\n * @return {Term[]} A new array with elements from the given array only containing elements of the given type.\n */\n\nfunction getTermsOfType(terms, termType) {\n  return terms.filter(function (term) {\n    return term.termType === termType;\n  });\n}\n\nexports.getTermsOfType = getTermsOfType;\n/**\n * Find all named nodes in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {NamedNode[]} A new array with elements from the given array only containing named nodes.\n */\n\nfunction getNamedNodes(terms) {\n  return getTermsOfType(terms, 'NamedNode');\n}\n\nexports.getNamedNodes = getNamedNodes;\n/**\n * Find all blank nodes in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {BlankNode[]} A new array with elements from the given array only containing blank nodes.\n */\n\nfunction getBlankNodes(terms) {\n  return getTermsOfType(terms, 'BlankNode');\n}\n\nexports.getBlankNodes = getBlankNodes;\n/**\n * Find all literals in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {Literal[]} A new array with elements from the given array only containing literals.\n */\n\nfunction getLiterals(terms) {\n  return getTermsOfType(terms, 'Literal');\n}\n\nexports.getLiterals = getLiterals;\n/**\n * Find all variables in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {Variable[]} A new array with elements from the given array only containing variables.\n */\n\nfunction getVariables(terms) {\n  return getTermsOfType(terms, 'Variable');\n}\n\nexports.getVariables = getVariables;\n/**\n * Find all default graphs in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {DefaultGraph[]} A new array with elements from the given array only containing default graphs.\n */\n\nfunction getDefaultGraphs(terms) {\n  return getTermsOfType(terms, 'DefaultGraph');\n}\n\nexports.getDefaultGraphs = getDefaultGraphs;","map":null,"metadata":{},"sourceType":"script"}