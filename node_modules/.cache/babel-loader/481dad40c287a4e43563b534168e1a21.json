{"ast":null,"code":"// **N3StreamParser** parses a text stream into a quad stream.\nvar Transform = require('stream').Transform,\n    util = require('util'),\n    N3Parser = require('./N3Parser.js'); // ## Constructor\n\n\nfunction N3StreamParser(options) {\n  if (!(this instanceof N3StreamParser)) return new N3StreamParser(options); // Initialize Transform base class\n\n  Transform.call(this, {\n    decodeStrings: true\n  });\n  this._readableState.objectMode = true; // Set up parser\n\n  var self = this,\n      parser = new N3Parser(options),\n      onData,\n      onEnd; // Pass dummy stream to obtain `data` and `end` callbacks\n\n  parser.parse({\n    on: function on(event, callback) {\n      switch (event) {\n        case 'data':\n          onData = callback;\n          break;\n\n        case 'end':\n          onEnd = callback;\n          break;\n      }\n    }\n  }, // Handle quads by pushing them down the pipeline\n  function (error, quad) {\n    error && self.emit('error', error) || quad && self.push(quad);\n  }, // Emit prefixes through the `prefix` event\n  function (prefix, uri) {\n    self.emit('prefix', prefix, uri);\n  }); // Implement Transform methods through parser callbacks\n\n  this._transform = function (chunk, encoding, done) {\n    onData(chunk);\n    done();\n  };\n\n  this._flush = function (done) {\n    onEnd();\n    done();\n  };\n}\n\nutil.inherits(N3StreamParser, Transform); // ### Parses a stream of strings\n\nN3StreamParser.prototype.import = function (stream) {\n  var self = this;\n  stream.on('data', function (chunk) {\n    self.write(chunk);\n  });\n  stream.on('end', function () {\n    self.end();\n  });\n  stream.on('error', function (error) {\n    self.emit('error', error);\n  });\n  return this;\n}; // ## Exports\n\n\nmodule.exports = N3StreamParser;","map":null,"metadata":{},"sourceType":"script"}