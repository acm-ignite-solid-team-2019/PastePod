{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@comunica/core\");\n/**\n * An abstract actor that handles media-typed actions.\n *\n * It splits up a action between a 'handle' and a 'mediaTypes' action.\n * A 'mediaTypes' action is used to retrieve the available media types from this actor.\n * A 'handle' action is abstract, and can be implemented to do anything,\n * such as parsing, serializing, etc.\n * @see IActionAbstractMediaTyped\n *\n * @see ActorAbstractMediaTypedFixed\n */\n\n\nvar ActorAbstractMediaTyped =\n/*#__PURE__*/\nfunction (_core_1$Actor) {\n  _inherits(ActorAbstractMediaTyped, _core_1$Actor);\n\n  function ActorAbstractMediaTyped(args) {\n    _classCallCheck(this, ActorAbstractMediaTyped);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorAbstractMediaTyped).call(this, args));\n  }\n\n  _createClass(ActorAbstractMediaTyped, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        var typedAction;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!('handle' in action)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                typedAction = action;\n                _context.next = 4;\n                return this.runHandle(typedAction.handle, typedAction.handleMediaType, action.context);\n\n              case 4:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", {\n                  handle: _context.t0\n                });\n\n              case 8:\n                if (!('mediaTypes' in action)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 11;\n                return this.getMediaTypes(action.context);\n\n              case 11:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", {\n                  mediaTypes: _context.t1\n                });\n\n              case 15:\n                throw new Error('Either a handle or mediaType action needs to be provided');\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var typedAction;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!('handle' in action)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                typedAction = action;\n                _context2.next = 4;\n                return this.testHandle(typedAction.handle, typedAction.handleMediaType, action.context);\n\n              case 4:\n                _context2.t0 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  handle: _context2.t0\n                });\n\n              case 8:\n                if (!('mediaTypes' in action)) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.testMediaType(action.context);\n\n              case 11:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  mediaTypes: _context2.t1\n                });\n\n              case 15:\n                throw new Error('Either a handle or mediaType action needs to be provided');\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function test(_x2) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }]);\n\n  return ActorAbstractMediaTyped;\n}(core_1.Actor);\n\nexports.ActorAbstractMediaTyped = ActorAbstractMediaTyped;","map":null,"metadata":{},"sourceType":"script"}