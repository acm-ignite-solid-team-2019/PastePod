{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DataFactory = require(\"@rdfjs/data-model\");\n/**\n * Utility methods for converting between string-based RDF representations and RDFJS objects.\n *\n * RDF Terms are represented as follows:\n * * Blank nodes: '_:myBlankNode'\n * * Variables:   '?myVariable'\n * * Literals:    '\"myString\"', '\"myLanguageString\"@en-us', '\"3\"^^xsd:number'\n * * URIs:        'http://example.org'\n *\n * Quads/triples are represented as hashes with 'subject', 'predicate', 'object' and 'graph' (optional)\n * as keys, and string-based RDF terms as values.\n */\n\n/**\n * Convert an RDFJS term to a string-based representation.\n * @param {RDF.Term} term An RDFJS term.\n * @return {string} A string-based term representation.\n */\n\n\nfunction termToString(term) {\n  if (!term) {\n    return null;\n  }\n\n  switch (term.termType) {\n    case 'NamedNode':\n      return term.value;\n\n    case 'BlankNode':\n      return '_:' + term.value;\n\n    case 'Literal':\n      var literalValue = term;\n      return '\"' + literalValue.value + '\"' + (literalValue.datatype && literalValue.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string' && literalValue.datatype.value !== 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString' ? '^^' + literalValue.datatype.value : '') + (literalValue.language ? '@' + literalValue.language : '');\n\n    case 'Variable':\n      return '?' + term.value;\n\n    case 'DefaultGraph':\n      return term.value;\n  }\n}\n\nexports.termToString = termToString;\n/**\n * Get the string value of a literal.\n * @param {string} literalValue An RDF literal enclosed by '\"'.\n * @return {string} The literal value inside the '\"'.\n */\n\nfunction getLiteralValue(literalValue) {\n  var match = /^\"([^]*)\"/.exec(literalValue);\n\n  if (!match) {\n    throw new Error(literalValue + ' is not a literal');\n  }\n\n  return match[1];\n}\n\nexports.getLiteralValue = getLiteralValue;\n/**\n * Get the datatype of the given literal.\n * @param {string} literalValue An RDF literal.\n * @return {string} The datatype of the literal.\n */\n\nfunction getLiteralType(literalValue) {\n  var match = /^\"[^]*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/.exec(literalValue);\n\n  if (!match) {\n    throw new Error(literalValue + ' is not a literal');\n  }\n\n  return match[1] || (match[2] ? 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString' : 'http://www.w3.org/2001/XMLSchema#string');\n}\n\nexports.getLiteralType = getLiteralType;\n/**\n * Get the language of the given literal.\n * @param {string} literalValue An RDF literal.\n * @return {string} The language of the literal.\n */\n\nfunction getLiteralLanguage(literalValue) {\n  var match = /^\"[^]*\"(?:@([^@\"]+)|\\^\\^[^\"]+)?$/.exec(literalValue);\n\n  if (!match) {\n    throw new Error(literalValue + ' is not a literal');\n  }\n\n  return match[1] ? match[1].toLowerCase() : '';\n}\n\nexports.getLiteralLanguage = getLiteralLanguage;\n/**\n * Transform a string-based RDF term to an RDFJS term.\n * @param {string} value A string-based RDF-term.\n * @param {RDF.DataFactory} dataFactory An optional datafactory to create terms with.\n * @return {RDF.Term} An RDF-JS term.\n */\n\nfunction stringToTerm(value, dataFactory) {\n  dataFactory = dataFactory || DataFactory;\n\n  if (!value || !value.length) {\n    return dataFactory.defaultGraph();\n  }\n\n  switch (value[0]) {\n    case '_':\n      return dataFactory.blankNode(value.substr(2));\n\n    case '?':\n      return dataFactory.variable(value.substr(1));\n\n    case '\"':\n      var language = getLiteralLanguage(value);\n      var type = dataFactory.namedNode(getLiteralType(value));\n      return dataFactory.literal(getLiteralValue(value), language || type);\n\n    default:\n      return dataFactory.namedNode(value);\n  }\n}\n\nexports.stringToTerm = stringToTerm;\n/**\n * Convert an RDFJS quad to a string-based quad representation.\n * @param {Quad} q An RDFJS quad.\n * @return {IStringQuad} A hash with string-based quad terms.\n * @template Q The type of quad, defaults to RDF.Quad.\n */\n\nfunction quadToStringQuad(q) {\n  // tslint:disable:object-literal-sort-keys\n  return {\n    subject: termToString(q.subject),\n    predicate: termToString(q.predicate),\n    object: termToString(q.object),\n    graph: termToString(q.graph)\n  }; // tslint:enable:object-literal-sort-keys\n}\n\nexports.quadToStringQuad = quadToStringQuad;\n/**\n * Convert a string-based quad representation to an RDFJS quad.\n * @param {IStringQuad} stringQuad A hash with string-based quad terms.\n * @param {RDF.DataFactory} dataFactory An optional datafactory to create terms with.\n * @return {Q} An RDFJS quad.\n * @template Q The type of quad, defaults to RDF.Quad.\n */\n\nfunction stringQuadToQuad(stringQuad, dataFactory) {\n  dataFactory = dataFactory || DataFactory;\n  return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));\n}\n\nexports.stringQuadToQuad = stringQuadToQuad;","map":null,"metadata":{},"sourceType":"script"}