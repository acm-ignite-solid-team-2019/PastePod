{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar asynciterator_1 = require(\"asynciterator\");\n\nvar ActorRdfResolveQuadPattern_1 = require(\"./ActorRdfResolveQuadPattern\");\n/**\n * A base implementation for rdf-resolve-quad-pattern events\n * that wraps around an RDFJS {@link RDF.Source}.\n *\n * @see RDF.Source\n */\n\n\nvar ActorRdfResolveQuadPatternSource =\n/*#__PURE__*/\nfunction (_ActorRdfResolveQuadP) {\n  _inherits(ActorRdfResolveQuadPatternSource, _ActorRdfResolveQuadP);\n\n  function ActorRdfResolveQuadPatternSource(args) {\n    _classCallCheck(this, ActorRdfResolveQuadPatternSource);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfResolveQuadPatternSource).call(this, args));\n  }\n\n  _createClass(ActorRdfResolveQuadPatternSource, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var source, output;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getSource(action.context);\n\n              case 2:\n                source = _context2.sent;\n                _context2.next = 5;\n                return this.getOutput(source, action.pattern, action.context);\n\n              case 5:\n                output = _context2.sent;\n\n                if (output.metadata) {\n                  output.metadata = ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern.cachifyMetadata(output.metadata);\n                }\n\n                return _context2.abrupt(\"return\", output);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Get the output of the given action on a source.\n     * @param {RDF.Source} source An RDFJS source, possibly lazy.\n     * @param {RDF.BaseQuad} pattern The resolve action.\n     * @param ActionContext context Optional context data.\n     * @return {Promise<IActorRdfResolveQuadPatternOutput>} A promise that resolves to a hash containing\n     *                                                      a data RDFJS stream and an optional metadata hash.\n     */\n\n  }, {\n    key: \"getOutput\",\n    value: function () {\n      var _getOutput = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(source, pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!source.matchLazy) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: source.matchLazy(ActorRdfResolveQuadPatternSource.variableToNull(pattern.subject), ActorRdfResolveQuadPatternSource.variableToNull(pattern.predicate), ActorRdfResolveQuadPatternSource.variableToNull(pattern.object), ActorRdfResolveQuadPatternSource.variableToNull(pattern.graph))\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", {\n                  data: // TODO: AsyncIterator fix typings\n                  asynciterator_1.AsyncIterator.wrap(source.match(ActorRdfResolveQuadPatternSource.variableToNull(pattern.subject), ActorRdfResolveQuadPatternSource.variableToNull(pattern.predicate), ActorRdfResolveQuadPatternSource.variableToNull(pattern.object), ActorRdfResolveQuadPatternSource.variableToNull(pattern.graph)))\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getOutput(_x3, _x4, _x5) {\n        return _getOutput.apply(this, arguments);\n      }\n\n      return getOutput;\n    }()\n  }], [{\n    key: \"variableToNull\",\n    value: function variableToNull(term) {\n      if (term && term.termType === 'Variable') {\n        return null;\n      }\n\n      return term;\n    }\n  }]);\n\n  return ActorRdfResolveQuadPatternSource;\n}(ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern);\n\nexports.ActorRdfResolveQuadPatternSource = ActorRdfResolveQuadPatternSource;","map":null,"metadata":{},"sourceType":"script"}