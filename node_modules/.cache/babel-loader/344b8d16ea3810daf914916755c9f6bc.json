{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // tslint:disable:variable-name\n\nvar RDFDM = require(\"@rdfjs/data-model\");\n\nvar immutable_1 = require(\"immutable\");\n\nexports.TRUE_STR = '\"true\"^^xsd:boolean';\nexports.FALSE_STR = '\"false\"^^xsd:boolean';\nexports.EVB_ERR_STR = '\"not an dateTime\"^^xsd:dateTime';\nvar TypeURL;\n\n(function (TypeURL) {\n  TypeURL[\"XSD_STRING\"] = \"http://www.w3.org/2001/XMLSchema#string\";\n  TypeURL[\"RDF_LANG_STRING\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\";\n  TypeURL[\"XSD_BOOLEAN\"] = \"http://www.w3.org/2001/XMLSchema#boolean\";\n  TypeURL[\"XSD_DATE_TIME\"] = \"http://www.w3.org/2001/XMLSchema#dateTime\"; // Numeric types\n\n  TypeURL[\"XSD_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#integer\";\n  TypeURL[\"XSD_DECIMAL\"] = \"http://www.w3.org/2001/XMLSchema#decimal\";\n  TypeURL[\"XSD_FLOAT\"] = \"http://www.w3.org/2001/XMLSchema#float\";\n  TypeURL[\"XSD_DOUBLE\"] = \"http://www.w3.org/2001/XMLSchema#double\"; // Derived numeric types\n\n  TypeURL[\"XSD_NON_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonPositiveInteger\";\n  TypeURL[\"XSD_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#negativeInteger\";\n  TypeURL[\"XSD_LONG\"] = \"http://www.w3.org/2001/XMLSchema#long\";\n  TypeURL[\"XSD_INT\"] = \"http://www.w3.org/2001/XMLSchema#int\";\n  TypeURL[\"XSD_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#short\";\n  TypeURL[\"XSD_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#byte\";\n  TypeURL[\"XSD_NON_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\";\n  TypeURL[\"XSD_UNSIGNED_LONG\"] = \"http://www.w3.org/2001/XMLSchema#unsignedLong\";\n  TypeURL[\"XSD_UNSIGNED_INT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedInt\";\n  TypeURL[\"XSD_UNSIGNED_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedShort\";\n  TypeURL[\"XSD_UNSIGNED_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#unsignedByte\";\n  TypeURL[\"XSD_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#positiveInteger\"; // Other types\n\n  TypeURL[\"XSD_DAYTIME_DURATION\"] = \"http://www.w3.org/2001/XMLSchema#dayTimeDuration\";\n})(TypeURL = exports.TypeURL || (exports.TypeURL = {}));\n\nfunction make(dt) {\n  return RDFDM.namedNode(dt);\n}\n\nexports.make = make; // https://www.w3.org/TR/sparql11-query/#operandDataTypes\n\nvar NumericType;\n\n(function (NumericType) {\n  NumericType[\"XSD_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#integer\";\n  NumericType[\"XSD_DECIMAL\"] = \"http://www.w3.org/2001/XMLSchema#decimal\";\n  NumericType[\"XSD_FLOAT\"] = \"http://www.w3.org/2001/XMLSchema#float\";\n  NumericType[\"XSD_DOUBLE\"] = \"http://www.w3.org/2001/XMLSchema#double\";\n  NumericType[\"XSD_NON_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonPositiveInteger\";\n  NumericType[\"XSD_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#negativeInteger\";\n  NumericType[\"XSD_LONG\"] = \"http://www.w3.org/2001/XMLSchema#long\";\n  NumericType[\"XSD_INT\"] = \"http://www.w3.org/2001/XMLSchema#int\";\n  NumericType[\"XSD_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#short\";\n  NumericType[\"XSD_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#byte\";\n  NumericType[\"XSD_NON_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\";\n  NumericType[\"XSD_UNSIGNED_LONG\"] = \"http://www.w3.org/2001/XMLSchema#unsignedLong\";\n  NumericType[\"XSD_UNSIGNED_INT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedInt\";\n  NumericType[\"XSD_UNSIGNED_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedShort\";\n  NumericType[\"XSD_UNSIGNED_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#unsignedByte\";\n  NumericType[\"XSD_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#positiveInteger\";\n})(NumericType = exports.NumericType || (exports.NumericType = {}));\n\nexports.commonTerms = {\n  true: RDFDM.literal('true', RDFDM.namedNode(TypeURL.XSD_BOOLEAN)),\n  false: RDFDM.literal('false', RDFDM.namedNode(TypeURL.XSD_BOOLEAN))\n};\nexports.NumericTypeCategories = immutable_1.Set(['integer', 'decimal', 'float', 'double']);\n\nfunction type(typeURL) {\n  switch (typeURL) {\n    case null:\n    case undefined:\n    case '':\n    case TypeURL.XSD_STRING:\n      return 'string';\n\n    case TypeURL.RDF_LANG_STRING:\n      return 'langString';\n\n    case TypeURL.XSD_DATE_TIME:\n      return 'date';\n\n    case TypeURL.XSD_BOOLEAN:\n      return 'boolean';\n\n    case TypeURL.XSD_DECIMAL:\n      return 'decimal';\n\n    case TypeURL.XSD_FLOAT:\n      return 'float';\n\n    case TypeURL.XSD_DOUBLE:\n      return 'double';\n\n    case TypeURL.XSD_INTEGER:\n    case TypeURL.XSD_NON_POSITIVE_INTEGER:\n    case TypeURL.XSD_NEGATIVE_INTEGER:\n    case TypeURL.XSD_LONG:\n    case TypeURL.XSD_INT:\n    case TypeURL.XSD_SHORT:\n    case TypeURL.XSD_BYTE:\n    case TypeURL.XSD_NON_NEGATIVE_INTEGER:\n    case TypeURL.XSD_UNSIGNED_LONG:\n    case TypeURL.XSD_UNSIGNED_INT:\n    case TypeURL.XSD_UNSIGNED_SHORT:\n    case TypeURL.XSD_UNSIGNED_BYTE:\n    case TypeURL.XSD_POSITIVE_INTEGER:\n      return 'integer';\n\n    default:\n      return 'other';\n  }\n}\n\nexports.type = type; // If datatypes get lost or lose specificity during operations, we can insert a\n// concrete type, since categories should remain the same. This mostly (only)\n// relevant for integer subtypes.\n\nvar _decategorize = immutable_1.Map([['integer', TypeURL.XSD_INTEGER], ['float', TypeURL.XSD_FLOAT], ['double', TypeURL.XSD_DOUBLE], ['decimal', TypeURL.XSD_DECIMAL]]);\n\nfunction decategorize(cat) {\n  return _decategorize.get(cat);\n}\n\nexports.decategorize = decategorize; // TODO: Remove unneeded double typing\n\nvar RegularOperator;\n\n(function (RegularOperator) {\n  // Operator mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  RegularOperator[\"NOT\"] = \"!\";\n  RegularOperator[\"UMINUS\"] = \"UMINUS\";\n  RegularOperator[\"UPLUS\"] = \"UPLUS\"; // LOGICAL_AND // See SpecialOperators\n  // LOGICAL_OR  // See SpecialOperators\n\n  RegularOperator[\"EQUAL\"] = \"=\";\n  RegularOperator[\"NOT_EQUAL\"] = \"!=\";\n  RegularOperator[\"LT\"] = \"<\";\n  RegularOperator[\"GT\"] = \">\";\n  RegularOperator[\"LTE\"] = \"<=\";\n  RegularOperator[\"GTE\"] = \">=\";\n  RegularOperator[\"MULTIPLICATION\"] = \"*\";\n  RegularOperator[\"DIVISION\"] = \"/\";\n  RegularOperator[\"ADDITION\"] = \"+\";\n  RegularOperator[\"SUBTRACTION\"] = \"-\"; // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // See SpecialOperators\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n\n  RegularOperator[\"IS_IRI\"] = \"isiri\";\n  RegularOperator[\"IS_BLANK\"] = \"isblank\";\n  RegularOperator[\"IS_LITERAL\"] = \"isliteral\";\n  RegularOperator[\"IS_NUMERIC\"] = \"isnumeric\";\n  RegularOperator[\"STR\"] = \"str\";\n  RegularOperator[\"LANG\"] = \"lang\";\n  RegularOperator[\"DATATYPE\"] = \"datatype\";\n  RegularOperator[\"IRI\"] = \"iri\";\n  RegularOperator[\"URI\"] = \"uri\";\n  RegularOperator[\"BNODE\"] = \"BNODE\";\n  RegularOperator[\"STRDT\"] = \"strdt\";\n  RegularOperator[\"STRLANG\"] = \"strlang\";\n  RegularOperator[\"UUID\"] = \"uuid\";\n  RegularOperator[\"STRUUID\"] = \"struuid\"; // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-strings\n\n  RegularOperator[\"STRLEN\"] = \"strlen\";\n  RegularOperator[\"SUBSTR\"] = \"substr\";\n  RegularOperator[\"UCASE\"] = \"ucase\";\n  RegularOperator[\"LCASE\"] = \"lcase\";\n  RegularOperator[\"STRSTARTS\"] = \"strstarts\";\n  RegularOperator[\"STRENDS\"] = \"strends\";\n  RegularOperator[\"CONTAINS\"] = \"contains\";\n  RegularOperator[\"STRBEFORE\"] = \"strbefore\";\n  RegularOperator[\"STRAFTER\"] = \"strafter\";\n  RegularOperator[\"ENCODE_FOR_URI\"] = \"encode_for_uri\";\n  RegularOperator[\"CONCAT\"] = \"concat\";\n  RegularOperator[\"LANG_MATCHES\"] = \"langmatches\";\n  RegularOperator[\"REGEX\"] = \"regex\";\n  RegularOperator[\"REPLACE\"] = \"replace\"; // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n\n  RegularOperator[\"ABS\"] = \"abs\";\n  RegularOperator[\"ROUND\"] = \"round\";\n  RegularOperator[\"CEIL\"] = \"ceil\";\n  RegularOperator[\"FLOOR\"] = \"floor\";\n  RegularOperator[\"RAND\"] = \"rand\"; // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n\n  RegularOperator[\"NOW\"] = \"now\";\n  RegularOperator[\"YEAR\"] = \"year\";\n  RegularOperator[\"MONTH\"] = \"month\";\n  RegularOperator[\"DAY\"] = \"day\";\n  RegularOperator[\"HOURS\"] = \"hours\";\n  RegularOperator[\"MINUTES\"] = \"minutes\";\n  RegularOperator[\"SECONDS\"] = \"seconds\";\n  RegularOperator[\"TIMEZONE\"] = \"timezone\";\n  RegularOperator[\"TZ\"] = \"tz\"; // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n\n  RegularOperator[\"MD5\"] = \"md5\";\n  RegularOperator[\"SHA1\"] = \"sha1\";\n  RegularOperator[\"SHA256\"] = \"sha256\";\n  RegularOperator[\"SHA384\"] = \"sha384\";\n  RegularOperator[\"SHA512\"] = \"sha512\"; // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // See Named Operators\n})(RegularOperator = exports.RegularOperator || (exports.RegularOperator = {}));\n\nvar SpecialOperator;\n\n(function (SpecialOperator) {\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  SpecialOperator[\"BOUND\"] = \"bound\";\n  SpecialOperator[\"IF\"] = \"if\";\n  SpecialOperator[\"COALESCE\"] = \"coalesce\"; // EXISTENCE = 'existence',\n\n  SpecialOperator[\"LOGICAL_OR\"] = \"||\";\n  SpecialOperator[\"LOGICAL_AND\"] = \"&&\"; // EQUAL = '=', // See RegularOperators\n\n  SpecialOperator[\"SAME_TERM\"] = \"sameterm\";\n  SpecialOperator[\"IN\"] = \"in\";\n  SpecialOperator[\"NOT_IN\"] = \"notin\";\n})(SpecialOperator = exports.SpecialOperator || (exports.SpecialOperator = {}));\n\nexports.RegularOperators = immutable_1.Set(Object.values(RegularOperator));\nexports.SpecialOperators = immutable_1.Set(Object.values(SpecialOperator));\nexports.Operators = exports.RegularOperators.union(exports.SpecialOperators);\nexports.NamedOperators = immutable_1.Set([TypeURL.XSD_STRING, TypeURL.XSD_FLOAT, TypeURL.XSD_DOUBLE, TypeURL.XSD_DECIMAL, TypeURL.XSD_INTEGER, TypeURL.XSD_DATE_TIME, TypeURL.XSD_BOOLEAN]);","map":null,"metadata":{},"sourceType":"script"}