{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar actor_abstract_path_1 = require(\"@comunica/actor-abstract-path\");\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar asynciterator_1 = require(\"asynciterator\");\n\nvar asynciterator_promiseproxy_1 = require(\"asynciterator-promiseproxy\");\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path OneOrMore Query Operation Actor.\n */\n\n\nvar ActorQueryOperationPathOneOrMore =\n/*#__PURE__*/\nfunction (_actor_abstract_path_) {\n  _inherits(ActorQueryOperationPathOneOrMore, _actor_abstract_path_);\n\n  function ActorQueryOperationPathOneOrMore(args) {\n    _classCallCheck(this, ActorQueryOperationPathOneOrMore);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationPathOneOrMore).call(this, args, sparqlalgebrajs_1.Algebra.types.ONE_OR_MORE_PATH));\n  }\n\n  _createClass(ActorQueryOperationPathOneOrMore, [{\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(path, context) {\n        var _this = this;\n\n        var predicate, sVar, oVar, single, results, o, V, bindingsStream, b, bString, _results, _bindingsStream;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                predicate = path.predicate;\n                sVar = path.subject.termType === 'Variable';\n                oVar = path.object.termType === 'Variable';\n\n                if (!(!sVar && oVar)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                // get all the results of applying this once, then do zeroOrMore for those\n                single = actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.path, path.object, path.graph);\n                _context2.t0 = bus_query_operation_1.ActorQueryOperation;\n                _context2.next = 8;\n                return this.mediatorQueryOperation.mediate({\n                  context: context,\n                  operation: single\n                });\n\n              case 8:\n                _context2.t1 = _context2.sent;\n                results = _context2.t0.getSafeBindings.call(_context2.t0, _context2.t1);\n                o = rdf_string_1.termToString(path.object); // all branches need to share the same V to prevent duplicates\n\n                V = {};\n                bindingsStream = new asynciterator_1.MultiTransformIterator(results.bindingsStream);\n\n                bindingsStream._createTransformer = function (bindings) {\n                  var val = bindings.get(o);\n                  return new asynciterator_promiseproxy_1.PromiseProxyIterator(\n                  /*#__PURE__*/\n                  _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    var it;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            it = new asynciterator_1.BufferedIterator();\n                            _context.next = 3;\n                            return _this.ALP(val, predicate.path, context, V, it, {\n                              count: 0\n                            });\n\n                          case 3:\n                            return _context.abrupt(\"return\", it.transform({\n                              transform: function transform(item, next) {\n                                bindingsStream._push(bus_query_operation_1.Bindings(_defineProperty({}, o, item)));\n\n                                next(null);\n                              }\n                            }));\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  })), {\n                    autoStart: true,\n                    maxBufferSize: 128\n                  });\n                };\n\n                return _context2.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: bindingsStream,\n                  variables: [o]\n                });\n\n              case 17:\n                if (!(sVar && oVar)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                throw new Error('ZeroOrMore path expressions with 2 variables not supported yet');\n\n              case 21:\n                if (!(sVar && !oVar)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.mediatorQueryOperation.mediate({\n                  context: context,\n                  operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.object, actor_abstract_path_1.ActorAbstractPath.FACTORY.createOneOrMorePath(actor_abstract_path_1.ActorAbstractPath.FACTORY.createInv(predicate.path)), path.subject, path.graph)\n                }));\n\n              case 25:\n                // if (!sVar && !oVar)\n                b = this.generateBlankNode();\n                bString = rdf_string_1.termToString(b);\n                _context2.t2 = bus_query_operation_1.ActorQueryOperation;\n                _context2.next = 30;\n                return this.mediatorQueryOperation.mediate({\n                  context: context,\n                  operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate, b, path.graph)\n                });\n\n              case 30:\n                _context2.t3 = _context2.sent;\n                _results = _context2.t2.getSafeBindings.call(_context2.t2, _context2.t3);\n                _bindingsStream = _results.bindingsStream.transform({\n                  filter: function filter(item) {\n                    return item.get(bString).equals(path.object);\n                  },\n                  transform: function transform(item, next) {\n                    _bindingsStream._push(bus_query_operation_1.Bindings({}));\n\n                    next(null);\n                  }\n                });\n                return _context2.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: _bindingsStream,\n                  variables: []\n                });\n\n              case 34:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runOperation(_x, _x2) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }]);\n\n  return ActorQueryOperationPathOneOrMore;\n}(actor_abstract_path_1.ActorAbstractPath);\n\nexports.ActorQueryOperationPathOneOrMore = ActorQueryOperationPathOneOrMore;","map":null,"metadata":{},"sourceType":"script"}