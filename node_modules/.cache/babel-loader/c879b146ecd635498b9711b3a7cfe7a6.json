{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jsonldContextParser = require(\"jsonld-context-parser\");\n\nvar _dataModel = require(\"@rdfjs/data-model\");\n\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Resolves property names of a path\n * to their corresponding IRIs through a JSON-LD context.\n */\n\n\nvar JSONLDResolver =\n/*#__PURE__*/\nfunction () {\n  function JSONLDResolver(context) {\n    _classCallCheck(this, JSONLDResolver);\n\n    this._context = new _jsonldContextParser.ContextParser().parse(context);\n  }\n  /**\n   * The JSON-LD resolver supports all string properties.\n   */\n\n\n  _createClass(JSONLDResolver, [{\n    key: \"supports\",\n    value: function supports(property) {\n      return typeof property === 'string';\n    }\n    /**\n     * Resolves the property by extending the query path with it.\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(property, pathData) {\n      var _this = this;\n\n      var predicate = {\n        then: (0, _promiseUtils.getThen)(function () {\n          return _this.expandProperty(property);\n        })\n      };\n      return pathData.extendPath({\n        property: property,\n        predicate: predicate\n      });\n    }\n    /**\n     * Expands a JSON property key into a full IRI.\n     */\n\n  }, {\n    key: \"expandProperty\",\n    value: function () {\n      var _expandProperty = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(property) {\n        var expandedProperty;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // JavaScript requires keys containing colons to be quoted,\n                // so prefixed names would need to written as path['foaf:knows'].\n                // We thus allow writing path.foaf_knows or path.foaf$knows instead.\n                property = property.replace(/[_$]/, ':'); // Expand the property to a full IRI\n\n                _context.t0 = _jsonldContextParser.ContextParser;\n                _context.t1 = property;\n                _context.next = 5;\n                return this._context;\n\n              case 5:\n                _context.t2 = _context.sent;\n                expandedProperty = _context.t0.expandTerm.call(_context.t0, _context.t1, _context.t2, true);\n\n                if (_jsonldContextParser.ContextParser.isValidIri(expandedProperty)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new Error(\"The JSON-LD context cannot expand the '\".concat(property, \"' property\"));\n\n              case 9:\n                return _context.abrupt(\"return\", (0, _dataModel.namedNode)(expandedProperty));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function expandProperty(_x) {\n        return _expandProperty.apply(this, arguments);\n      }\n\n      return expandProperty;\n    }()\n  }]);\n\n  return JSONLDResolver;\n}();\n\nexports.default = JSONLDResolver;","map":null,"metadata":{},"sourceType":"script"}