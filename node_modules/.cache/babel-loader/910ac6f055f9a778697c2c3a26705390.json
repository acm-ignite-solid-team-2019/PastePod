{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/construct\");\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Resolves to the given item in the path data.\n * For example, new DataHandler({}, 'foo', 'bar')\n * will return pathData.foo.bar.\n *\n * Resolution can optionally be async,\n * and/or be behind a function call.\n */\n\nvar DataHandler =\n/*#__PURE__*/\nfunction () {\n  function DataHandler(options) {\n    _classCallCheck(this, DataHandler);\n\n    this._isAsync = options.async;\n    this._isFunction = options.function;\n\n    for (var _len = arguments.length, dataProperties = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      dataProperties[_key - 1] = arguments[_key];\n    }\n\n    this._dataProperties = dataProperties;\n  }\n\n  _createClass(DataHandler, [{\n    key: \"handle\",\n\n    /**\n     * Resolve the data path.\n     */\n    value: function handle(pathData) {\n      var _this = this;\n\n      return !this._isFunction ? this._resolveDataPath(pathData) : function () {\n        return _this._resolveDataPath(pathData);\n      };\n    }\n  }, {\n    key: \"_resolveDataPath\",\n    value: function _resolveDataPath(data) {\n      var _this2 = this;\n\n      // Resolve synchronous property access\n      if (!this._isAsync) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this._dataProperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var property = _step.value;\n            data = data && data[property];\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return data;\n      } // Resolve asynchronous property access\n\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(resolve) {\n          var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _property;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _iteratorNormalCompletion2 = true;\n                  _didIteratorError2 = false;\n                  _iteratorError2 = undefined;\n                  _context.prev = 3;\n                  _iterator2 = _this2._dataProperties[Symbol.iterator]();\n\n                case 5:\n                  if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  _property = _step2.value;\n                  _context.t0 = data;\n\n                  if (!_context.t0) {\n                    _context.next = 12;\n                    break;\n                  }\n\n                  _context.next = 11;\n                  return data[_property];\n\n                case 11:\n                  _context.t0 = _context.sent;\n\n                case 12:\n                  data = _context.t0;\n\n                case 13:\n                  _iteratorNormalCompletion2 = true;\n                  _context.next = 5;\n                  break;\n\n                case 16:\n                  _context.next = 22;\n                  break;\n\n                case 18:\n                  _context.prev = 18;\n                  _context.t1 = _context[\"catch\"](3);\n                  _didIteratorError2 = true;\n                  _iteratorError2 = _context.t1;\n\n                case 22:\n                  _context.prev = 22;\n                  _context.prev = 23;\n\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n\n                case 25:\n                  _context.prev = 25;\n\n                  if (!_didIteratorError2) {\n                    _context.next = 28;\n                    break;\n                  }\n\n                  throw _iteratorError2;\n\n                case 28:\n                  return _context.finish(25);\n\n                case 29:\n                  return _context.finish(22);\n\n                case 30:\n                  resolve(data);\n\n                case 31:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[3, 18, 22, 30], [23,, 25, 29]]);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }], [{\n    key: \"sync\",\n    value: function sync() {\n      for (var _len2 = arguments.length, dataProperties = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        dataProperties[_key2] = arguments[_key2];\n      }\n\n      return _construct(DataHandler, [{\n        async: false\n      }].concat(dataProperties));\n    }\n  }, {\n    key: \"syncFunction\",\n    value: function syncFunction() {\n      for (var _len3 = arguments.length, dataProperties = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        dataProperties[_key3] = arguments[_key3];\n      }\n\n      return _construct(DataHandler, [{\n        async: false,\n        function: true\n      }].concat(dataProperties));\n    }\n  }, {\n    key: \"async\",\n    value: function async() {\n      for (var _len4 = arguments.length, dataProperties = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        dataProperties[_key4] = arguments[_key4];\n      }\n\n      return _construct(DataHandler, [{\n        async: true\n      }].concat(dataProperties));\n    }\n  }, {\n    key: \"asyncFunction\",\n    value: function asyncFunction() {\n      for (var _len5 = arguments.length, dataProperties = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        dataProperties[_key5] = arguments[_key5];\n      }\n\n      return _construct(DataHandler, [{\n        async: true,\n        function: true\n      }].concat(dataProperties));\n    }\n  }]);\n\n  return DataHandler;\n}();\n\nexports.default = DataHandler;","map":null,"metadata":{},"sourceType":"script"}