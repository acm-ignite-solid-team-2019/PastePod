{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHandler = toHandler;\nexports.toResolver = toResolver;\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _PathProxy = _interopRequireDefault(require(\"./PathProxy\"));\n\nvar _JSONLDResolver = _interopRequireDefault(require(\"./JSONLDResolver\"));\n\nvar _defaultHandlers = _interopRequireDefault(require(\"./defaultHandlers\"));\n/**\n * A PathFactory creates paths with default settings.\n */\n\n\nvar PathFactory =\n/*#__PURE__*/\nfunction () {\n  function PathFactory(settings, data) {\n    _classCallCheck(this, PathFactory);\n\n    // Store settings and data\n    this._settings = settings = (0, _objectSpread2.default)({}, settings);\n    this._data = data = (0, _objectSpread2.default)({}, data); // Prepare the handlers\n\n    var handlers = settings.handlers || _defaultHandlers.default;\n\n    for (var key in handlers) {\n      handlers[key] = toHandler(handlers[key]);\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Object.getOwnPropertySymbols(handlers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _key = _step.value;\n        handlers[_key] = toHandler(handlers[_key]);\n      } // Prepare the resolvers\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var resolvers = (settings.resolvers || []).map(toResolver);\n    if (settings.context) resolvers.push(new _JSONLDResolver.default(settings.context)); // Instantiate PathProxy that will create the paths\n\n    this._pathProxy = new _PathProxy.default({\n      handlers: handlers,\n      resolvers: resolvers\n    }); // Remove PathProxy settings from the settings object\n\n    delete settings.handlers;\n    delete settings.resolvers;\n    delete settings.context;\n  }\n  /**\n   * Creates a path with the given (optional) settings and data.\n   */\n\n\n  _createClass(PathFactory, [{\n    key: \"create\",\n    value: function create() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n\n      // The settings parameter is optional\n      if (!data) {\n        var _ref = [settings, null];\n        data = _ref[0];\n        settings = _ref[1];\n      } // Apply defaults on settings and data\n\n\n      return this._pathProxy.createPath(Object.assign(Object.create(null), this._settings, settings), Object.assign(Object.create(null), this._data, data));\n    }\n  }]);\n\n  return PathFactory;\n}();\n\nexports.default = PathFactory;\nPathFactory.defaultHandlers = _defaultHandlers.default;\n/**\n * Converts a handler function into a handler object.\n */\n\nfunction toHandler(handle) {\n  return typeof handle.handle === 'function' ? handle : {\n    handle: handle\n  };\n}\n/**\n * Converts a resolver function into a catch-all resolver object.\n */\n\n\nfunction toResolver(resolve) {\n  return typeof resolve.resolve === 'function' ? resolve : {\n    supports: supports,\n    resolve: resolve\n  };\n} // Catch-all resolvers support everything\n\n\nfunction supports() {\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}