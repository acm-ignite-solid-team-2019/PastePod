{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nvar stream_1 = require(\"stream\");\n/**\n * Serializes SPARQL results for testing and debugging.\n */\n\n\nvar ActorSparqlSerializeStats =\n/*#__PURE__*/\nfunction (_bus_sparql_serialize) {\n  _inherits(ActorSparqlSerializeStats, _bus_sparql_serialize);\n\n  function ActorSparqlSerializeStats(args) {\n    _classCallCheck(this, ActorSparqlSerializeStats);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorSparqlSerializeStats).call(this, args));\n  }\n\n  _createClass(ActorSparqlSerializeStats, [{\n    key: \"testHandleChecked\",\n    value: function () {\n      var _testHandleChecked = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(['bindings', 'quads'].indexOf(action.type) < 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This actor can only handle bindings streams or quad streams.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testHandleChecked(_x, _x2) {\n        return _testHandleChecked.apply(this, arguments);\n      }\n\n      return testHandleChecked;\n    }()\n  }, {\n    key: \"pushHeader\",\n    value: function pushHeader(data) {\n      var header = ['Result', 'Delay (ms)'].join(',');\n      data.push(header + '\\n');\n    }\n  }, {\n    key: \"pushStat\",\n    value: function pushStat(data, startTime, result) {\n      var row = [result, this.delay(startTime)].join(',');\n      data.push(row + '\\n');\n    }\n  }, {\n    key: \"pushFooter\",\n    value: function pushFooter(data, startTime) {\n      var footer = ['TOTAL', this.delay(startTime)].join(',');\n      data.push(footer + '\\n');\n      data.push(null);\n    }\n  }, {\n    key: \"runHandle\",\n    value: function () {\n      var _runHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action, mediaType, context) {\n        var _this = this;\n\n        var data, resultStream, startTime, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = new stream_1.Readable();\n\n                data._read = function () {\n                  return;\n                };\n\n                resultStream = action.type === 'bindings' ? action.bindingsStream : action.quadStream; // TODO: Make initiation timer configurable\n\n                startTime = process.hrtime();\n                result = 1;\n                this.pushHeader(data);\n                resultStream.on('error', function (e) {\n                  return data.emit('error', e);\n                });\n                resultStream.on('data', function () {\n                  return _this.pushStat(data, startTime, result++);\n                });\n                resultStream.on('end', function () {\n                  return _this.pushFooter(data, startTime);\n                });\n                return _context2.abrupt(\"return\", {\n                  data: data\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runHandle(_x3, _x4, _x5) {\n        return _runHandle.apply(this, arguments);\n      }\n\n      return runHandle;\n    }()\n  }, {\n    key: \"delay\",\n    value: function delay(startTime) {\n      var time = process.hrtime(startTime);\n      return time[0] * 1000 + time[1] / 1000000;\n    }\n  }]);\n\n  return ActorSparqlSerializeStats;\n}(bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes);\n\nexports.ActorSparqlSerializeStats = ActorSparqlSerializeStats;","map":null,"metadata":{},"sourceType":"script"}