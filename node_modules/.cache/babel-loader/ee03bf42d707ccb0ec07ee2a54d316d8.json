{"ast":null,"code":"var escapeForXML = require('./escapeForXML');\n\nvar Stream = require('stream').Stream;\n\nvar DEFAULT_INDENT = '    ';\n\nfunction xml(input, options) {\n  if (typeof options !== 'object') {\n    options = {\n      indent: options\n    };\n  }\n\n  var stream = options.stream ? new Stream() : null,\n      output = \"\",\n      interrupted = false,\n      indent = !options.indent ? '' : options.indent === true ? DEFAULT_INDENT : options.indent,\n      instant = true;\n\n  function delay(func) {\n    if (!instant) {\n      func();\n    } else {\n      process.nextTick(func);\n    }\n  }\n\n  function append(interrupt, out) {\n    if (out !== undefined) {\n      output += out;\n    }\n\n    if (interrupt && !interrupted) {\n      stream = stream || new Stream();\n      interrupted = true;\n    }\n\n    if (interrupt && interrupted) {\n      var data = output;\n      delay(function () {\n        stream.emit('data', data);\n      });\n      output = \"\";\n    }\n  }\n\n  function add(value, last) {\n    format(append, resolve(value, indent, indent ? 1 : 0), last);\n  }\n\n  function end() {\n    if (stream) {\n      var data = output;\n      delay(function () {\n        stream.emit('data', data);\n        stream.emit('end');\n        stream.readable = false;\n        stream.emit('close');\n      });\n    }\n  }\n\n  function addXmlDeclaration(declaration) {\n    var encoding = declaration.encoding || 'UTF-8',\n        attr = {\n      version: '1.0',\n      encoding: encoding\n    };\n\n    if (declaration.standalone) {\n      attr.standalone = declaration.standalone;\n    }\n\n    add({\n      '?xml': {\n        _attr: attr\n      }\n    });\n    output = output.replace('/>', '?>');\n  } // disable delay delayed\n\n\n  delay(function () {\n    instant = false;\n  });\n\n  if (options.declaration) {\n    addXmlDeclaration(options.declaration);\n  }\n\n  if (input && input.forEach) {\n    input.forEach(function (value, i) {\n      var last;\n      if (i + 1 === input.length) last = end;\n      add(value, last);\n    });\n  } else {\n    add(input, end);\n  }\n\n  if (stream) {\n    stream.readable = true;\n    return stream;\n  }\n\n  return output;\n}\n\nfunction element()\n/*input, â€¦*/\n{\n  var input = Array.prototype.slice.call(arguments),\n      self = {\n    _elem: resolve(input)\n  };\n\n  self.push = function (input) {\n    if (!this.append) {\n      throw new Error(\"not assigned to a parent!\");\n    }\n\n    var that = this;\n    var indent = this._elem.indent;\n    format(this.append, resolve(input, indent, this._elem.icount + (indent ? 1 : 0)), function () {\n      that.append(true);\n    });\n  };\n\n  self.close = function (input) {\n    if (input !== undefined) {\n      this.push(input);\n    }\n\n    if (this.end) {\n      this.end();\n    }\n  };\n\n  return self;\n}\n\nfunction create_indent(character, count) {\n  return new Array(count || 0).join(character || '');\n}\n\nfunction resolve(data, indent, indent_count) {\n  indent_count = indent_count || 0;\n  var indent_spaces = create_indent(indent, indent_count);\n  var name;\n  var values = data;\n  var interrupt = false;\n\n  if (typeof data === 'object') {\n    var keys = Object.keys(data);\n    name = keys[0];\n    values = data[name];\n\n    if (values && values._elem) {\n      values._elem.name = name;\n      values._elem.icount = indent_count;\n      values._elem.indent = indent;\n      values._elem.indents = indent_spaces;\n      values._elem.interrupt = values;\n      return values._elem;\n    }\n  }\n\n  var attributes = [],\n      content = [];\n  var isStringContent;\n\n  function get_attributes(obj) {\n    var keys = Object.keys(obj);\n    keys.forEach(function (key) {\n      attributes.push(attribute(key, obj[key]));\n    });\n  }\n\n  switch (typeof values) {\n    case 'object':\n      if (values === null) break;\n\n      if (values._attr) {\n        get_attributes(values._attr);\n      }\n\n      if (values._cdata) {\n        content.push(('<![CDATA[' + values._cdata).replace(/\\]\\]>/g, ']]]]><![CDATA[>') + ']]>');\n      }\n\n      if (values.forEach) {\n        isStringContent = false;\n        content.push('');\n        values.forEach(function (value) {\n          if (typeof value == 'object') {\n            var _name = Object.keys(value)[0];\n\n            if (_name == '_attr') {\n              get_attributes(value._attr);\n            } else {\n              content.push(resolve(value, indent, indent_count + 1));\n            }\n          } else {\n            //string\n            content.pop();\n            isStringContent = true;\n            content.push(escapeForXML(value));\n          }\n        });\n\n        if (!isStringContent) {\n          content.push('');\n        }\n      }\n\n      break;\n\n    default:\n      //string\n      content.push(escapeForXML(values));\n  }\n\n  return {\n    name: name,\n    interrupt: interrupt,\n    attributes: attributes,\n    content: content,\n    icount: indent_count,\n    indents: indent_spaces,\n    indent: indent\n  };\n}\n\nfunction format(append, elem, end) {\n  if (typeof elem != 'object') {\n    return append(false, elem);\n  }\n\n  var len = elem.interrupt ? 1 : elem.content.length;\n\n  function proceed() {\n    while (elem.content.length) {\n      var value = elem.content.shift();\n      if (value === undefined) continue;\n      if (interrupt(value)) return;\n      format(append, value);\n    }\n\n    append(false, (len > 1 ? elem.indents : '') + (elem.name ? '</' + elem.name + '>' : '') + (elem.indent && !end ? '\\n' : ''));\n\n    if (end) {\n      end();\n    }\n  }\n\n  function interrupt(value) {\n    if (value.interrupt) {\n      value.interrupt.append = append;\n      value.interrupt.end = proceed;\n      value.interrupt = false;\n      append(true);\n      return true;\n    }\n\n    return false;\n  }\n\n  append(false, elem.indents + (elem.name ? '<' + elem.name : '') + (elem.attributes.length ? ' ' + elem.attributes.join(' ') : '') + (len ? elem.name ? '>' : '' : elem.name ? '/>' : '') + (elem.indent && len > 1 ? '\\n' : ''));\n\n  if (!len) {\n    return append(false, elem.indent ? '\\n' : '');\n  }\n\n  if (!interrupt(elem)) {\n    proceed();\n  }\n}\n\nfunction attribute(key, value) {\n  return key + '=' + '\"' + escapeForXML(value) + '\"';\n}\n\nmodule.exports = xml;\nmodule.exports.element = module.exports.Element = element;","map":null,"metadata":{},"sourceType":"script"}