{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@comunica/core\");\n/**\n * A comunica actor for query-operation events.\n *\n * Actor types:\n * * Input:  IActionQueryOperation:      A SPARQL Algebra operation.\n * * Test:   <none>\n * * Output: IActorQueryOperationOutput: A bindings stream.\n *\n * @see IActionQueryOperation\n * @see IActorQueryOperationOutput\n */\n\n\nvar ActorQueryOperation =\n/*#__PURE__*/\nfunction (_core_1$Actor) {\n  _inherits(ActorQueryOperation, _core_1$Actor);\n\n  function ActorQueryOperation(args) {\n    _classCallCheck(this, ActorQueryOperation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperation).call(this, args));\n  }\n  /**\n   * Safely cast a query operation output to a bindings output.\n   * This will throw a runtime error if the output is of the incorrect type.\n   * @param {IActorQueryOperationOutput} output A query operation output.\n   * @return {IActorQueryOperationOutputBindings} A bindings query operation output.\n   */\n\n\n  _createClass(ActorQueryOperation, null, [{\n    key: \"getSafeBindings\",\n    value: function getSafeBindings(output) {\n      ActorQueryOperation.validateQueryOutput(output, 'bindings');\n      return output;\n    }\n    /**\n     * Safely cast a query operation output to a quads output.\n     * This will throw a runtime error if the output is of the incorrect type.\n     * @param {IActorQueryOperationOutput} output A query operation output.\n     * @return {IActorQueryOperationOutputQuads} A quads query operation output.\n     */\n\n  }, {\n    key: \"getSafeQuads\",\n    value: function getSafeQuads(output) {\n      ActorQueryOperation.validateQueryOutput(output, 'quads');\n      return output;\n    }\n    /**\n     * Safely cast a query operation output to a boolean output.\n     * This will throw a runtime error if the output is of the incorrect type.\n     * @param {IActorQueryOperationOutput} output A query operation output.\n     * @return {IActorQueryOperationOutputBoolean} A boolean query operation output.\n     */\n\n  }, {\n    key: \"getSafeBoolean\",\n    value: function getSafeBoolean(output) {\n      ActorQueryOperation.validateQueryOutput(output, 'boolean');\n      return output;\n    }\n    /**\n     * Convert a metadata callback to a lazy callback where the response value is cached.\n     * @param {() => Promise<{[p: string]: any}>} metadata A metadata callback\n     * @return {() => Promise<{[p: string]: any}>} The callback where the response will be cached.\n     */\n\n  }, {\n    key: \"cachifyMetadata\",\n    value: function cachifyMetadata(metadata) {\n      var lastReturn = null;\n      return function () {\n        return lastReturn || (lastReturn = metadata());\n      };\n    }\n    /**\n     * Throw an error if the output type does not match the expected type.\n     * @param {IActorQueryOperationOutput} output A query operation output.\n     * @param {string} expectedType The expected output type.\n     */\n\n  }, {\n    key: \"validateQueryOutput\",\n    value: function validateQueryOutput(output, expectedType) {\n      if (output.type !== expectedType) {\n        throw new Error('Invalid query output type: Expected \\'' + expectedType + '\\' but got \\'' + output.type + '\\'');\n      }\n    }\n  }]);\n\n  return ActorQueryOperation;\n}(core_1.Actor);\n\nexports.ActorQueryOperation = ActorQueryOperation;\n/**\n * @type {string} Context entry for an array of parent metadata.\n *                I.e., an array of the metadata that was present before materializing the current BGP operations.\n *                This can be passed in 'bgp' actions.\n *                The array entries should correspond to the pattern entries in the BGP.\n * @value {any} A metadata hash.\n */\n\nexports.KEY_CONTEXT_BGP_PARENTMETADATA = '@comunica/bus-query-operation:bgpParentMetadata';\n/**\n * @type {string} Context entry for parent metadata.\n *                I.e., the metadata that was present before materializing the current operation.\n *                This can be passed in 'pattern' actions.\n * @value {any} A metadata hash.\n */\n\nexports.KEY_CONTEXT_PATTERN_PARENTMETADATA = '@comunica/bus-query-operation:patternParentMetadata';","map":null,"metadata":{},"sourceType":"script"}