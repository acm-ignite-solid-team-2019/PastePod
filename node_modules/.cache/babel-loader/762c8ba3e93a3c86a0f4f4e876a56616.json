{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asyncIterator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncIterator\"));\n\nvar _dataModel = require(\"@rdfjs/data-model\");\n\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Returns a function that, when called with arguments,\n * extends the path with mutationExpressions.\n *\n * It uses the current path expression as domain expression\n * and the given arguments as range expression.\n * These arguments can either be raw, or other path expressions.\n *\n * Requires:\n * - a pathExpression property on the path proxy and all non-raw arguments.\n */\n\n\nvar MutationFunctionHandler =\n/*#__PURE__*/\nfunction () {\n  function MutationFunctionHandler(mutationType, allowZeroArgs) {\n    _classCallCheck(this, MutationFunctionHandler);\n\n    this._mutationType = mutationType;\n    this._allowZeroArgs = allowZeroArgs;\n  }\n\n  _createClass(MutationFunctionHandler, [{\n    key: \"handle\",\n    value: function handle(pathData, path) {\n      var _this = this;\n\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        // Check if the given arguments are valid\n        if (!_this._allowZeroArgs && !args.length) throw new Error(\"Mutation on \".concat(pathData, \" can not be invoked without arguments\")); // Create a lazy Promise to the mutation expressions\n\n        var then = (0, _promiseUtils.getThen)(function () {\n          return _this.createMutationExpressions(pathData, path, args);\n        });\n        return pathData.extendPath({\n          mutationExpressions: {\n            then: then\n          }\n        });\n      };\n    }\n  }, {\n    key: \"createMutationExpressions\",\n    value: function () {\n      var _createMutationExpressions = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pathData, path, args) {\n        var conditions, objects, mutationType, _conditions$pop, predicate;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return path.pathExpression;\n\n              case 2:\n                conditions = _context.sent;\n\n                if (Array.isArray(conditions)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"\".concat(pathData, \" has no pathExpression property\"));\n\n              case 5:\n                if (!(conditions.length < 2)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"\".concat(pathData, \" should at least contain a subject and a predicate\"));\n\n              case 7:\n                _context.next = 9;\n                return this.extractObjects(pathData, path, args);\n\n              case 9:\n                objects = _context.sent;\n                // If no objects were specified, mutate all objects in the domain\n                mutationType = this._mutationType;\n\n                if (objects) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", [{\n                  mutationType: mutationType,\n                  conditions: conditions\n                }]);\n\n              case 13:\n                if (!(objects.length === 0)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", []);\n\n              case 15:\n                // Otherwise, mutate the affected objects\n                _conditions$pop = conditions.pop(), predicate = _conditions$pop.predicate;\n\n                if (predicate) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw new Error(\"Expected predicate in \".concat(pathData));\n\n              case 18:\n                return _context.abrupt(\"return\", [{\n                  mutationType: mutationType,\n                  conditions: conditions,\n                  predicate: predicate,\n                  objects: objects\n                }]);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createMutationExpressions(_x, _x2, _x3) {\n        return _createMutationExpressions.apply(this, arguments);\n      }\n\n      return createMutationExpressions;\n    }()\n  }, {\n    key: \"extractObjects\",\n    value: function () {\n      var _extractObjects = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pathData, path, args) {\n        var objects, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, arg, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, item;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(args.length === 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 2:\n                // Expand strings, promises, and paths\n                objects = [];\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context2.prev = 6;\n                _iterator2 = args[Symbol.iterator]();\n\n              case 8:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context2.next = 58;\n                  break;\n                }\n\n                arg = _step2.value;\n\n                if (!(arg && arg[Symbol.asyncIterator])) {\n                  _context2.next = 46;\n                  break;\n                }\n\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 13;\n                _iterator = (0, _asyncIterator2.default)(arg);\n\n              case 15:\n                _context2.next = 17;\n                return _iterator.next();\n\n              case 17:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 21;\n                return _step.value;\n\n              case 21:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                item = _value;\n                objects.push(this.extractObject(pathData, path, item));\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context2.next = 15;\n                break;\n\n              case 28:\n                _context2.next = 34;\n                break;\n\n              case 30:\n                _context2.prev = 30;\n                _context2.t0 = _context2[\"catch\"](13);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 34:\n                _context2.prev = 34;\n                _context2.prev = 35;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                _context2.next = 39;\n                return _iterator.return();\n\n              case 39:\n                _context2.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context2.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context2.finish(39);\n\n              case 43:\n                return _context2.finish(34);\n\n              case 44:\n                _context2.next = 55;\n                break;\n\n              case 46:\n                _context2.t1 = objects;\n                _context2.t2 = this;\n                _context2.t3 = pathData;\n                _context2.t4 = path;\n                _context2.next = 52;\n                return arg;\n\n              case 52:\n                _context2.t5 = _context2.sent;\n                _context2.t6 = _context2.t2.extractObject.call(_context2.t2, _context2.t3, _context2.t4, _context2.t5);\n\n                _context2.t1.push.call(_context2.t1, _context2.t6);\n\n              case 55:\n                _iteratorNormalCompletion2 = true;\n                _context2.next = 8;\n                break;\n\n              case 58:\n                _context2.next = 64;\n                break;\n\n              case 60:\n                _context2.prev = 60;\n                _context2.t7 = _context2[\"catch\"](6);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context2.t7;\n\n              case 64:\n                _context2.prev = 64;\n                _context2.prev = 65;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 67:\n                _context2.prev = 67;\n\n                if (!_didIteratorError2) {\n                  _context2.next = 70;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 70:\n                return _context2.finish(67);\n\n              case 71:\n                return _context2.finish(64);\n\n              case 72:\n                return _context2.abrupt(\"return\", objects);\n\n              case 73:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 60, 64, 72], [13, 30, 34, 44], [35,, 39, 43], [65,, 67, 71]]);\n      }));\n\n      function extractObjects(_x4, _x5, _x6) {\n        return _extractObjects.apply(this, arguments);\n      }\n\n      return extractObjects;\n    }()\n  }, {\n    key: \"extractObject\",\n    value: function extractObject(pathData, path, arg) {\n      if (typeof arg === 'string') return (0, _dataModel.literal)(arg);\n      if (arg && arg.termType) return arg;\n      throw new Error(\"Invalid object: \".concat(arg));\n    }\n  }]);\n\n  return MutationFunctionHandler;\n}();\n\nexports.default = MutationFunctionHandler;","map":null,"metadata":{},"sourceType":"script"}