{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar immutable_1 = require(\"immutable\");\n\nvar Err = require(\"../util/Errors\");\n\nvar OverloadedFunction =\n/*#__PURE__*/\nfunction () {\n  function OverloadedFunction(operator, definition) {\n    var _this = this;\n\n    _classCallCheck(this, OverloadedFunction);\n\n    this.operator = operator;\n    /**\n     * A function application works by monomorphing the function to a specific\n     * instance depending on the runtime types. We then just apply this function\n     * to the args.\n     */\n\n    this.apply = function (args) {\n      var func = _this.monomorph(args) || _this.handleInvalidTypes(args);\n\n      return func(args);\n    };\n\n    this.arity = definition.arity;\n    this.overloads = definition.overloads;\n  }\n  /**\n   * We monomorph by checking the map of overloads for keys corresponding\n   * to the runtime types. We start by checking for an implementation for the\n   * most concrete types (integer, string, date, IRI), if we find none,\n   * we consider their term types (literal, blank, IRI), and lastly we consider\n   * all arguments as generic terms.\n   *\n   * Another option would be to populate the overloads with an implementation\n   * for every concrete type when the function is generic over termtypes or\n   * terms.\n   */\n\n\n  _createClass(OverloadedFunction, [{\n    key: \"monomorph\",\n    value: function monomorph(args) {\n      return false || this.overloads.get(Typer.asConcreteTypes(args)) || this.overloads.get(Typer.asTermTypes(args)) || this.overloads.get(Typer.asGenericTerms(args));\n    }\n  }]);\n\n  return OverloadedFunction;\n}();\n\nexports.OverloadedFunction = OverloadedFunction;\n\nvar Typer =\n/*#__PURE__*/\nfunction () {\n  function Typer() {\n    _classCallCheck(this, Typer);\n  }\n\n  _createClass(Typer, null, [{\n    key: \"asConcreteTypes\",\n    value: function asConcreteTypes(args) {\n      // tslint:disable-next-line:no-any\n      return immutable_1.List(args.map(function (a) {\n        return a.type || a.termType;\n      }));\n    }\n  }, {\n    key: \"asTermTypes\",\n    value: function asTermTypes(args) {\n      return immutable_1.List(args.map(function (a) {\n        return a.termType;\n      }));\n    }\n  }, {\n    key: \"asGenericTerms\",\n    value: function asGenericTerms(args) {\n      return immutable_1.List(Array(args.length).fill('term'));\n    }\n  }]);\n\n  return Typer;\n}(); // Regular Functions ----------------------------------------------------------\n\n/**\n * Varying kinds of functions take arguments of different types on which the\n * specific behaviour is dependant. Although their behaviour is often varying,\n * it is always relatively simple, and better suited for synced behaviour.\n * The types of their arguments are always terms, but might differ in\n * their term-type (eg: iri, literal),\n * their specific literal type (eg: string, integer),\n * their arity (see BNODE),\n * or even their specific numeric type (eg: integer, float).\n *\n * Examples include:\n *  - Arithmetic operations such as: *, -, /, +\n *  - Bool operators such as: =, !=, <=, <, ...\n *  - Functions such as: str, IRI\n *\n * See also: https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n * and https://www.w3.org/TR/sparql11-query/#OperatorMapping\n */\n\n\nvar RegularFunction =\n/*#__PURE__*/\nfunction (_OverloadedFunction) {\n  _inherits(RegularFunction, _OverloadedFunction);\n\n  function RegularFunction(op, definition) {\n    var _this2;\n\n    _classCallCheck(this, RegularFunction);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RegularFunction).call(this, op, definition));\n    _this2.functionClass = 'regular';\n    return _this2;\n  }\n\n  _createClass(RegularFunction, [{\n    key: \"handleInvalidTypes\",\n    value: function handleInvalidTypes(args) {\n      throw new Err.InvalidArgumentTypes(args, this.operator);\n    }\n  }]);\n\n  return RegularFunction;\n}(OverloadedFunction);\n\nexports.RegularFunction = RegularFunction; // Named Functions ------------------------------------------------------------\n\nvar NamedFunction =\n/*#__PURE__*/\nfunction (_OverloadedFunction2) {\n  _inherits(NamedFunction, _OverloadedFunction2);\n\n  function NamedFunction(op, definition) {\n    var _this3;\n\n    _classCallCheck(this, NamedFunction);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(NamedFunction).call(this, op, definition));\n    _this3.functionClass = 'named';\n    return _this3;\n  }\n\n  _createClass(NamedFunction, [{\n    key: \"handleInvalidTypes\",\n    value: function handleInvalidTypes(args) {\n      throw new Err.InvalidArgumentTypes(args, this.operator);\n    }\n  }]);\n\n  return NamedFunction;\n}(OverloadedFunction);\n\nexports.NamedFunction = NamedFunction; // Special Functions ----------------------------------------------------------\n\n/*\n * Special Functions are those that don't really fit in sensible categories and\n * have extremely heterogeneous signatures that make them impossible to abstract\n * over. They are small in number, and their behaviour is often complex and open\n * for multiple correct implementations with different trade-offs.\n *\n * Due to their varying nature, they need all available information present\n * during evaluation. This reflects in the signature of the apply() method.\n *\n * They need access to an evaluator to be able to even implement their logic.\n * Especially relevant for IF, and the logical connectives.\n *\n * They can have both sync and async implementations, and both would make sense\n * in some contexts.\n */\n\nvar SpecialFunction = function SpecialFunction(operator, definition) {\n  _classCallCheck(this, SpecialFunction);\n\n  this.operator = operator;\n  this.functionClass = 'special';\n  this.arity = definition.arity;\n  this.applySync = definition.applySync;\n  this.applyAsync = definition.applyAsync;\n  this.checkArity = definition.checkArity || defaultArityCheck(this.arity);\n};\n\nexports.SpecialFunction = SpecialFunction;\n\nfunction defaultArityCheck(arity) {\n  return function (args) {\n    // Infinity is used to represent var-args, so it's always correct.\n    if (arity === Infinity) {\n      return true;\n    } // If the function has overloaded arity, the actual arity needs to be present.\n\n\n    if (Array.isArray(arity)) {\n      return arity.indexOf(args.length) >= 0;\n    }\n\n    return args.length === arity;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}