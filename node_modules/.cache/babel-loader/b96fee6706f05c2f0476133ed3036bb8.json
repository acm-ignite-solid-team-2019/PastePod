{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar asynciterator_promiseproxy_1 = require(\"asynciterator-promiseproxy\");\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar rdf_terms_1 = require(\"rdf-terms\");\n/**\n * A comunica actor for handling 'quadpattern' query operations.\n */\n\n\nvar ActorQueryOperationQuadpattern =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationQuadpattern, _bus_query_operation_);\n\n  function ActorQueryOperationQuadpattern(args) {\n    _classCallCheck(this, ActorQueryOperationQuadpattern);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationQuadpattern).call(this, args, 'pattern'));\n  }\n  /**\n   * Check if a term is a variable.\n   * @param {RDF.Term} term An RDF term.\n   * @return {any} If the term is a variable or blank node.\n   */\n\n\n  _createClass(ActorQueryOperationQuadpattern, [{\n    key: \"getVariables\",\n\n    /**\n     * Get all variables in the given pattern.\n     * No duplicates are returned.\n     * @param {RDF.BaseQuad} pattern A quad pattern.\n     * @return {string[]} The variables in this pattern, without '?' prefix.\n     */\n    value: function getVariables(pattern) {\n      return rdf_terms_1.uniqTerms(rdf_terms_1.getTerms(pattern).filter(ActorQueryOperationQuadpattern.isTermVariable)).map(rdf_string_1.termToString);\n    }\n  }, {\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(operation, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(pattern, context) {\n        var result, variables, elementVariables, quadBindingsReducer, bindingsStream;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.mediatorResolveQuadPattern.mediate({\n                  pattern: pattern,\n                  context: context\n                });\n\n              case 2:\n                result = _context3.sent;\n                // Collect all variables from the pattern\n                variables = this.getVariables(pattern); // Convenience datastructure for mapping quad elements to variables\n\n                elementVariables = rdf_terms_1.reduceTerms(pattern, function (acc, term, key) {\n                  if (ActorQueryOperationQuadpattern.isTermVariable(term)) {\n                    acc[key] = rdf_string_1.termToString(term);\n                  }\n\n                  return acc;\n                }, {});\n\n                quadBindingsReducer = function quadBindingsReducer(acc, term, key) {\n                  var variable = elementVariables[key];\n\n                  if (variable) {\n                    acc[variable] = term;\n                  }\n\n                  return acc;\n                };\n\n                bindingsStream = new asynciterator_promiseproxy_1.PromiseProxyIterator(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.abrupt(\"return\", result.data.map(function (quad) {\n                            return bus_query_operation_1.Bindings(rdf_terms_1.reduceTerms(quad, quadBindingsReducer, {}));\n                          }, {\n                            autoStart: true,\n                            maxBufferSize: 128\n                          }));\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, this);\n                })));\n                return _context3.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: bindingsStream,\n                  variables: variables,\n                  metadata: result.metadata\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }], [{\n    key: \"isTermVariable\",\n    value: function isTermVariable(term) {\n      return term.termType === 'Variable';\n    }\n  }]);\n\n  return ActorQueryOperationQuadpattern;\n}(bus_query_operation_1.ActorQueryOperationTyped);\n\nexports.ActorQueryOperationQuadpattern = ActorQueryOperationQuadpattern;","map":null,"metadata":{},"sourceType":"script"}