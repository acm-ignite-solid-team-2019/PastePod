{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = withWebId;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _solidAuthClient = _interopRequireDefault(require(\"solid-auth-client\"));\n\nvar _util = require(\"../util\"); // Track all instances to inform them of WebID changes\n\n\nvar instances = new Set();\nvar authState = {\n  webId: undefined\n};\n/**\n * Higher-order component that passes the WebID of the logged-in user\n * to the webId property of the wrapped component.\n */\n\nfunction withWebId(Component) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_react$default$Compon) {\n    _inherits(WithWebID, _react$default$Compon);\n\n    function WithWebID() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, WithWebID);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WithWebID)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", authState);\n      return _this;\n    }\n\n    _createClass(WithWebID, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        instances.add(this);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        instances.delete(this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(Component, (0, _extends2.default)({\n          webId: this.state.webId\n        }, this.props));\n      }\n    }]);\n\n    return WithWebID;\n  }(_react.default.Component), (0, _defineProperty2.default)(_class, \"displayName\", \"WithWebId(\".concat((0, _util.getDisplayName)(Component), \")\")), _temp;\n} // Inform all instances when the WebID changes\n\n\n_solidAuthClient.default.trackSession(function (session) {\n  authState = {\n    webId: session && session.webId\n  };\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = instances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var instance = _step.value;\n      instance.setState(authState);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}