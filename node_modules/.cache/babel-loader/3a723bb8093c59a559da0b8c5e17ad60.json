{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_http_1 = require(\"@comunica/bus-http\");\n\nvar bus_rdf_dereference_1 = require(\"@comunica/bus-rdf-dereference\");\n/**\n * An actor that listens on the 'rdf-dereference' bus.\n *\n * It starts by grabbing all available RDF media types from the RDF parse bus.\n * After that, it resolves the URL using the HTTP bus using an accept header compiled from the available media types.\n * Finally, the response is parsed using the RDF parse bus.\n */\n\n\nvar ActorRdfDereferenceHttpParse =\n/*#__PURE__*/\nfunction (_bus_rdf_dereference_) {\n  _inherits(ActorRdfDereferenceHttpParse, _bus_rdf_dereference_);\n\n  function ActorRdfDereferenceHttpParse(args) {\n    _classCallCheck(this, ActorRdfDereferenceHttpParse);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfDereferenceHttpParse).call(this, args));\n  }\n\n  _createClass(ActorRdfDereferenceHttpParse, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!action.url.startsWith(\"http:\") && !action.url.startsWith(\"https:\"))) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('This actor can only handle URLs that start with \\'http\\' or \\'https\\'.');\n\n              case 2:\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var mediaTypes, acceptHeader, headers, httpAction, httpResponse, responseStream, mediaType, parseAction, parseOutput;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.mediatorRdfParseMediatypes.mediate({\n                  context: action.context,\n                  mediaTypes: true\n                });\n\n              case 2:\n                mediaTypes = _context2.sent.mediaTypes;\n                acceptHeader = this.mediaTypesToAcceptString(mediaTypes); // Resolve HTTP URL using appropriate accept header\n\n                headers = new Headers();\n                headers.append('Accept', acceptHeader);\n                httpAction = {\n                  context: action.context,\n                  input: action.url,\n                  init: {\n                    headers: headers\n                  }\n                };\n                _context2.next = 9;\n                return this.mediatorHttp.mediate(httpAction);\n\n              case 9:\n                httpResponse = _context2.sent;\n                // Wrap WhatWG readable stream into a Node.js readable stream\n                // If the body already is a Node.js stream (in the case of node-fetch), don't do explicit conversion.\n                responseStream = bus_http_1.ActorHttp.toNodeReadable(httpResponse.body); // Only parse if retrieval was successful\n\n                if (!(httpResponse.status !== 200)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                throw new Error('Could not retrieve ' + action.url + ' (' + httpResponse.status + ')');\n\n              case 13:\n                // Parse the resulting response\n                mediaType = httpResponse.headers.has('content-type') ? ActorRdfDereferenceHttpParse.REGEX_MEDIATYPE.exec(httpResponse.headers.get('content-type'))[0] : null; // If no media type could be found, try to determine it via the file extension\n\n                if (!mediaType) {\n                  mediaType = this.getMediaTypeFromExtension(httpResponse.url);\n                }\n\n                parseAction = {\n                  input: responseStream,\n                  baseIRI: httpResponse.url\n                };\n                _context2.next = 18;\n                return this.mediatorRdfParseHandle.mediate({\n                  context: action.context,\n                  handle: parseAction,\n                  handleMediaType: mediaType\n                });\n\n              case 18:\n                parseOutput = _context2.sent.handle;\n                return _context2.abrupt(\"return\", {\n                  pageUrl: httpResponse.url,\n                  quads: parseOutput.quads,\n                  triples: parseOutput.triples\n                });\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"mediaTypesToAcceptString\",\n    value: function mediaTypesToAcceptString(mediaTypes) {\n      var parts = [];\n\n      for (var mediaType in mediaTypes) {\n        var priority = mediaTypes[mediaType];\n        parts.push(mediaType + (priority !== 1 ? ';q=' + priority : ''));\n      }\n\n      if (!parts.length) {\n        return '*/*';\n      }\n\n      return parts.join(', ');\n    }\n  }]);\n\n  return ActorRdfDereferenceHttpParse;\n}(bus_rdf_dereference_1.ActorRdfDereferenceMediaMappings);\n\nActorRdfDereferenceHttpParse.REGEX_MEDIATYPE = /^[^ ;]*/;\nexports.ActorRdfDereferenceHttpParse = ActorRdfDereferenceHttpParse;","map":null,"metadata":{},"sourceType":"script"}