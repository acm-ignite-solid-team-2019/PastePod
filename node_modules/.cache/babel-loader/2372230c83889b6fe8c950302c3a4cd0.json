{"ast":null,"code":"// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\nvar namespaces = require('./IRIs');\n\nvar rdf = namespaces.rdf,\n    xsd = namespaces.xsd;\nvar DataFactory, DEFAULTGRAPH;\nvar _blankNodeCounter = 0; // ## Term constructor\n\nfunction Term(id) {\n  if (!(this instanceof Term)) return new Term(id);\n  this.id = id;\n} // ### Makes this class a subclass of the given type\n\n\nTerm.subclass = function subclass(Type, name) {\n  Type.prototype = Object.create(this.prototype, {\n    constructor: {\n      value: Type\n    },\n    termType: {\n      enumerable: true,\n      value: name\n    }\n  });\n  Type.subclass = subclass;\n}; // ### Returns whether this object represents the same term as the other\n\n\nTerm.prototype.equals = function (other) {\n  // If both terms were created by this library,\n  // equality can be computed through ids\n  if (other instanceof Term) return this.id === other.id; // Otherwise, compare term type and value\n\n  return !!other && this.termType === other.termType && this.value === other.value;\n}; // ### Returns a plain object representation of this term\n\n\nTerm.prototype.toJSON = function () {\n  return {\n    termType: this.termType,\n    value: this.value\n  };\n}; // ### Constructs a term from the given internal string ID\n\n\nfunction fromId(id, factory) {\n  factory = factory || DataFactory; // Falsy value or empty string indicate the default graph\n\n  if (!id) return factory.defaultGraph(); // Identify the term type based on the first character\n\n  switch (id[0]) {\n    case '_':\n      return factory.blankNode(id.substr(2));\n\n    case '?':\n      return factory.variable(id.substr(1));\n\n    case '\"':\n      // Shortcut for internal literals\n      if (factory === DataFactory) return new Literal(id); // Literal without datatype or language\n\n      if (id[id.length - 1] === '\"') return factory.literal(id.substr(1, id.length - 2)); // Literal with datatype or language\n\n      var endPos = id.lastIndexOf('\"', id.length - 1);\n      return factory.literal(id.substr(1, endPos - 1), id[endPos + 1] === '@' ? id.substr(endPos + 2) : factory.namedNode(id.substr(endPos + 3)));\n\n    default:\n      return factory.namedNode(id);\n  }\n} // ### Constructs an internal string ID from the given term or ID string\n\n\nfunction toId(term) {\n  if (typeof term === 'string') return term;\n  if (term instanceof Term) return term.id;\n  if (!term) return DEFAULTGRAPH.value; // Term instantiated with another library\n\n  switch (term.termType) {\n    case 'NamedNode':\n      return term.value;\n\n    case 'BlankNode':\n      return '_:' + term.value;\n\n    case 'Variable':\n      return '?' + term.value;\n\n    case 'DefaultGraph':\n      return '';\n\n    case 'Literal':\n      return '\"' + term.value + '\"' + (term.language ? '@' + term.language : term.datatype && term.datatype.value !== xsd.string ? '^^' + term.datatype.value : '');\n\n    default:\n      throw new Error('Unexpected termType: ' + term.termType);\n  }\n} // ## NamedNode constructor\n\n\nfunction NamedNode(iri) {\n  if (!(this instanceof NamedNode)) return new NamedNode(iri);\n  this.id = iri;\n}\n\nTerm.subclass(NamedNode, 'NamedNode'); // ### The IRI of this named node\n\nObject.defineProperty(NamedNode.prototype, 'value', {\n  enumerable: true,\n  get: function get() {\n    return this.id;\n  }\n}); // ## BlankNode constructor\n\nfunction BlankNode(name) {\n  if (!(this instanceof BlankNode)) return new BlankNode(name);\n  this.id = '_:' + name;\n}\n\nTerm.subclass(BlankNode, 'BlankNode'); // ### The name of this blank node\n\nObject.defineProperty(BlankNode.prototype, 'value', {\n  enumerable: true,\n  get: function get() {\n    return this.id.substr(2);\n  }\n}); // ## Variable constructor\n\nfunction Variable(name) {\n  if (!(this instanceof Variable)) return new Variable(name);\n  this.id = '?' + name;\n}\n\nTerm.subclass(Variable, 'Variable'); // ### The name of this variable\n\nObject.defineProperty(Variable.prototype, 'value', {\n  enumerable: true,\n  get: function get() {\n    return this.id.substr(1);\n  }\n}); // ## Literal constructor\n\nfunction Literal(id) {\n  if (!(this instanceof Literal)) return new Literal(id);\n  this.id = id;\n}\n\nTerm.subclass(Literal, 'Literal'); // ### The text value of this literal\n\nObject.defineProperty(Literal.prototype, 'value', {\n  enumerable: true,\n  get: function get() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n}); // ### The language of this literal\n\nObject.defineProperty(Literal.prototype, 'language', {\n  enumerable: true,\n  get: function get() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    var id = this.id,\n        atPos = id.lastIndexOf('\"') + 1; // If \"@\" it follows, return the remaining substring; empty otherwise\n\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n}); // ### The datatype IRI of this literal\n\nObject.defineProperty(Literal.prototype, 'datatype', {\n  enumerable: true,\n  get: function get() {\n    return new NamedNode(this.datatypeString);\n  }\n}); // ### The datatype string of this literal\n\nObject.defineProperty(Literal.prototype, 'datatypeString', {\n  enumerable: true,\n  get: function get() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    var id = this.id,\n        dtPos = id.lastIndexOf('\"') + 1,\n        ch; // If \"^\" it follows, return the remaining substring\n\n    return dtPos < id.length && (ch = id[dtPos]) === '^' ? id.substr(dtPos + 2) : // If \"@\" follows, return rdf:langString; xsd:string otherwise\n    ch !== '@' ? xsd.string : rdf.langString;\n  }\n}); // ### Returns whether this object represents the same term as the other\n\nLiteral.prototype.equals = function (other) {\n  // If both literals were created by this library,\n  // equality can be computed through ids\n  if (other instanceof Literal) return this.id === other.id; // Otherwise, compare term type, value, language, and datatype\n\n  return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;\n}; // ### Returns a plain object representation of this term\n\n\nLiteral.prototype.toJSON = function () {\n  return {\n    termType: this.termType,\n    value: this.value,\n    language: this.language,\n    datatype: {\n      termType: 'NamedNode',\n      value: this.datatypeString\n    }\n  };\n}; // ## DefaultGraph singleton\n\n\nfunction DefaultGraph() {\n  return DEFAULTGRAPH || this;\n}\n\nTerm.subclass(DefaultGraph, 'DefaultGraph'); // Initialize singleton\n\nDEFAULTGRAPH = new DefaultGraph();\nDEFAULTGRAPH.id = ''; // ### The empty string\n\nObject.defineProperty(DefaultGraph.prototype, 'value', {\n  enumerable: true,\n  value: ''\n}); // ### Returns whether this object represents the same term as the other\n\nDefaultGraph.prototype.equals = function (other) {\n  // If both terms were created by this library,\n  // equality can be computed through strict equality;\n  // otherwise, compare term types.\n  return this === other || !!other && this.termType === other.termType;\n}; // ## Quad constructor\n\n\nfunction Quad(subject, predicate, object, graph) {\n  if (!(this instanceof Quad)) return new Quad(subject, predicate, object, graph);\n  this.subject = subject;\n  this.predicate = predicate;\n  this.object = object;\n  this.graph = graph || DEFAULTGRAPH;\n} // ### Returns a plain object representation of this quad\n\n\nQuad.prototype.toJSON = function () {\n  return {\n    subject: this.subject.toJSON(),\n    predicate: this.predicate.toJSON(),\n    object: this.object.toJSON(),\n    graph: this.graph.toJSON()\n  };\n}; // ### Returns whether this object represents the same quad as the other\n\n\nQuad.prototype.equals = function (other) {\n  return !!other && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);\n}; // ## DataFactory functions\n// ### Creates an IRI\n\n\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n} // ### Creates a blank node\n\n\nfunction blankNode(name) {\n  if (!name) name = 'n3-' + _blankNodeCounter++;\n  return new BlankNode(name);\n} // ### Creates a literal\n\n\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string') return new Literal('\"' + value + '\"@' + languageOrDataType.toLowerCase()); // Create a datatyped literal\n\n  var datatype = languageOrDataType && languageOrDataType.value || '';\n\n  if (!datatype) {\n    switch (typeof value) {\n      // Convert a boolean\n      case 'boolean':\n        datatype = xsd.boolean;\n        break;\n      // Convert an integer or double\n\n      case 'number':\n        if (Number.isFinite(value)) datatype = Number.isInteger(value) ? xsd.integer : xsd.double;else {\n          datatype = xsd.double;\n          if (!Number.isNaN(value)) value = value > 0 ? 'INF' : '-INF';\n        }\n        break;\n      // No datatype, so convert a plain string\n\n      default:\n        return new Literal('\"' + value + '\"');\n    }\n  }\n\n  return new Literal('\"' + value + '\"^^' + datatype);\n} // ### Creates a variable\n\n\nfunction variable(name) {\n  return new Variable(name);\n} // ### Returns the default graph\n\n\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n} // ### Creates a quad\n\n\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n} // ## Module exports\n\n\nmodule.exports = DataFactory = {\n  // ### Public factory functions\n  namedNode: namedNode,\n  blankNode: blankNode,\n  variable: variable,\n  literal: literal,\n  defaultGraph: defaultGraph,\n  quad: quad,\n  triple: quad,\n  // ### Internal datatype constructors\n  internal: {\n    Term: Term,\n    NamedNode: NamedNode,\n    BlankNode: BlankNode,\n    Variable: Variable,\n    Literal: Literal,\n    DefaultGraph: DefaultGraph,\n    Quad: Quad,\n    Triple: Quad,\n    fromId: fromId,\n    toId: toId\n  }\n};","map":null,"metadata":{},"sourceType":"script"}