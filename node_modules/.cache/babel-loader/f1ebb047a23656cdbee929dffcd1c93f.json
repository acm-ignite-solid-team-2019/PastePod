{"ast":null,"code":"'use strict';\n\nvar nodeStream = require('stream');\n\nvar isNodeStream = require('is-stream');\n\nvar conversions = require('./lib/conversions');\n\nmodule.exports = require('web-streams-polyfill');\n/**\n * Convert Web streams to Node streams. Until WritableStream / TransformStream\n * is finalized, only ReadableStream is supported.\n *\n * @param {ReadableStream} stream, a web stream.\n * @return {stream.Readable}, a Node Readable stream.\n */\n\nmodule.exports.toNodeReadable = function (stream) {\n  if (stream instanceof module.exports.ReadableStream || stream && typeof stream.getReader === 'function') {\n    return conversions.readable.webToNode(stream);\n  } else {\n    throw new TypeError(\"Expected a ReadableStream.\");\n  }\n};\n/**\n * Convert Node Readable streams, an Array, Buffer or String to a Web\n * ReadableStream.\n *\n * @param {Readable|Array|Buffer|String} stream, a Node Readable stream,\n * Array, Buffer or String.\n * @return {ReadableStream}, a web ReadableStream.\n */\n\n\nmodule.exports.toWebReadableStream = function (stream) {\n  if (isNodeStream(stream) && stream.readable) {\n    return conversions.readable.nodeToWeb(stream);\n  } else if (Array.isArray(stream)) {\n    return conversions.readable.arrayToWeb(stream);\n  } else if (Buffer.isBuffer(stream) || typeof stream === 'string') {\n    return conversions.readable.arrayToWeb([stream]);\n  } else {\n    throw new TypeError(\"Expected a Node streams.Readable, an Array, Buffer or String.\");\n  }\n};","map":null,"metadata":{},"sourceType":"script"}