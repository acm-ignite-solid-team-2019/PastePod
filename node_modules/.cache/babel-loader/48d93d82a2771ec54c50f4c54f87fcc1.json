{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@comunica/core\");\n\nvar asynciterator_1 = require(\"asynciterator\");\n/**\n * A comunica actor for joining 2 binding streams.\n *\n * Actor types:\n * * Input:  IActionRdfJoin:      The streams that need to be joined.\n * * Test:   <none>\n * * Output: IActorRdfJoinOutput: The resulting joined stream.\n *\n * @see IActionRdfJoin\n * @see IActorQueryOperationOutput\n */\n\n\nvar ActorRdfJoin =\n/*#__PURE__*/\nfunction (_core_1$Actor) {\n  _inherits(ActorRdfJoin, _core_1$Actor);\n\n  function ActorRdfJoin(args, maxEntries) {\n    var _this;\n\n    _classCallCheck(this, ActorRdfJoin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfJoin).call(this, args));\n    _this.maxEntries = maxEntries;\n    return _this;\n  }\n  /**\n   * Returns an array containing all the variable names that occur in all bindings streams.\n   * @param {IActionRdfJoin} action\n   * @returns {string[]}\n   */\n\n\n  _createClass(ActorRdfJoin, [{\n    key: \"test\",\n\n    /**\n     * Default test function for join actors.\n     * Checks whether all iterators have metadata.\n     * If yes: call the abstract getIterations method, if not: return Infinity.\n     * @param {IActionRdfJoin} action The input action containing the relevant iterators\n     * @returns {Promise<IMediatorTypeIterations>} The calculated estime.\n     */\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(action.entries.length <= 1)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  iterations: 0\n                });\n\n              case 2:\n                if (!(this.maxEntries && action.entries.length > this.maxEntries)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(this.name + ' supports ' + this.maxEntries + ' sources at most. The input contained ' + action.entries.length + '.');\n\n              case 4:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 7;\n                _iterator = action.entries[Symbol.iterator]();\n\n              case 9:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 16;\n                  break;\n                }\n\n                entry = _step.value;\n\n                if (!(entry.type !== 'bindings')) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error('Invalid type of a join entry: Expected \\'bindings\\' but got \\'' + entry.type + '\\'');\n\n              case 13:\n                _iteratorNormalCompletion = true;\n                _context.next = 9;\n                break;\n\n              case 16:\n                _context.next = 22;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](7);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 22:\n                _context.prev = 22;\n                _context.prev = 23;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 25:\n                _context.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context.finish(25);\n\n              case 29:\n                return _context.finish(22);\n\n              case 30:\n                _context.next = 32;\n                return ActorRdfJoin.iteratorsHaveMetadata(action, 'totalItems');\n\n              case 32:\n                if (_context.sent) {\n                  _context.next = 34;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  iterations: Infinity\n                });\n\n              case 34:\n                _context.next = 36;\n                return this.getIterations(action);\n\n              case 36:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", {\n                  iterations: _context.t1\n                });\n\n              case 38:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 18, 22, 30], [23,, 25, 29]]);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n    /**\n     * Returns default input for 0 or 1 entries. Calls the getOutput function otherwise\n     * @param {IActionRdfJoin} action\n     * @returns {Promise<IActorQueryOperationOutput>}\n     */\n\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(action) {\n        var result, totalItems, unwrapped, oldMetadata;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(action.entries.length === 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  bindingsStream: new asynciterator_1.EmptyIterator(),\n                  metadata: function metadata() {\n                    return Promise.resolve({\n                      totalItems: 0\n                    });\n                  },\n                  type: 'bindings',\n                  variables: []\n                });\n\n              case 2:\n                if (!(action.entries.length === 1)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", action.entries[0]);\n\n              case 4:\n                result = this.getOutput(action);\n                _context3.next = 7;\n                return ActorRdfJoin.iteratorsHaveMetadata(action, 'totalItems');\n\n              case 7:\n                if (!_context3.sent) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                totalItems = function totalItems() {\n                  return Promise.all(action.entries.map(function (entry) {\n                    return entry.metadata();\n                  })).then(function (metadatas) {\n                    return metadatas.reduce(function (acc, val) {\n                      return acc * val.totalItems;\n                    }, 1);\n                  });\n                }; // update the result promise to also add the estimated total items\n\n\n                _context3.next = 11;\n                return result;\n\n              case 11:\n                unwrapped = _context3.sent;\n\n                if (unwrapped.metadata) {\n                  oldMetadata = unwrapped.metadata;\n\n                  unwrapped.metadata = function () {\n                    return oldMetadata().then(\n                    /*#__PURE__*/\n                    function () {\n                      var _ref = _asyncToGenerator(\n                      /*#__PURE__*/\n                      _regeneratorRuntime.mark(function _callee2(metadata) {\n                        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                          while (1) {\n                            switch (_context2.prev = _context2.next) {\n                              case 0:\n                                if (metadata.hasOwnProperty('totalItems')) {\n                                  _context2.next = 4;\n                                  break;\n                                }\n\n                                _context2.next = 3;\n                                return totalItems();\n\n                              case 3:\n                                metadata.totalItems = _context2.sent;\n\n                              case 4:\n                                return _context2.abrupt(\"return\", metadata);\n\n                              case 5:\n                              case \"end\":\n                                return _context2.stop();\n                            }\n                          }\n                        }, _callee2, this);\n                      }));\n\n                      return function (_x3) {\n                        return _ref.apply(this, arguments);\n                      };\n                    }());\n                  };\n                } else {\n                  unwrapped.metadata = function () {\n                    return totalItems().then(function (t) {\n                      return {\n                        totalItems: t\n                      };\n                    });\n                  };\n                }\n\n                return _context3.abrupt(\"return\", unwrapped);\n\n              case 14:\n                return _context3.abrupt(\"return\", result);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }], [{\n    key: \"overlappingVariables\",\n    value: function overlappingVariables(action) {\n      return require('lodash.intersection').apply(this, action.entries.map(function (entry) {\n        return entry.variables;\n      }));\n    }\n    /**\n     * Returns the variables that will occur in the joined bindings.\n     * @param {IActionRdfJoin} action\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"joinVariables\",\n    value: function joinVariables(action) {\n      return require('lodash.union').apply(this, action.entries.map(function (entry) {\n        return entry.variables;\n      }));\n    }\n    /**\n     * Returns the result of joining bindings, or `null` if no join is possible.\n     * @param {Bindings[]} bindings\n     * @returns {Bindings}\n     */\n\n  }, {\n    key: \"join\",\n    value: function join() {\n      try {\n        for (var _len = arguments.length, bindings = new Array(_len), _key = 0; _key < _len; _key++) {\n          bindings[_key] = arguments[_key];\n        }\n\n        return bindings.reduce(function (acc, val) {\n          return acc.mergeWith(function (l, r) {\n            if (!l.equals(r)) {\n              throw new Error();\n            }\n\n            return l;\n          }, val);\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n    /**\n     * Checks if all metadata objects are present in the action, and if they have the specified key.\n     * @param {IActionRdfJoin} action\n     * @param {string} key\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"iteratorsHaveMetadata\",\n    value: function () {\n      var _iteratorsHaveMetadata = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(action, key) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", Promise.all(action.entries.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(entry) {\n                    var metadata;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.next = 2;\n                            return entry.metadata();\n\n                          case 2:\n                            metadata = _context4.sent;\n\n                            if (metadata.hasOwnProperty(key)) {\n                              _context4.next = 5;\n                              break;\n                            }\n\n                            throw new Error();\n\n                          case 5:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this);\n                  }));\n\n                  return function (_x6) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }())).then(function () {\n                  return true;\n                }).catch(function () {\n                  return false;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function iteratorsHaveMetadata(_x4, _x5) {\n        return _iteratorsHaveMetadata.apply(this, arguments);\n      }\n\n      return iteratorsHaveMetadata;\n    }()\n  }]);\n\n  return ActorRdfJoin;\n}(core_1.Actor);\n\nexports.ActorRdfJoin = ActorRdfJoin;","map":null,"metadata":{},"sourceType":"script"}