{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Readable = require('stream').Readable;\n\nvar ReadableStream = require('web-streams-polyfill').ReadableStream;\n/**\n * Web / node stream conversion functions\n */\n\n\nfunction readableNodeToWeb(nodeStream) {\n  return new ReadableStream({\n    start: function start(controller) {\n      nodeStream.pause();\n      nodeStream.on('data', function (chunk) {\n        controller.enqueue(chunk);\n        nodeStream.pause();\n      });\n      nodeStream.on('end', function () {\n        return controller.close();\n      });\n      nodeStream.on('error', function (e) {\n        return controller.error(e);\n      });\n    },\n    pull: function pull(controller) {\n      nodeStream.resume();\n    },\n    cancel: function cancel(reason) {\n      nodeStream.pause();\n    }\n  });\n}\n/**\n * ReadableStream wrapping an array.\n *\n * @param {Array} arr, the array to wrap into a stream.\n * @return {ReadableStream}\n */\n\n\nfunction arrayToWeb(arr) {\n  return new ReadableStream({\n    start: function start(controller) {\n      for (var i = 0; i < arr.length; i++) {\n        controller.enqueue(arr[i]);\n      }\n\n      controller.close();\n    }\n  });\n}\n\nvar NodeReadable =\n/*#__PURE__*/\nfunction (_Readable) {\n  _inherits(NodeReadable, _Readable);\n\n  function NodeReadable(webStream, options) {\n    var _this;\n\n    _classCallCheck(this, NodeReadable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeReadable).call(this, options));\n    _this._webStream = webStream;\n    _this._reader = webStream.getReader();\n    _this._reading = false;\n    return _this;\n  }\n\n  _createClass(NodeReadable, [{\n    key: \"_read\",\n    value: function _read(size) {\n      var _this2 = this;\n\n      if (this._reading) {\n        return;\n      }\n\n      this._reading = true;\n\n      var doRead = function doRead() {\n        _this2._reader.read().then(function (res) {\n          if (res.done) {\n            _this2.push(null);\n\n            return;\n          }\n\n          if (_this2.push(res.value)) {\n            return doRead(size);\n          } else {\n            _this2._reading = false;\n          }\n        });\n      };\n\n      doRead();\n    }\n  }]);\n\n  return NodeReadable;\n}(Readable);\n\nfunction readableWebToNode(webStream) {\n  return new NodeReadable(webStream);\n}\n\nmodule.exports = {\n  readable: {\n    nodeToWeb: readableNodeToWeb,\n    arrayToWeb: arrayToWeb,\n    webToNode: readableWebToNode\n  }\n}; // Simple round-trip test.\n// let nodeReader = require('fs').createReadStream('/tmp/test.txt');\n// let webReader = readableNodeToWeb(nodeReader);\n// let roundTrippedReader = readableWebToNode(webReader);\n// roundTrippedReader.pipe(process.stdout);","map":null,"metadata":{},"sourceType":"script"}