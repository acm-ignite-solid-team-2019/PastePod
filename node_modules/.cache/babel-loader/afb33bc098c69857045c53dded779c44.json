{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@comunica/core\");\n/**\n * A mediator that can mediate over a single number field.\n *\n * It takes the required 'field' and 'type' parameters.\n * The 'field' parameter represents the field name of the test result field over which must be mediated.\n * The 'type' parameter\n */\n\n\nvar MediatorNumber =\n/*#__PURE__*/\nfunction (_core_1$Mediator) {\n  _inherits(MediatorNumber, _core_1$Mediator);\n\n  function MediatorNumber(args) {\n    var _this;\n\n    _classCallCheck(this, MediatorNumber);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MediatorNumber).call(this, args));\n    _this.indexPicker = _this.createIndexPicker();\n    return _this;\n  }\n  /**\n   * @return {(tests: T[]) => number} A function that returns the index of the test result\n   *                                  that has been chosen by this mediator.\n   */\n\n\n  _createClass(MediatorNumber, [{\n    key: \"createIndexPicker\",\n    value: function createIndexPicker() {\n      var _this2 = this;\n\n      switch (this.type) {\n        case MediatorNumber.MIN:\n          return function (tests) {\n            return tests.reduce(function (a, b, i) {\n              var val = _this2.getOrDefault(b[_this2.field], Infinity);\n\n              return val !== null && (isNaN(a[0]) || a[0] > val) ? [val, i] : a;\n            }, [NaN, -1])[1];\n          };\n\n        case MediatorNumber.MAX:\n          return function (tests) {\n            return tests.reduce(function (a, b, i) {\n              var val = _this2.getOrDefault(b[_this2.field], -Infinity);\n\n              return val !== null && (isNaN(a[0]) || a[0] < val) ? [val, i] : a;\n            }, [NaN, -1])[1];\n          };\n      }\n\n      throw new Error('No valid \"type\" value was given, must be either ' + MediatorNumber.MIN + ' or ' + MediatorNumber.MAX + ', but got: ' + this.type);\n    }\n  }, {\n    key: \"getOrDefault\",\n    value: function getOrDefault(value, defaultValue) {\n      return value === undefined ? defaultValue : value;\n    }\n  }, {\n    key: \"mediateWith\",\n    value: function () {\n      var _mediateWith = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action, testResults) {\n        var promises, errors, dummy, results, index;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                promises = require('lodash.map')(testResults, 'reply');\n                errors = [];\n\n                if (this.ignoreErrors) {\n                  dummy = {};\n                  dummy[this.field] = null;\n                  promises = promises.map(function (p) {\n                    return p.catch(function (error) {\n                      errors.push(error);\n                      return dummy;\n                    });\n                  });\n                }\n\n                _context.next = 5;\n                return Promise.all(promises);\n\n              case 5:\n                results = _context.sent;\n                index = this.indexPicker(results);\n\n                if (!(index < 0)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new Error('All actors rejected their test in ' + this.name + '\\n' + errors.map(function (e) {\n                  return e.toString();\n                }).join('\\n'));\n\n              case 9:\n                return _context.abrupt(\"return\", testResults[index].actor);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function mediateWith(_x, _x2) {\n        return _mediateWith.apply(this, arguments);\n      }\n\n      return mediateWith;\n    }()\n  }]);\n\n  return MediatorNumber;\n}(core_1.Mediator);\n\nMediatorNumber.MIN = \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/\" + \"Mediator/Number/type/TypeMin\";\nMediatorNumber.MAX = \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/\" + \"Mediator/Number/type/TypeMax\";\nexports.MediatorNumber = MediatorNumber;","map":null,"metadata":{},"sourceType":"script"}