{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\n/**\n * Comunica datasource utilities\n */\n\n\nvar DataSourceUtils =\n/*#__PURE__*/\nfunction () {\n  function DataSourceUtils() {\n    _classCallCheck(this, DataSourceUtils);\n  }\n\n  _createClass(DataSourceUtils, null, [{\n    key: \"getSingleSource\",\n\n    /**\n     * Get the single source if the context contains just a single source.\n     * @param {ActionContext} context A context, can be null.\n     * @return {Promise<IDataSource>} A promise resolving to the single datasource or null.\n     */\n    value: function () {\n      var _getSingleSource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(context) {\n        var datasources, datasourcesArray;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(context && context.has(bus_rdf_resolve_quad_pattern_1.KEY_CONTEXT_SOURCE))) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", context.get(bus_rdf_resolve_quad_pattern_1.KEY_CONTEXT_SOURCE));\n\n              case 4:\n                if (!(context && context.has(bus_rdf_resolve_quad_pattern_1.KEY_CONTEXT_SOURCES))) {\n                  _context.next = 12;\n                  break;\n                }\n\n                // If multiple sources are set\n                datasources = context.get(bus_rdf_resolve_quad_pattern_1.KEY_CONTEXT_SOURCES);\n\n                if (!datasources.isEnded()) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 9;\n                return require('arrayify-stream')(datasources.iterator());\n\n              case 9:\n                datasourcesArray = _context.sent;\n\n                if (!(datasourcesArray.length === 1)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", datasourcesArray[0]);\n\n              case 12:\n                return _context.abrupt(\"return\", null);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getSingleSource(_x) {\n        return _getSingleSource.apply(this, arguments);\n      }\n\n      return getSingleSource;\n    }()\n    /**\n     * Get the type of a single source\n     * @param {ActionContext} context A context, can be null.\n     * @return {Promise<string>} A promise resolving to the type of the source, can be null if source is null.\n     */\n\n  }, {\n    key: \"getSingleSourceType\",\n    value: function () {\n      var _getSingleSourceType = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(context) {\n        var source;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getSingleSource(context);\n\n              case 2:\n                source = _context2.sent;\n                return _context2.abrupt(\"return\", source ? source.type : null);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getSingleSourceType(_x2) {\n        return _getSingleSourceType.apply(this, arguments);\n      }\n\n      return getSingleSourceType;\n    }()\n    /**\n     * Check if the given context has a single source of the given type.\n     * @param {ActionContext} context An optional context.\n     * @param {string} requiredType The required source type name.\n     * @return {boolean} If the given context has a single source of the given type.\n     */\n\n  }, {\n    key: \"singleSourceHasType\",\n    value: function () {\n      var _singleSourceHasType = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(context, requiredType) {\n        var actualType, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getSingleSourceType(context);\n\n              case 2:\n                actualType = _context3.sent;\n                result = actualType ? actualType === requiredType : false;\n                return _context3.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function singleSourceHasType(_x3, _x4) {\n        return _singleSourceHasType.apply(this, arguments);\n      }\n\n      return singleSourceHasType;\n    }()\n  }]);\n\n  return DataSourceUtils;\n}();\n\nexports.DataSourceUtils = DataSourceUtils;","map":null,"metadata":{},"sourceType":"script"}