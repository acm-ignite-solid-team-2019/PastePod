{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ActorQueryOperation_1 = require(\"./ActorQueryOperation\");\n/**\n * A base implementation for query operation actors for a specific operation type.\n */\n\n\nvar ActorQueryOperationTyped =\n/*#__PURE__*/\nfunction (_ActorQueryOperation_) {\n  _inherits(ActorQueryOperationTyped, _ActorQueryOperation_);\n\n  function ActorQueryOperationTyped(args, operationName) {\n    var _this;\n\n    _classCallCheck(this, ActorQueryOperationTyped);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationTyped).call(this, args));\n    _this.operationName = operationName;\n\n    if (!_this.operationName) {\n      throw new Error('A valid \"operationName\" argument must be provided.');\n    }\n\n    return _this;\n  }\n\n  _createClass(ActorQueryOperationTyped, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        var operation;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (action.operation) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Missing field \\'operation\\' in the query operation action: ' + require('util').inspect(action));\n\n              case 2:\n                if (!(action.operation.type !== this.operationName)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Actor ' + this.name + ' only supports ' + this.operationName + ' operations, but got ' + action.operation.type);\n\n              case 4:\n                operation = action.operation;\n                return _context.abrupt(\"return\", this.testOperation(operation, action.context));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var operation, output;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                operation = action.operation;\n                _context2.next = 3;\n                return this.runOperation(operation, action.context);\n\n              case 3:\n                output = _context2.sent;\n\n                if (output.metadata) {\n                  output.metadata = ActorQueryOperation_1.ActorQueryOperation.cachifyMetadata(output.metadata);\n                }\n\n                return _context2.abrupt(\"return\", output);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return ActorQueryOperationTyped;\n}(ActorQueryOperation_1.ActorQueryOperation);\n\nexports.ActorQueryOperationTyped = ActorQueryOperationTyped;","map":null,"metadata":{},"sourceType":"script"}