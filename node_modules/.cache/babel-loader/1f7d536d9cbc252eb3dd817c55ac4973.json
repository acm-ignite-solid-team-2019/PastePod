{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar actor_query_operation_union_1 = require(\"@comunica/actor-query-operation-union\");\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar data_model_1 = require(\"@rdfjs/data-model\");\n\nvar asynciterator_union_1 = require(\"asynciterator-union\");\n/**\n * A comunica Describe Subject Query Operation Actor.\n */\n\n\nvar ActorQueryOperationDescribeSubject =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationDescribeSubject, _bus_query_operation_);\n\n  function ActorQueryOperationDescribeSubject(args) {\n    _classCallCheck(this, ActorQueryOperationDescribeSubject);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationDescribeSubject).call(this, args, 'describe'));\n  }\n\n  _createClass(ActorQueryOperationDescribeSubject, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pattern, context) {\n        var _this = this;\n\n        var operations, variablePatterns, outputs, quadStream, metadata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Create separate construct queries for all non-variable terms\n                operations = pattern.terms.filter(function (term) {\n                  return term.termType !== 'Variable';\n                }).map(function (term) {\n                  // Transform each term to a separate construct operation with S ?p ?o patterns (BGP) for all terms\n                  var patterns = [data_model_1.triple(term, data_model_1.variable('__predicate'), data_model_1.variable('__object'))];\n                  patterns.forEach(function (templatePattern) {\n                    return templatePattern.type = 'pattern';\n                  });\n                  var templateOperation = {\n                    type: 'bgp',\n                    patterns: patterns\n                  }; // Create a construct query\n\n                  return {\n                    input: templateOperation,\n                    template: patterns,\n                    type: 'construct'\n                  };\n                }); // If we have variables in the term list,\n                // create one separate construct operation to determine these variables using the input pattern.\n\n                if (operations.length !== pattern.terms.length) {\n                  variablePatterns = [];\n                  pattern.terms.filter(function (term) {\n                    return term.termType === 'Variable';\n                  }).forEach(function (term, i) {\n                    // Transform each term to an S ?p ?o pattern in a non-conflicting way\n                    var patterns = [data_model_1.triple(term, data_model_1.variable('__predicate' + i), data_model_1.variable('__object' + i))];\n                    patterns.forEach(function (templatePattern) {\n                      return templatePattern.type = 'pattern';\n                    });\n                    variablePatterns = variablePatterns.concat(patterns);\n                  }); // Add a single construct for the variables\n                  // This requires a join between the input pattern and our variable patterns that form a simple BGP\n\n                  operations.push({\n                    input: {\n                      type: 'join',\n                      left: pattern.input,\n                      right: {\n                        type: 'bgp',\n                        patterns: variablePatterns\n                      }\n                    },\n                    template: variablePatterns,\n                    type: 'construct'\n                  });\n                } // Evaluate the construct queries\n\n\n                _context2.next = 4;\n                return Promise.all(operations.map(function (operation) {\n                  return _this.mediatorQueryOperation.mediate({\n                    operation: operation,\n                    context: context\n                  });\n                }));\n\n              case 4:\n                _context2.t0 = bus_query_operation_1.ActorQueryOperation.getSafeQuads;\n                outputs = _context2.sent.map(_context2.t0);\n                // Take the union of all quad streams\n                quadStream = new asynciterator_union_1.RoundRobinUnionIterator(outputs.map(function (output) {\n                  return output.quadStream;\n                })); // Take union of metadata\n\n                metadata = function metadata() {\n                  return Promise.all(outputs.map(function (output) {\n                    return output.metadata;\n                  }).filter(function (m) {\n                    return !!m;\n                  }).map(function (m) {\n                    return m();\n                  })).then(actor_query_operation_union_1.ActorQueryOperationUnion.unionMetadata);\n                };\n\n                return _context2.abrupt(\"return\", {\n                  type: 'quads',\n                  quadStream: quadStream,\n                  metadata: metadata\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }]);\n\n  return ActorQueryOperationDescribeSubject;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nexports.ActorQueryOperationDescribeSubject = ActorQueryOperationDescribeSubject;","map":null,"metadata":{},"sourceType":"script"}