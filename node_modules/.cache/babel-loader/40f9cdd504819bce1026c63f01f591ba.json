{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_rdf_parse_1 = require(\"@comunica/bus-rdf-parse\");\n\nvar data_model_1 = require(\"@rdfjs/data-model\");\n\nvar rdf_terms_1 = require(\"rdf-terms\");\n\nvar stream_1 = require(\"stream\");\n/**\n * A JSON-LD RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse JSON-LD-based RDF serializations and announce the presence of them by media type.\n */\n\n\nvar ActorRdfParseJsonLd =\n/*#__PURE__*/\nfunction (_bus_rdf_parse_1$Acto) {\n  _inherits(ActorRdfParseJsonLd, _bus_rdf_parse_1$Acto);\n\n  function ActorRdfParseJsonLd(args) {\n    var _this;\n\n    _classCallCheck(this, ActorRdfParseJsonLd);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfParseJsonLd).call(this, args));\n    _this.jsonLd = require('jsonld')();\n    return _this;\n  }\n\n  _createClass(ActorRdfParseJsonLd, [{\n    key: \"runHandle\",\n    value: function () {\n      var _runHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action, mediaType, context) {\n        var _this2 = this;\n\n        var quads, initialized;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                quads = new stream_1.Readable({\n                  objectMode: true\n                });\n                initialized = false;\n                quads._read =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  var jsonString, quadsArray, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, quad;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (initialized) {\n                            _context.next = 28;\n                            break;\n                          }\n\n                          initialized = true;\n                          _context.next = 4;\n                          return require('stream-to-string')(action.input);\n\n                        case 4:\n                          jsonString = _context.sent;\n                          _context.next = 7;\n                          return _this2.jsonLd.toRDF(JSON.parse(jsonString), {\n                            base: action.baseIRI\n                          });\n\n                        case 7:\n                          quadsArray = _context.sent;\n                          _iteratorNormalCompletion = true;\n                          _didIteratorError = false;\n                          _iteratorError = undefined;\n                          _context.prev = 11;\n\n                          for (_iterator = quadsArray[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            quad = _step.value;\n                            quads.push(rdf_terms_1.mapTerms(quad, ActorRdfParseJsonLd.mapTerm));\n                          }\n\n                          _context.next = 19;\n                          break;\n\n                        case 15:\n                          _context.prev = 15;\n                          _context.t0 = _context[\"catch\"](11);\n                          _didIteratorError = true;\n                          _iteratorError = _context.t0;\n\n                        case 19:\n                          _context.prev = 19;\n                          _context.prev = 20;\n\n                          if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                          }\n\n                        case 22:\n                          _context.prev = 22;\n\n                          if (!_didIteratorError) {\n                            _context.next = 25;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 25:\n                          return _context.finish(22);\n\n                        case 26:\n                          return _context.finish(19);\n\n                        case 27:\n                          quads.push(null);\n\n                        case 28:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, this, [[11, 15, 19, 27], [20,, 22, 26]]);\n                }));\n                return _context2.abrupt(\"return\", {\n                  quads: quads\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runHandle(_x, _x2, _x3) {\n        return _runHandle.apply(this, arguments);\n      }\n\n      return runHandle;\n    }()\n  }], [{\n    key: \"mapTerm\",\n    value: function mapTerm(term) {\n      switch (term.termType) {\n        case 'NamedNode':\n          return data_model_1.namedNode(term.value);\n\n        case 'BlankNode':\n          return data_model_1.blankNode(term.value.substr(2));\n        // Remove the '_:' prefix.\n\n        case 'Literal':\n          return data_model_1.literal(term.value, term.language || term.datatype);\n\n        /*case 'Variable':\n          return variable(term.value);*/\n        // Variables can not occur in JSON-LD bodies\n\n        case 'DefaultGraph':\n          return data_model_1.defaultGraph();\n      }\n    }\n  }]);\n\n  return ActorRdfParseJsonLd;\n}(bus_rdf_parse_1.ActorRdfParseFixedMediaTypes);\n\nexports.ActorRdfParseJsonLd = ActorRdfParseJsonLd;","map":null,"metadata":{},"sourceType":"script"}