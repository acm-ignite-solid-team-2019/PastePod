{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DataFactory = require(\"@rdfjs/data-model\");\n\nvar asynciterator_promiseproxy_1 = require(\"asynciterator-promiseproxy\");\n\nvar rdf_string_1 = require(\"rdf-string\");\n\nvar rdf_terms_1 = require(\"rdf-terms\");\n/**\n * A QPF quad source that uses a paged RDF dereference mediator\n * and a quad pattern to URL constructor\n * to acts as an RDFJS source.\n *\n * @see RDF.Source\n */\n\n\nvar MediatedQuadSource =\n/*#__PURE__*/\nfunction () {\n  function MediatedQuadSource(mediatorRdfDereferencePaged, uriConstructor, context) {\n    _classCallCheck(this, MediatedQuadSource);\n\n    this.mediatorRdfDereferencePaged = mediatorRdfDereferencePaged;\n    this.uriConstructor = uriConstructor;\n    this.context = context;\n  }\n  /**\n   * Check if the given pattern matches with the given quad.\n   * @param {Quad} pattern A quad pattern.\n   * @param {Quad} quad A quad.\n   * @return {boolean} If they match.\n   */\n\n\n  _createClass(MediatedQuadSource, [{\n    key: \"getDuplicateElementLinks\",\n\n    /**\n     * A helper function to find a hash with quad elements that have duplicate variables.\n     *\n     * @param {RDF.Term} subject An optional subject term.\n     * @param {RDF.Term} predicate An optional predicate term.\n     * @param {RDF.Term} object An optional object term.\n     * @param {RDF.Term} graph An optional graph term.\n     *\n     * @return {{[p: string]: string[]}} If no equal variable names are present in the four terms, this returns null.\n     *                                   Otherwise, this maps quad elements ('subject', 'predicate', 'object', 'graph')\n     *                                   to the list of quad elements it shares a variable name with.\n     *                                   If no links for a certain element exist, this element will\n     *                                   not be included in the hash.\n     *                                   Note 1: Quad elements will never have a link to themselves.\n     *                                           So this can never occur: { subject: [ 'subject'] },\n     *                                           instead 'null' would be returned.\n     *                                   Note 2: Links only exist in one direction,\n     *                                           this means that { subject: [ 'predicate'], predicate: [ 'subject' ] }\n     *                                           will not occur, instead only { subject: [ 'predicate'] }\n     *                                           will be returned.\n     */\n    value: function getDuplicateElementLinks(subject, predicate, object, graph) {\n      // Collect a variable to quad elements mapping.\n      var variableElements = {};\n      var duplicateVariables = false;\n      var input = {\n        subject: subject,\n        predicate: predicate,\n        object: object,\n        graph: graph\n      };\n\n      var _arr = Object.keys(input);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n\n        if (input[key] && input[key].termType === 'Variable') {\n          var val = rdf_string_1.termToString(input[key]);\n          var length = (variableElements[val] || (variableElements[val] = [])).push(key);\n          duplicateVariables = duplicateVariables || length > 1;\n        }\n      }\n\n      if (!duplicateVariables) {\n        return null;\n      } // Collect quad element to elements with equal variables mapping.\n\n\n      var duplicateElementLinks = {};\n\n      for (var variable in variableElements) {\n        var elements = variableElements[variable];\n        var remainingElements = elements.slice(1); // Only store the elements that have at least one equal element.\n\n        if (remainingElements.length) {\n          duplicateElementLinks[elements[0]] = remainingElements;\n        }\n      }\n\n      return duplicateElementLinks;\n    }\n  }, {\n    key: \"matchLazy\",\n    value: function matchLazy(subject, predicate, object, graph) {\n      var _this = this;\n\n      if (subject instanceof RegExp || predicate instanceof RegExp || object instanceof RegExp || graph instanceof RegExp) {\n        throw new Error(\"MediatedQuadSource does not support matching by regular expressions.\");\n      }\n\n      var quads = new asynciterator_promiseproxy_1.PromiseProxyIterator(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, output, filteredOutput, duplicateElementLinks;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.uriConstructor(subject, predicate, object, graph);\n\n              case 2:\n                url = _context.sent;\n                _context.next = 5;\n                return _this.mediatorRdfDereferencePaged.mediate({\n                  context: _this.context,\n                  url: url\n                });\n\n              case 5:\n                output = _context.sent;\n                // Emit metadata in the stream, so we can attach it later to the actor's promise output\n                quads.emit('metadata', output.firstPageMetadata); // The server is free to send any data in its response (such as metadata),\n                // including quads that do not match the given matter.\n                // Therefore, we have to filter away all non-matching quads here.\n\n                filteredOutput = output.data.filter(MediatedQuadSource.matchPattern.bind(null, DataFactory.quad(subject, predicate, object, graph || DataFactory.variable('v')))); // Detect duplicate variables in the pattern\n\n                duplicateElementLinks = _this.getDuplicateElementLinks(subject, predicate, object, graph); // If there are duplicate variables in the search pattern,\n                // make sure that we filter out the triples that don't have equal values for those triple elements,\n                // as QPF ignores variable names.\n\n                if (duplicateElementLinks) {\n                  filteredOutput = filteredOutput.filter(function (quad) {\n                    // No need to check the graph, because an equal element already would have to be found in s, p, or o.\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n\n                    try {\n                      for (var _iterator = rdf_terms_1.TRIPLE_TERM_NAMES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var element1 = _step.value;\n                        var _iteratorNormalCompletion2 = true;\n                        var _didIteratorError2 = false;\n                        var _iteratorError2 = undefined;\n\n                        try {\n                          for (var _iterator2 = (duplicateElementLinks[element1] || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var element2 = _step2.value;\n\n                            if (!quad[element1].equals(quad[element2])) {\n                              return false;\n                            }\n                          }\n                        } catch (err) {\n                          _didIteratorError2 = true;\n                          _iteratorError2 = err;\n                        } finally {\n                          try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                              _iterator2.return();\n                            }\n                          } finally {\n                            if (_didIteratorError2) {\n                              throw _iteratorError2;\n                            }\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _didIteratorError = true;\n                      _iteratorError = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                          _iterator.return();\n                        }\n                      } finally {\n                        if (_didIteratorError) {\n                          throw _iteratorError;\n                        }\n                      }\n                    }\n\n                    return true;\n                  });\n                }\n\n                return _context.abrupt(\"return\", filteredOutput);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      })));\n      quads.on('newListener', function (eventName) {\n        if (eventName === 'metadata') {\n          setImmediate(function () {\n            return quads._fillBuffer();\n          });\n        }\n      });\n      return quads;\n    }\n  }, {\n    key: \"match\",\n    value: function match(subject, predicate, object, graph) {\n      return this.matchLazy(subject, predicate, object, graph);\n    }\n  }], [{\n    key: \"matchPattern\",\n    value: function matchPattern(pattern, quad) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = rdf_terms_1.QUAD_TERM_NAMES[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var termName = _step3.value;\n          var patternTerm = pattern[termName];\n\n          if (patternTerm && patternTerm.termType !== 'Variable') {\n            var quadTerm = quad[termName];\n\n            if (!patternTerm.equals(quadTerm)) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return MediatedQuadSource;\n}();\n\nexports.MediatedQuadSource = MediatedQuadSource;","map":null,"metadata":{},"sourceType":"script"}