{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * A publish-subscribe bus for sending actions to actors\n * to test whether or not they can run an action.\n *\n * This bus does not run the action itself,\n * for that a {@link Mediator} can be used.\n *\n * @see Actor\n * @see Mediator\n *\n * @template A The actor type that can subscribe to the sub.\n * @template I The input type of an actor.\n * @template T The test type of an actor.\n * @template O The output type of an actor.\n */\n\nvar Bus =\n/*#__PURE__*/\nfunction () {\n  /**\n   * All enumerable properties from the `args` object are inherited to this bus.\n   *\n   * @param {IBusArgs} args Arguments object\n   * @param {string} args.name The name for the bus\n   * @throws When required arguments are missing.\n   */\n  function Bus(args) {\n    _classCallCheck(this, Bus);\n\n    this.actors = [];\n    this.observers = [];\n\n    require('lodash.assign')(this, args);\n  }\n  /**\n   * Subscribe the given actor to the bus.\n   * After this, the given actor can be unsubscribed from the bus by calling {@link Bus#unsubscribe}.\n   *\n   * An actor that is subscribed multiple times will exist that amount of times in the bus.\n   *\n   * @param {A} actor The actor to subscribe.\n   */\n\n\n  _createClass(Bus, [{\n    key: \"subscribe\",\n    value: function subscribe(actor) {\n      this.actors.push(actor);\n    }\n    /**\n     * Subscribe the given observer to the bus.\n     * After this, the given observer can be unsubscribed from the bus by calling {@link Bus#unsubscribeObserver}.\n     *\n     * An observer that is subscribed multiple times will exist that amount of times in the bus.\n     *\n     * @param {ActionObserver<I, O>} observer The observer to subscribe.\n     */\n\n  }, {\n    key: \"subscribeObserver\",\n    value: function subscribeObserver(observer) {\n      this.observers.push(observer);\n    }\n    /**\n     * Unsubscribe the given actor from the bus.\n     *\n     * An actor that is subscribed multiple times will be unsubscribed only once.\n     *\n     * @param {A} actor The actor to unsubscribe\n     * @return {boolean} If the given actor was successfully unsubscribed,\n     *         otherwise it was not subscribed before.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(actor) {\n      var index = this.actors.indexOf(actor);\n\n      if (index >= 0) {\n        this.actors.splice(index, 1);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Unsubscribe the given observer from the bus.\n     *\n     * An observer that is subscribed multiple times will be unsubscribed only once.\n     *\n     * @param {ActionObserver<I, O>} observer The observer to unsubscribe.\n     * @return {boolean} If the given observer was successfully unsubscribed,\n     *         otherwise it was not subscribed before.\n     */\n\n  }, {\n    key: \"unsubscribeObserver\",\n    value: function unsubscribeObserver(observer) {\n      var index = this.observers.indexOf(observer);\n\n      if (index >= 0) {\n        this.observers.splice(index, 1);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Publish an action to all actors in the bus to test if they can run the action.\n     *\n     * @param {I} action An action to publish\n     * @return {IActorReply<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest,\n     *         O extends IActorOutput>[]}\n     *         An array of reply objects. Each object contains a reference to the actor,\n     *         and a promise to its {@link Actor#test} result.\n     */\n\n  }, {\n    key: \"publish\",\n    value: function publish(action) {\n      return this.actors.map(function (actor) {\n        return {\n          actor: actor,\n          reply: actor.test(action)\n        };\n      });\n    }\n    /**\n     * Invoked when an action was run by an actor.\n     *\n     * @param actor               The action on which the {@link Actor#run} method was invoked.\n     * @param {I}          action The original action input.\n     * @param {Promise<O>} output A promise resolving to the final action output.\n     */\n\n  }, {\n    key: \"onRun\",\n    value: function onRun(actor, action, output) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.observers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var observer = _step.value;\n          observer.onRun(actor, action, output);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Bus;\n}();\n\nexports.Bus = Bus;","map":null,"metadata":{},"sourceType":"script"}