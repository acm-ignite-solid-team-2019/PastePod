{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar asynciterator_1 = require(\"asynciterator\");\n\nvar rdf_terms_1 = require(\"rdf-terms\");\n\nvar BindingsToQuadsIterator_1 = require(\"./BindingsToQuadsIterator\");\n/**\n * A comunica Construct Query Operation Actor.\n */\n\n\nvar ActorQueryOperationConstruct =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(ActorQueryOperationConstruct, _bus_query_operation_);\n\n  function ActorQueryOperationConstruct(args) {\n    _classCallCheck(this, ActorQueryOperationConstruct);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorQueryOperationConstruct).call(this, args, 'construct'));\n  }\n  /**\n   * Find all variables in a list of triple patterns.\n   * @param {Algebra.Pattern[]} patterns An array of triple patterns.\n   * @return {RDF.Variable[]} The variables in the triple patterns.\n   */\n\n\n  _createClass(ActorQueryOperationConstruct, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pattern, context) {\n        var variables, operation, output, quadStream, metadata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // If our template is empty or contains no variables, no need to resolve a query.\n                variables = ActorQueryOperationConstruct.getVariables(pattern.template);\n\n                if (!(variables.length === 0)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  metadata: function metadata() {\n                    return Promise.resolve({\n                      totalItems: 0\n                    });\n                  },\n                  quadStream: new asynciterator_1.EmptyIterator(),\n                  type: 'quads'\n                });\n\n              case 3:\n                // Apply a projection on our CONSTRUCT variables first, as the query may contain other variables as well.\n                operation = {\n                  type: 'project',\n                  input: pattern.input,\n                  variables: variables\n                }; // Evaluate the input query\n\n                _context2.t0 = bus_query_operation_1.ActorQueryOperation;\n                _context2.next = 7;\n                return this.mediatorQueryOperation.mediate({\n                  operation: operation,\n                  context: context\n                });\n\n              case 7:\n                _context2.t1 = _context2.sent;\n                output = _context2.t0.getSafeBindings.call(_context2.t0, _context2.t1);\n                // construct triples using the result based on the pattern.\n                quadStream = new BindingsToQuadsIterator_1.BindingsToQuadsIterator(pattern.template, output.bindingsStream); // Let the final metadata contain the estimated number of triples\n\n                metadata = null;\n\n                if (output.metadata) {\n                  metadata = function metadata() {\n                    return output.metadata().then(function (m) {\n                      if (m) {\n                        if (m.totalItems) {\n                          return Object.assign({}, m, {\n                            totalItems: m.totalItems * pattern.template.length\n                          });\n                        }\n\n                        return m;\n                      }\n\n                      return null;\n                    });\n                  };\n                }\n\n                return _context2.abrupt(\"return\", {\n                  metadata: metadata,\n                  quadStream: quadStream,\n                  type: 'quads'\n                });\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }], [{\n    key: \"getVariables\",\n    value: function getVariables(patterns) {\n      return rdf_terms_1.uniqTerms([].concat.apply([], patterns.map(function (pattern) {\n        return rdf_terms_1.getVariables(rdf_terms_1.getTerms(pattern));\n      })));\n    }\n  }]);\n\n  return ActorQueryOperationConstruct;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nexports.ActorQueryOperationConstruct = ActorQueryOperationConstruct;","map":null,"metadata":{},"sourceType":"script"}