{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nvar crypto_1 = require(\"crypto\");\n/**\n * A comunica Hash Query Operation Actor.\n */\n\n\nvar AbstractBindingHash =\n/*#__PURE__*/\nfunction (_bus_query_operation_) {\n  _inherits(AbstractBindingHash, _bus_query_operation_);\n\n  function AbstractBindingHash(args, operator) {\n    var _this;\n\n    _classCallCheck(this, AbstractBindingHash);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AbstractBindingHash).call(this, args, operator));\n\n    if (!AbstractBindingHash.doesHashAlgorithmExist(_this.hashAlgorithm)) {\n      throw new Error(\"The given hash algorithm is not present in this version of Node: \" + _this.hashAlgorithm);\n    }\n\n    if (!AbstractBindingHash.doesDigestAlgorithmExist(_this.digestAlgorithm)) {\n      throw new Error(\"The given digest algorithm is not present in this version of Node: \" + _this.digestAlgorithm);\n    }\n\n    return _this;\n  }\n  /**\n   * Check if the given hash algorithm (such as sha1) exists.\n   * @param {string} hashAlgorithm A hash algorithm.\n   * @return {boolean} If it exists.\n   */\n\n\n  _createClass(AbstractBindingHash, [{\n    key: \"testOperation\",\n    value: function () {\n      var _testOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(pattern, context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function testOperation(_x, _x2) {\n        return _testOperation.apply(this, arguments);\n      }\n\n      return testOperation;\n    }()\n  }, {\n    key: \"runOperation\",\n    value: function () {\n      var _runOperation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pattern, context) {\n        var output, bindingsStream;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = bus_query_operation_1.ActorQueryOperation;\n                _context2.next = 3;\n                return this.mediatorQueryOperation.mediate({\n                  operation: pattern.input,\n                  context: context\n                });\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                output = _context2.t0.getSafeBindings.call(_context2.t0, _context2.t1);\n                bindingsStream = output.bindingsStream.filter(this.newHashFilter(this.hashAlgorithm, this.digestAlgorithm));\n                return _context2.abrupt(\"return\", {\n                  type: 'bindings',\n                  bindingsStream: bindingsStream,\n                  metadata: output.metadata,\n                  variables: output.variables\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function runOperation(_x3, _x4) {\n        return _runOperation.apply(this, arguments);\n      }\n\n      return runOperation;\n    }()\n  }], [{\n    key: \"doesHashAlgorithmExist\",\n    value: function doesHashAlgorithmExist(hashAlgorithm) {\n      return crypto_1.getHashes().indexOf(hashAlgorithm) >= 0;\n    }\n    /**\n     * Check if the given digest (such as base64) algorithm exists.\n     * @param {string} digestAlgorithm A digest algorithm.\n     * @return {boolean} If it exists.\n     */\n\n  }, {\n    key: \"doesDigestAlgorithmExist\",\n    value: function doesDigestAlgorithmExist(digestAlgorithm) {\n      return [\"latin1\", \"hex\", \"base64\"].indexOf(digestAlgorithm) >= 0;\n    }\n    /**\n     * Create a string-based hash of the given object.\n     * @param {string} hashAlgorithm A hash algorithm.\n     * @param {string} digestAlgorithm A digest algorithm.\n     * @param object The object to hash.\n     * @return {string} The object's hash.\n     */\n\n  }, {\n    key: \"hash\",\n    value: function hash(hashAlgorithm, digestAlgorithm, object) {\n      var hash = crypto_1.createHash(hashAlgorithm);\n      hash.update(require('json-stable-stringify')(object));\n      return hash.digest(digestAlgorithm);\n    }\n  }]);\n\n  return AbstractBindingHash;\n}(bus_query_operation_1.ActorQueryOperationTypedMediated);\n\nexports.AbstractBindingHash = AbstractBindingHash;","map":null,"metadata":{},"sourceType":"script"}