{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_rdf_source_identifier_1 = require(\"@comunica/bus-rdf-source-identifier\");\n/**\n * A comunica SPARQL RDF Source Identifier Actor.\n */\n\n\nvar ActorRdfSourceIdentifierSparql =\n/*#__PURE__*/\nfunction (_bus_rdf_source_ident) {\n  _inherits(ActorRdfSourceIdentifierSparql, _bus_rdf_source_ident);\n\n  function ActorRdfSourceIdentifierSparql(args) {\n    _classCallCheck(this, ActorRdfSourceIdentifierSparql);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfSourceIdentifierSparql).call(this, args));\n  }\n\n  _createClass(ActorRdfSourceIdentifierSparql, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        var url, headers, httpAction, httpResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (action.sourceValue.startsWith('http')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Actor \".concat(this.name, \" can only detect SPARQL endpoints hosted via HTTP(S).\"));\n\n              case 2:\n                url = action.sourceValue + '?query=' + encodeURIComponent('ASK { ?s a ?o }');\n                headers = new Headers();\n                headers.append('Accept', 'application/sparql-results+json');\n                httpAction = {\n                  context: action.context,\n                  input: url,\n                  init: {\n                    headers: headers,\n                    method: 'HEAD'\n                  }\n                };\n                _context.next = 8;\n                return this.mediatorHttp.mediate(httpAction);\n\n              case 8:\n                httpResponse = _context.sent;\n\n                if (!(!httpResponse.ok || httpResponse.headers.get('Content-Type').indexOf('application/sparql-results+json') < 0)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"\".concat(action.sourceValue, \" is not a SPARQL endpoint\"));\n\n              case 11:\n                return _context.abrupt(\"return\", {\n                  priority: this.priority\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", {\n                  sourceType: 'sparql'\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return ActorRdfSourceIdentifierSparql;\n}(bus_rdf_source_identifier_1.ActorRdfSourceIdentifier);\n\nexports.ActorRdfSourceIdentifierSparql = ActorRdfSourceIdentifierSparql;","map":null,"metadata":{},"sourceType":"script"}