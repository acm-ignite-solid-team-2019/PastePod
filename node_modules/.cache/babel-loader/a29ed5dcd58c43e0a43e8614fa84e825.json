{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // https://www.w3.org/TR/xpath-functions/#func-matches\n// https://www.w3.org/TR/xpath-functions/#flags\n\nfunction matches(text, pattern, flags) {\n  // TODO: Only flags 'i' and 'm' match between XPath and JS.\n  // 's', 'x', 'q', would need proper implementation.\n  var reg = new RegExp(pattern, flags);\n  return reg.test(text);\n}\n\nexports.matches = matches; // TODO: Not an XPath function\n// TODO: Publish as package\n// https://www.ietf.org/rfc/rfc4647.txt\n// https://www.w3.org/TR/sparql11-query/#func-langMatches\n\nfunction langMatches(tag, range) {\n  var langTags = tag.split('-');\n  var rangeTags = range.split('-');\n\n  if (!_matchLangTag(rangeTags[0], langTags[0]) && !_isWildCard(langTags[0])) {\n    return false;\n  }\n\n  var lI = 1;\n  var rI = 1;\n\n  while (rI < rangeTags.length) {\n    if (_isWildCard(rangeTags[rI])) {\n      rI++;\n      continue;\n    }\n\n    if (lI === langTags.length) {\n      return false;\n    }\n\n    if (_matchLangTag(rangeTags[rI], langTags[lI])) {\n      lI++;\n      rI++;\n      continue;\n    }\n\n    if (langTags[lI].length === 1) {\n      return false;\n    }\n\n    lI++;\n  }\n\n  return true;\n}\n\nexports.langMatches = langMatches;\n\nfunction _isWildCard(tag) {\n  return tag === '*';\n}\n\nfunction _matchLangTag(left, right) {\n  var matchInitial = new RegExp(\"/\".concat(left, \"/\"), 'i');\n  return matchInitial.test(\"/\".concat(right, \"/\"));\n}\n/**\n * Formats a timezone string into a XML DayTimeDuration\n *\n * TODO: Test\n * Used in fn:timezone\n * http://www.datypic.com/sc/xsd/t-xsd_dayTimeDuration.html\n */\n\n\nfunction formatDayTimeDuration(timezone) {\n  if (!timezone) {\n    return undefined;\n  }\n\n  if (timezone[0] === 'Z') {\n    return 'PT0S';\n  } else {\n    // Split string\n    var _timezone = _slicedToArray(timezone, 6),\n        sign = _timezone[0],\n        h1Raw = _timezone[1],\n        h2Raw = _timezone[2],\n        _ = _timezone[3],\n        m1Raw = _timezone[4],\n        m2Raw = _timezone[5]; // Cut of leading zero, set to empty string if 0, and append H;\n\n\n    var h1 = h1Raw !== '0' ? h1Raw : '';\n    var h2 = h1 || h2Raw !== '0' ? h2Raw : '';\n    var hours = h1 + h2 ? h1 + h2 + 'H' : ''; // Same as in hours\n\n    var m1 = m1Raw !== '0' ? m1Raw : '';\n    var m2 = m1 || m2Raw !== '0' ? m2Raw : '';\n    var minutes = m1 + m2 ? m1 + m2 + 'M' : ''; // Concat sign and time and mandatory separators\n\n    var time = \"\".concat(hours).concat(minutes);\n    var signNoPlus = sign === '-' ? '-' : '';\n    return \"\".concat(signNoPlus, \"PT\").concat(time);\n  }\n}\n\nexports.formatDayTimeDuration = formatDayTimeDuration;","map":null,"metadata":{},"sourceType":"script"}