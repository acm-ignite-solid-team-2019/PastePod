{"ast":null,"code":"/* parser generated by jison 0.4.18 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar SparqlParser = function () {\n  var o = function o(k, v, _o, l) {\n    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {\n      ;\n    }\n\n    return _o;\n  },\n      $V0 = [6, 12, 15, 24, 34, 43, 48, 99, 109, 112, 114, 115, 124, 125, 130, 298, 299, 300, 301, 302],\n      $V1 = [2, 196],\n      $V2 = [99, 109, 112, 114, 115, 124, 125, 130, 298, 299, 300, 301, 302],\n      $V3 = [1, 18],\n      $V4 = [1, 27],\n      $V5 = [6, 83],\n      $V6 = [38, 39, 51],\n      $V7 = [38, 51],\n      $V8 = [1, 55],\n      $V9 = [1, 57],\n      $Va = [1, 53],\n      $Vb = [1, 56],\n      $Vc = [28, 29, 293],\n      $Vd = [13, 16, 286],\n      $Ve = [111, 133, 296, 303],\n      $Vf = [13, 16, 111, 133, 286],\n      $Vg = [1, 80],\n      $Vh = [1, 84],\n      $Vi = [1, 86],\n      $Vj = [111, 133, 296, 297, 303],\n      $Vk = [13, 16, 111, 133, 286, 297],\n      $Vl = [1, 92],\n      $Vm = [2, 236],\n      $Vn = [1, 91],\n      $Vo = [13, 16, 28, 29, 80, 86, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $Vp = [6, 38, 39, 51, 61, 68, 71, 79, 81, 83],\n      $Vq = [6, 13, 16, 28, 38, 39, 51, 61, 68, 71, 79, 81, 83, 286],\n      $Vr = [6, 13, 16, 28, 29, 31, 32, 38, 39, 41, 51, 61, 68, 71, 79, 80, 81, 83, 86, 92, 108, 111, 124, 125, 127, 132, 159, 160, 162, 165, 166, 183, 187, 208, 213, 215, 216, 218, 219, 223, 227, 231, 246, 251, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 304, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316],\n      $Vs = [1, 107],\n      $Vt = [1, 108],\n      $Vu = [6, 13, 16, 28, 29, 39, 41, 80, 83, 86, 111, 159, 160, 162, 165, 166, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 304],\n      $Vv = [2, 295],\n      $Vw = [1, 125],\n      $Vx = [1, 123],\n      $Vy = [6, 183],\n      $Vz = [2, 312],\n      $VA = [2, 300],\n      $VB = [38, 127],\n      $VC = [6, 41, 68, 71, 79, 81, 83],\n      $VD = [2, 238],\n      $VE = [1, 139],\n      $VF = [1, 141],\n      $VG = [1, 151],\n      $VH = [1, 157],\n      $VI = [1, 160],\n      $VJ = [1, 156],\n      $VK = [1, 158],\n      $VL = [1, 154],\n      $VM = [1, 155],\n      $VN = [1, 161],\n      $VO = [1, 162],\n      $VP = [1, 165],\n      $VQ = [1, 166],\n      $VR = [1, 167],\n      $VS = [1, 168],\n      $VT = [1, 169],\n      $VU = [1, 170],\n      $VV = [1, 171],\n      $VW = [1, 172],\n      $VX = [1, 173],\n      $VY = [1, 174],\n      $VZ = [1, 175],\n      $V_ = [1, 176],\n      $V$ = [6, 61, 68, 71, 79, 81, 83],\n      $V01 = [28, 29, 38, 39, 51],\n      $V11 = [13, 16, 28, 29, 80, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 316, 317, 318, 319, 320, 321],\n      $V21 = [2, 409],\n      $V31 = [1, 189],\n      $V41 = [1, 190],\n      $V51 = [1, 191],\n      $V61 = [13, 16, 41, 80, 92, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $V71 = [41, 86],\n      $V81 = [28, 32],\n      $V91 = [6, 108, 183],\n      $Va1 = [41, 111],\n      $Vb1 = [6, 41, 71, 79, 81, 83],\n      $Vc1 = [2, 324],\n      $Vd1 = [2, 316],\n      $Ve1 = [1, 226],\n      $Vf1 = [1, 228],\n      $Vg1 = [41, 111, 304],\n      $Vh1 = [13, 16, 28, 29, 32, 39, 41, 80, 83, 86, 111, 159, 160, 162, 165, 166, 183, 187, 208, 213, 215, 216, 218, 219, 251, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 304],\n      $Vi1 = [13, 16, 28, 29, 31, 32, 39, 41, 80, 83, 86, 92, 111, 159, 160, 162, 165, 166, 183, 187, 208, 213, 215, 216, 218, 219, 223, 227, 231, 246, 251, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 304, 307, 310, 311, 312, 313, 314, 315, 316],\n      $Vj1 = [13, 16, 28, 29, 31, 32, 39, 41, 80, 83, 86, 92, 111, 159, 160, 162, 165, 166, 183, 187, 208, 213, 215, 216, 218, 219, 223, 227, 231, 246, 251, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 304, 307, 310, 311, 312, 313, 314, 315, 316],\n      $Vk1 = [31, 32, 183, 223, 251],\n      $Vl1 = [31, 32, 183, 223, 227, 251],\n      $Vm1 = [31, 32, 183, 223, 227, 231, 246, 251, 268, 280, 281, 282, 283, 284, 285, 310, 311, 312, 313, 314, 315, 316],\n      $Vn1 = [31, 32, 183, 223, 227, 231, 246, 251, 268, 280, 281, 282, 283, 284, 285, 293, 307, 310, 311, 312, 313, 314, 315, 316],\n      $Vo1 = [1, 260],\n      $Vp1 = [1, 261],\n      $Vq1 = [1, 263],\n      $Vr1 = [1, 264],\n      $Vs1 = [1, 265],\n      $Vt1 = [1, 266],\n      $Vu1 = [1, 268],\n      $Vv1 = [1, 269],\n      $Vw1 = [2, 416],\n      $Vx1 = [1, 271],\n      $Vy1 = [1, 272],\n      $Vz1 = [1, 273],\n      $VA1 = [1, 279],\n      $VB1 = [1, 274],\n      $VC1 = [1, 275],\n      $VD1 = [1, 276],\n      $VE1 = [1, 277],\n      $VF1 = [1, 278],\n      $VG1 = [1, 286],\n      $VH1 = [1, 299],\n      $VI1 = [6, 41, 79, 81, 83],\n      $VJ1 = [1, 316],\n      $VK1 = [1, 315],\n      $VL1 = [39, 41, 83, 111, 159, 160, 162, 165, 166],\n      $VM1 = [1, 324],\n      $VN1 = [1, 325],\n      $VO1 = [41, 111, 183, 216, 304],\n      $VP1 = [2, 354],\n      $VQ1 = [13, 16, 28, 29, 32, 80, 86, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $VR1 = [13, 16, 28, 29, 32, 39, 41, 80, 83, 86, 111, 159, 160, 162, 165, 166, 183, 215, 216, 218, 219, 251, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 304],\n      $VS1 = [13, 16, 28, 29, 80, 208, 246, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 310, 316, 317, 318, 319, 320, 321],\n      $VT1 = [1, 349],\n      $VU1 = [1, 350],\n      $VV1 = [1, 352],\n      $VW1 = [1, 351],\n      $VX1 = [6, 13, 16, 28, 29, 31, 32, 39, 41, 68, 71, 74, 76, 79, 80, 81, 83, 86, 111, 159, 160, 162, 165, 166, 183, 215, 218, 219, 223, 227, 231, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 263, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 304, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321],\n      $VY1 = [1, 360],\n      $VZ1 = [1, 359],\n      $V_1 = [29, 86],\n      $V$1 = [13, 16, 32, 41, 80, 92, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $V02 = [29, 41],\n      $V12 = [2, 315],\n      $V22 = [6, 41, 83],\n      $V32 = [6, 13, 16, 29, 41, 71, 79, 81, 83, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 286, 316, 317, 318, 319, 320, 321],\n      $V42 = [6, 13, 16, 28, 29, 39, 41, 71, 74, 76, 79, 80, 81, 83, 86, 111, 159, 160, 162, 165, 166, 215, 218, 219, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 304, 316, 317, 318, 319, 320, 321],\n      $V52 = [6, 13, 16, 28, 29, 41, 68, 71, 79, 81, 83, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 286, 316, 317, 318, 319, 320, 321],\n      $V62 = [6, 13, 16, 28, 29, 31, 32, 39, 41, 61, 68, 71, 74, 76, 79, 80, 81, 83, 86, 111, 159, 160, 162, 165, 166, 183, 215, 218, 219, 223, 227, 231, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 263, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 304, 305, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321],\n      $V72 = [13, 16, 29, 187, 208, 213, 286],\n      $V82 = [2, 366],\n      $V92 = [1, 401],\n      $Va2 = [39, 41, 83, 111, 159, 160, 162, 165, 166, 304],\n      $Vb2 = [13, 16, 28, 29, 32, 39, 41, 80, 83, 86, 111, 159, 160, 162, 165, 166, 183, 187, 215, 216, 218, 219, 251, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 304],\n      $Vc2 = [13, 16, 28, 29, 80, 208, 246, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 310, 316, 317, 318, 319, 320, 321],\n      $Vd2 = [1, 450],\n      $Ve2 = [1, 447],\n      $Vf2 = [1, 448],\n      $Vg2 = [13, 16, 28, 29, 39, 41, 80, 83, 86, 111, 159, 160, 162, 165, 166, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $Vh2 = [13, 16, 28, 286],\n      $Vi2 = [13, 16, 28, 29, 39, 41, 80, 83, 86, 111, 159, 160, 162, 165, 166, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 304],\n      $Vj2 = [2, 327],\n      $Vk2 = [39, 41, 83, 111, 159, 160, 162, 165, 166, 183, 216, 304],\n      $Vl2 = [6, 13, 16, 28, 29, 41, 74, 76, 79, 81, 83, 248, 249, 250, 252, 254, 255, 257, 258, 261, 263, 286, 316, 317, 318, 319, 320, 321],\n      $Vm2 = [2, 322],\n      $Vn2 = [13, 16, 29, 187, 208, 286],\n      $Vo2 = [13, 16, 32, 80, 92, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $Vp2 = [13, 16, 28, 29, 41, 80, 86, 111, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],\n      $Vq2 = [13, 16, 28, 29, 32, 80, 86, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 306, 307],\n      $Vr2 = [13, 16, 28, 29, 32, 80, 86, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 306, 307, 309, 310],\n      $Vs2 = [1, 561],\n      $Vt2 = [1, 562],\n      $Vu2 = [2, 310],\n      $Vv2 = [13, 16, 32, 187, 213, 286];\n\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"QueryOrUpdate\": 3,\n      \"Prologue\": 4,\n      \"QueryOrUpdate_group0\": 5,\n      \"EOF\": 6,\n      \"Prologue_repetition0\": 7,\n      \"Query\": 8,\n      \"Query_group0\": 9,\n      \"Query_option0\": 10,\n      \"BaseDecl\": 11,\n      \"BASE\": 12,\n      \"IRIREF\": 13,\n      \"PrefixDecl\": 14,\n      \"PREFIX\": 15,\n      \"PNAME_NS\": 16,\n      \"SelectQuery\": 17,\n      \"SelectClause\": 18,\n      \"SelectQuery_repetition0\": 19,\n      \"WhereClause\": 20,\n      \"SolutionModifier\": 21,\n      \"SubSelect\": 22,\n      \"SubSelect_option0\": 23,\n      \"SELECT\": 24,\n      \"SelectClause_option0\": 25,\n      \"SelectClause_group0\": 26,\n      \"SelectClauseItem\": 27,\n      \"VAR\": 28,\n      \"(\": 29,\n      \"Expression\": 30,\n      \"AS\": 31,\n      \")\": 32,\n      \"ConstructQuery\": 33,\n      \"CONSTRUCT\": 34,\n      \"ConstructTemplate\": 35,\n      \"ConstructQuery_repetition0\": 36,\n      \"ConstructQuery_repetition1\": 37,\n      \"WHERE\": 38,\n      \"{\": 39,\n      \"ConstructQuery_option0\": 40,\n      \"}\": 41,\n      \"DescribeQuery\": 42,\n      \"DESCRIBE\": 43,\n      \"DescribeQuery_group0\": 44,\n      \"DescribeQuery_repetition0\": 45,\n      \"DescribeQuery_option0\": 46,\n      \"AskQuery\": 47,\n      \"ASK\": 48,\n      \"AskQuery_repetition0\": 49,\n      \"DatasetClause\": 50,\n      \"FROM\": 51,\n      \"DatasetClause_option0\": 52,\n      \"iri\": 53,\n      \"WhereClause_option0\": 54,\n      \"GroupGraphPattern\": 55,\n      \"SolutionModifier_option0\": 56,\n      \"SolutionModifier_option1\": 57,\n      \"SolutionModifier_option2\": 58,\n      \"SolutionModifier_option3\": 59,\n      \"GroupClause\": 60,\n      \"GROUP\": 61,\n      \"BY\": 62,\n      \"GroupClause_repetition_plus0\": 63,\n      \"GroupCondition\": 64,\n      \"BuiltInCall\": 65,\n      \"FunctionCall\": 66,\n      \"HavingClause\": 67,\n      \"HAVING\": 68,\n      \"HavingClause_repetition_plus0\": 69,\n      \"OrderClause\": 70,\n      \"ORDER\": 71,\n      \"OrderClause_repetition_plus0\": 72,\n      \"OrderCondition\": 73,\n      \"ASC\": 74,\n      \"BrackettedExpression\": 75,\n      \"DESC\": 76,\n      \"Constraint\": 77,\n      \"LimitOffsetClauses\": 78,\n      \"LIMIT\": 79,\n      \"INTEGER\": 80,\n      \"OFFSET\": 81,\n      \"ValuesClause\": 82,\n      \"VALUES\": 83,\n      \"InlineData\": 84,\n      \"InlineData_repetition0\": 85,\n      \"NIL\": 86,\n      \"InlineData_repetition1\": 87,\n      \"InlineData_repetition_plus2\": 88,\n      \"InlineData_repetition3\": 89,\n      \"DataBlockValue\": 90,\n      \"Literal\": 91,\n      \"UNDEF\": 92,\n      \"DataBlockValueList\": 93,\n      \"DataBlockValueList_repetition_plus0\": 94,\n      \"Update\": 95,\n      \"Update_repetition0\": 96,\n      \"Update1\": 97,\n      \"Update_option0\": 98,\n      \"LOAD\": 99,\n      \"Update1_option0\": 100,\n      \"Update1_option1\": 101,\n      \"Update1_group0\": 102,\n      \"Update1_option2\": 103,\n      \"GraphRefAll\": 104,\n      \"Update1_group1\": 105,\n      \"Update1_option3\": 106,\n      \"GraphOrDefault\": 107,\n      \"TO\": 108,\n      \"CREATE\": 109,\n      \"Update1_option4\": 110,\n      \"GRAPH\": 111,\n      \"INSERTDATA\": 112,\n      \"QuadPattern\": 113,\n      \"DELETEDATA\": 114,\n      \"DELETEWHERE\": 115,\n      \"Update1_option5\": 116,\n      \"InsertClause\": 117,\n      \"Update1_option6\": 118,\n      \"Update1_repetition0\": 119,\n      \"Update1_option7\": 120,\n      \"DeleteClause\": 121,\n      \"Update1_option8\": 122,\n      \"Update1_repetition1\": 123,\n      \"DELETE\": 124,\n      \"INSERT\": 125,\n      \"UsingClause\": 126,\n      \"USING\": 127,\n      \"UsingClause_option0\": 128,\n      \"WithClause\": 129,\n      \"WITH\": 130,\n      \"IntoGraphClause\": 131,\n      \"INTO\": 132,\n      \"DEFAULT\": 133,\n      \"GraphOrDefault_option0\": 134,\n      \"GraphRefAll_group0\": 135,\n      \"QuadPattern_option0\": 136,\n      \"QuadPattern_repetition0\": 137,\n      \"QuadsNotTriples\": 138,\n      \"QuadsNotTriples_group0\": 139,\n      \"QuadsNotTriples_option0\": 140,\n      \"QuadsNotTriples_option1\": 141,\n      \"QuadsNotTriples_option2\": 142,\n      \"TriplesTemplate\": 143,\n      \"TriplesTemplate_repetition0\": 144,\n      \"TriplesSameSubject\": 145,\n      \"TriplesTemplate_option0\": 146,\n      \"GroupGraphPatternSub\": 147,\n      \"GroupGraphPatternSub_option0\": 148,\n      \"GroupGraphPatternSub_repetition0\": 149,\n      \"GroupGraphPatternSubTail\": 150,\n      \"GraphPatternNotTriples\": 151,\n      \"GroupGraphPatternSubTail_option0\": 152,\n      \"GroupGraphPatternSubTail_option1\": 153,\n      \"TriplesBlock\": 154,\n      \"TriplesBlock_repetition0\": 155,\n      \"TriplesSameSubjectPath\": 156,\n      \"TriplesBlock_option0\": 157,\n      \"GraphPatternNotTriples_repetition0\": 158,\n      \"OPTIONAL\": 159,\n      \"MINUS\": 160,\n      \"GraphPatternNotTriples_group0\": 161,\n      \"SERVICE\": 162,\n      \"GraphPatternNotTriples_option0\": 163,\n      \"GraphPatternNotTriples_group1\": 164,\n      \"FILTER\": 165,\n      \"BIND\": 166,\n      \"FunctionCall_option0\": 167,\n      \"FunctionCall_repetition0\": 168,\n      \"ExpressionList\": 169,\n      \"ExpressionList_repetition0\": 170,\n      \"ConstructTemplate_option0\": 171,\n      \"ConstructTriples\": 172,\n      \"ConstructTriples_repetition0\": 173,\n      \"ConstructTriples_option0\": 174,\n      \"VarOrTerm\": 175,\n      \"PropertyListNotEmpty\": 176,\n      \"TriplesNode\": 177,\n      \"PropertyList\": 178,\n      \"PropertyList_option0\": 179,\n      \"VerbObjectList\": 180,\n      \"PropertyListNotEmpty_repetition0\": 181,\n      \"SemiOptionalVerbObjectList\": 182,\n      \";\": 183,\n      \"SemiOptionalVerbObjectList_option0\": 184,\n      \"Verb\": 185,\n      \"ObjectList\": 186,\n      \"a\": 187,\n      \"ObjectList_repetition0\": 188,\n      \"GraphNode\": 189,\n      \"PropertyListPathNotEmpty\": 190,\n      \"TriplesNodePath\": 191,\n      \"TriplesSameSubjectPath_option0\": 192,\n      \"PropertyListPathNotEmpty_group0\": 193,\n      \"PropertyListPathNotEmpty_repetition0\": 194,\n      \"GraphNodePath\": 195,\n      \"PropertyListPathNotEmpty_repetition1\": 196,\n      \"PropertyListPathNotEmptyTail\": 197,\n      \"PropertyListPathNotEmptyTail_group0\": 198,\n      \"Path\": 199,\n      \"Path_repetition0\": 200,\n      \"PathSequence\": 201,\n      \"PathSequence_repetition0\": 202,\n      \"PathEltOrInverse\": 203,\n      \"PathElt\": 204,\n      \"PathPrimary\": 205,\n      \"PathElt_option0\": 206,\n      \"PathEltOrInverse_option0\": 207,\n      \"!\": 208,\n      \"PathNegatedPropertySet\": 209,\n      \"PathOneInPropertySet\": 210,\n      \"PathNegatedPropertySet_repetition0\": 211,\n      \"PathNegatedPropertySet_option0\": 212,\n      \"^\": 213,\n      \"TriplesNode_repetition_plus0\": 214,\n      \"[\": 215,\n      \"]\": 216,\n      \"TriplesNodePath_repetition_plus0\": 217,\n      \"BLANK_NODE_LABEL\": 218,\n      \"ANON\": 219,\n      \"ConditionalAndExpression\": 220,\n      \"Expression_repetition0\": 221,\n      \"ExpressionTail\": 222,\n      \"||\": 223,\n      \"RelationalExpression\": 224,\n      \"ConditionalAndExpression_repetition0\": 225,\n      \"ConditionalAndExpressionTail\": 226,\n      \"&&\": 227,\n      \"AdditiveExpression\": 228,\n      \"RelationalExpression_group0\": 229,\n      \"RelationalExpression_option0\": 230,\n      \"IN\": 231,\n      \"MultiplicativeExpression\": 232,\n      \"AdditiveExpression_repetition0\": 233,\n      \"AdditiveExpressionTail\": 234,\n      \"AdditiveExpressionTail_group0\": 235,\n      \"NumericLiteralPositive\": 236,\n      \"AdditiveExpressionTail_repetition0\": 237,\n      \"NumericLiteralNegative\": 238,\n      \"AdditiveExpressionTail_repetition1\": 239,\n      \"UnaryExpression\": 240,\n      \"MultiplicativeExpression_repetition0\": 241,\n      \"MultiplicativeExpressionTail\": 242,\n      \"MultiplicativeExpressionTail_group0\": 243,\n      \"UnaryExpression_option0\": 244,\n      \"PrimaryExpression\": 245,\n      \"-\": 246,\n      \"Aggregate\": 247,\n      \"FUNC_ARITY0\": 248,\n      \"FUNC_ARITY1\": 249,\n      \"FUNC_ARITY2\": 250,\n      \",\": 251,\n      \"IF\": 252,\n      \"BuiltInCall_group0\": 253,\n      \"BOUND\": 254,\n      \"BNODE\": 255,\n      \"BuiltInCall_option0\": 256,\n      \"EXISTS\": 257,\n      \"COUNT\": 258,\n      \"Aggregate_option0\": 259,\n      \"Aggregate_group0\": 260,\n      \"FUNC_AGGREGATE\": 261,\n      \"Aggregate_option1\": 262,\n      \"GROUP_CONCAT\": 263,\n      \"Aggregate_option2\": 264,\n      \"Aggregate_option3\": 265,\n      \"GroupConcatSeparator\": 266,\n      \"SEPARATOR\": 267,\n      \"=\": 268,\n      \"String\": 269,\n      \"LANGTAG\": 270,\n      \"^^\": 271,\n      \"DECIMAL\": 272,\n      \"DOUBLE\": 273,\n      \"true\": 274,\n      \"false\": 275,\n      \"STRING_LITERAL1\": 276,\n      \"STRING_LITERAL2\": 277,\n      \"STRING_LITERAL_LONG1\": 278,\n      \"STRING_LITERAL_LONG2\": 279,\n      \"INTEGER_POSITIVE\": 280,\n      \"DECIMAL_POSITIVE\": 281,\n      \"DOUBLE_POSITIVE\": 282,\n      \"INTEGER_NEGATIVE\": 283,\n      \"DECIMAL_NEGATIVE\": 284,\n      \"DOUBLE_NEGATIVE\": 285,\n      \"PNAME_LN\": 286,\n      \"QueryOrUpdate_group0_option0\": 287,\n      \"Prologue_repetition0_group0\": 288,\n      \"SelectClause_option0_group0\": 289,\n      \"DISTINCT\": 290,\n      \"REDUCED\": 291,\n      \"SelectClause_group0_repetition_plus0\": 292,\n      \"*\": 293,\n      \"DescribeQuery_group0_repetition_plus0_group0\": 294,\n      \"DescribeQuery_group0_repetition_plus0\": 295,\n      \"NAMED\": 296,\n      \"SILENT\": 297,\n      \"CLEAR\": 298,\n      \"DROP\": 299,\n      \"ADD\": 300,\n      \"MOVE\": 301,\n      \"COPY\": 302,\n      \"ALL\": 303,\n      \".\": 304,\n      \"UNION\": 305,\n      \"|\": 306,\n      \"/\": 307,\n      \"PathElt_option0_group0\": 308,\n      \"?\": 309,\n      \"+\": 310,\n      \"!=\": 311,\n      \"<\": 312,\n      \">\": 313,\n      \"<=\": 314,\n      \">=\": 315,\n      \"NOT\": 316,\n      \"CONCAT\": 317,\n      \"COALESCE\": 318,\n      \"SUBSTR\": 319,\n      \"REGEX\": 320,\n      \"REPLACE\": 321,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      6: \"EOF\",\n      12: \"BASE\",\n      13: \"IRIREF\",\n      15: \"PREFIX\",\n      16: \"PNAME_NS\",\n      24: \"SELECT\",\n      28: \"VAR\",\n      29: \"(\",\n      31: \"AS\",\n      32: \")\",\n      34: \"CONSTRUCT\",\n      38: \"WHERE\",\n      39: \"{\",\n      41: \"}\",\n      43: \"DESCRIBE\",\n      48: \"ASK\",\n      51: \"FROM\",\n      61: \"GROUP\",\n      62: \"BY\",\n      68: \"HAVING\",\n      71: \"ORDER\",\n      74: \"ASC\",\n      76: \"DESC\",\n      79: \"LIMIT\",\n      80: \"INTEGER\",\n      81: \"OFFSET\",\n      83: \"VALUES\",\n      86: \"NIL\",\n      92: \"UNDEF\",\n      99: \"LOAD\",\n      108: \"TO\",\n      109: \"CREATE\",\n      111: \"GRAPH\",\n      112: \"INSERTDATA\",\n      114: \"DELETEDATA\",\n      115: \"DELETEWHERE\",\n      124: \"DELETE\",\n      125: \"INSERT\",\n      127: \"USING\",\n      130: \"WITH\",\n      132: \"INTO\",\n      133: \"DEFAULT\",\n      159: \"OPTIONAL\",\n      160: \"MINUS\",\n      162: \"SERVICE\",\n      165: \"FILTER\",\n      166: \"BIND\",\n      183: \";\",\n      187: \"a\",\n      208: \"!\",\n      213: \"^\",\n      215: \"[\",\n      216: \"]\",\n      218: \"BLANK_NODE_LABEL\",\n      219: \"ANON\",\n      223: \"||\",\n      227: \"&&\",\n      231: \"IN\",\n      246: \"-\",\n      248: \"FUNC_ARITY0\",\n      249: \"FUNC_ARITY1\",\n      250: \"FUNC_ARITY2\",\n      251: \",\",\n      252: \"IF\",\n      254: \"BOUND\",\n      255: \"BNODE\",\n      257: \"EXISTS\",\n      258: \"COUNT\",\n      261: \"FUNC_AGGREGATE\",\n      263: \"GROUP_CONCAT\",\n      267: \"SEPARATOR\",\n      268: \"=\",\n      270: \"LANGTAG\",\n      271: \"^^\",\n      272: \"DECIMAL\",\n      273: \"DOUBLE\",\n      274: \"true\",\n      275: \"false\",\n      276: \"STRING_LITERAL1\",\n      277: \"STRING_LITERAL2\",\n      278: \"STRING_LITERAL_LONG1\",\n      279: \"STRING_LITERAL_LONG2\",\n      280: \"INTEGER_POSITIVE\",\n      281: \"DECIMAL_POSITIVE\",\n      282: \"DOUBLE_POSITIVE\",\n      283: \"INTEGER_NEGATIVE\",\n      284: \"DECIMAL_NEGATIVE\",\n      285: \"DOUBLE_NEGATIVE\",\n      286: \"PNAME_LN\",\n      290: \"DISTINCT\",\n      291: \"REDUCED\",\n      293: \"*\",\n      296: \"NAMED\",\n      297: \"SILENT\",\n      298: \"CLEAR\",\n      299: \"DROP\",\n      300: \"ADD\",\n      301: \"MOVE\",\n      302: \"COPY\",\n      303: \"ALL\",\n      304: \".\",\n      305: \"UNION\",\n      306: \"|\",\n      307: \"/\",\n      309: \"?\",\n      310: \"+\",\n      311: \"!=\",\n      312: \"<\",\n      313: \">\",\n      314: \"<=\",\n      315: \">=\",\n      316: \"NOT\",\n      317: \"CONCAT\",\n      318: \"COALESCE\",\n      319: \"SUBSTR\",\n      320: \"REGEX\",\n      321: \"REPLACE\"\n    },\n    productions_: [0, [3, 3], [4, 1], [8, 2], [11, 2], [14, 3], [17, 4], [22, 4], [18, 3], [27, 1], [27, 5], [33, 5], [33, 7], [42, 5], [47, 4], [50, 3], [20, 2], [21, 4], [60, 3], [64, 1], [64, 1], [64, 3], [64, 5], [64, 1], [67, 2], [70, 3], [73, 2], [73, 2], [73, 1], [73, 1], [78, 2], [78, 2], [78, 4], [78, 4], [82, 2], [84, 4], [84, 4], [84, 6], [90, 1], [90, 1], [90, 1], [93, 3], [95, 3], [97, 4], [97, 3], [97, 5], [97, 4], [97, 2], [97, 2], [97, 2], [97, 6], [97, 6], [121, 2], [117, 2], [126, 3], [129, 2], [131, 3], [107, 1], [107, 2], [104, 2], [104, 1], [113, 4], [138, 7], [143, 3], [55, 3], [55, 3], [147, 2], [150, 3], [154, 3], [151, 2], [151, 2], [151, 2], [151, 3], [151, 4], [151, 2], [151, 6], [151, 1], [77, 1], [77, 1], [77, 1], [66, 2], [66, 6], [169, 1], [169, 4], [35, 3], [172, 3], [145, 2], [145, 2], [178, 1], [176, 2], [182, 2], [180, 2], [185, 1], [185, 1], [185, 1], [186, 2], [156, 2], [156, 2], [190, 4], [197, 1], [197, 3], [199, 2], [201, 2], [204, 2], [203, 2], [205, 1], [205, 1], [205, 2], [205, 3], [209, 1], [209, 1], [209, 4], [210, 1], [210, 1], [210, 2], [210, 2], [177, 3], [177, 3], [191, 3], [191, 3], [189, 1], [189, 1], [195, 1], [195, 1], [175, 1], [175, 1], [175, 1], [175, 1], [175, 1], [175, 1], [30, 2], [222, 2], [220, 2], [226, 2], [224, 1], [224, 3], [224, 4], [228, 2], [234, 2], [234, 2], [234, 2], [232, 2], [242, 2], [240, 2], [240, 2], [240, 2], [245, 1], [245, 1], [245, 1], [245, 1], [245, 1], [245, 1], [75, 3], [65, 1], [65, 2], [65, 4], [65, 6], [65, 8], [65, 2], [65, 4], [65, 2], [65, 4], [65, 3], [247, 5], [247, 5], [247, 6], [266, 4], [91, 1], [91, 2], [91, 3], [91, 1], [91, 1], [91, 1], [91, 1], [91, 1], [91, 1], [91, 1], [269, 1], [269, 1], [269, 1], [269, 1], [236, 1], [236, 1], [236, 1], [238, 1], [238, 1], [238, 1], [53, 1], [53, 1], [53, 1], [287, 0], [287, 1], [5, 1], [5, 1], [288, 1], [288, 1], [7, 0], [7, 2], [9, 1], [9, 1], [9, 1], [9, 1], [10, 0], [10, 1], [19, 0], [19, 2], [23, 0], [23, 1], [289, 1], [289, 1], [25, 0], [25, 1], [292, 1], [292, 2], [26, 1], [26, 1], [36, 0], [36, 2], [37, 0], [37, 2], [40, 0], [40, 1], [294, 1], [294, 1], [295, 1], [295, 2], [44, 1], [44, 1], [45, 0], [45, 2], [46, 0], [46, 1], [49, 0], [49, 2], [52, 0], [52, 1], [54, 0], [54, 1], [56, 0], [56, 1], [57, 0], [57, 1], [58, 0], [58, 1], [59, 0], [59, 1], [63, 1], [63, 2], [69, 1], [69, 2], [72, 1], [72, 2], [85, 0], [85, 2], [87, 0], [87, 2], [88, 1], [88, 2], [89, 0], [89, 2], [94, 1], [94, 2], [96, 0], [96, 4], [98, 0], [98, 2], [100, 0], [100, 1], [101, 0], [101, 1], [102, 1], [102, 1], [103, 0], [103, 1], [105, 1], [105, 1], [105, 1], [106, 0], [106, 1], [110, 0], [110, 1], [116, 0], [116, 1], [118, 0], [118, 1], [119, 0], [119, 2], [120, 0], [120, 1], [122, 0], [122, 1], [123, 0], [123, 2], [128, 0], [128, 1], [134, 0], [134, 1], [135, 1], [135, 1], [135, 1], [136, 0], [136, 1], [137, 0], [137, 2], [139, 1], [139, 1], [140, 0], [140, 1], [141, 0], [141, 1], [142, 0], [142, 1], [144, 0], [144, 3], [146, 0], [146, 1], [148, 0], [148, 1], [149, 0], [149, 2], [152, 0], [152, 1], [153, 0], [153, 1], [155, 0], [155, 3], [157, 0], [157, 1], [158, 0], [158, 3], [161, 1], [161, 1], [163, 0], [163, 1], [164, 1], [164, 1], [167, 0], [167, 1], [168, 0], [168, 3], [170, 0], [170, 3], [171, 0], [171, 1], [173, 0], [173, 3], [174, 0], [174, 1], [179, 0], [179, 1], [181, 0], [181, 2], [184, 0], [184, 1], [188, 0], [188, 3], [192, 0], [192, 1], [193, 1], [193, 1], [194, 0], [194, 3], [196, 0], [196, 2], [198, 1], [198, 1], [200, 0], [200, 3], [202, 0], [202, 3], [308, 1], [308, 1], [308, 1], [206, 0], [206, 1], [207, 0], [207, 1], [211, 0], [211, 3], [212, 0], [212, 1], [214, 1], [214, 2], [217, 1], [217, 2], [221, 0], [221, 2], [225, 0], [225, 2], [229, 1], [229, 1], [229, 1], [229, 1], [229, 1], [229, 1], [230, 0], [230, 1], [233, 0], [233, 2], [235, 1], [235, 1], [237, 0], [237, 2], [239, 0], [239, 2], [241, 0], [241, 2], [243, 1], [243, 1], [244, 0], [244, 1], [253, 1], [253, 1], [253, 1], [253, 1], [253, 1], [256, 0], [256, 1], [259, 0], [259, 1], [260, 1], [260, 1], [262, 0], [262, 1], [264, 0], [264, 1], [265, 0], [265, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          $$[$0 - 1] = $$[$0 - 1] || {};\n          if (Parser.base) $$[$0 - 1].base = Parser.base;\n          Parser.base = base = basePath = baseRoot = '';\n          $$[$0 - 1].prefixes = Parser.prefixes;\n          Parser.prefixes = null;\n          return $$[$0 - 1];\n          break;\n\n        case 3:\n          this.$ = extend($$[$0 - 1], $$[$0], {\n            type: 'query'\n          });\n          break;\n\n        case 4:\n          Parser.base = resolveIRI($$[$0]);\n          base = basePath = baseRoot = '';\n          break;\n\n        case 5:\n          if (!Parser.prefixes) Parser.prefixes = {};\n          $$[$0 - 1] = $$[$0 - 1].substr(0, $$[$0 - 1].length - 1);\n          $$[$0] = resolveIRI($$[$0]);\n          Parser.prefixes[$$[$0 - 1]] = $$[$0];\n          break;\n\n        case 6:\n          this.$ = extend($$[$0 - 3], groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);\n          break;\n\n        case 7:\n          this.$ = extend($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], {\n            type: 'query'\n          });\n          break;\n\n        case 8:\n          this.$ = extend({\n            queryType: 'SELECT',\n            variables: $$[$0] === '*' ? ['*'] : $$[$0]\n          }, $$[$0 - 1] && ($$[$0 - 2] = lowercase($$[$0 - 1]), $$[$0 - 1] = {}, $$[$0 - 1][$$[$0 - 2]] = true, $$[$0 - 1]));\n          break;\n\n        case 9:\n        case 92:\n        case 124:\n        case 151:\n          this.$ = toVar($$[$0]);\n          break;\n\n        case 10:\n        case 22:\n          this.$ = expression($$[$0 - 3], {\n            variable: toVar($$[$0 - 1])\n          });\n          break;\n\n        case 11:\n          this.$ = extend({\n            queryType: 'CONSTRUCT',\n            template: $$[$0 - 3]\n          }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);\n          break;\n\n        case 12:\n          this.$ = extend({\n            queryType: 'CONSTRUCT',\n            template: $$[$0 - 2] = $$[$0 - 2] ? $$[$0 - 2].triples : []\n          }, groupDatasets($$[$0 - 5]), {\n            where: [{\n              type: 'bgp',\n              triples: appendAllTo([], $$[$0 - 2])\n            }]\n          }, $$[$0]);\n          break;\n\n        case 13:\n          this.$ = extend({\n            queryType: 'DESCRIBE',\n            variables: $$[$0 - 3] === '*' ? ['*'] : $$[$0 - 3].map(toVar)\n          }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);\n          break;\n\n        case 14:\n          this.$ = extend({\n            queryType: 'ASK'\n          }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);\n          break;\n\n        case 15:\n        case 54:\n          this.$ = {\n            iri: $$[$0],\n            named: !!$$[$0 - 1]\n          };\n          break;\n\n        case 16:\n          this.$ = {\n            where: $$[$0].patterns\n          };\n          break;\n\n        case 17:\n          this.$ = extend($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);\n          break;\n\n        case 18:\n          this.$ = {\n            group: $$[$0]\n          };\n          break;\n\n        case 19:\n        case 20:\n        case 26:\n        case 28:\n          this.$ = expression($$[$0]);\n          break;\n\n        case 21:\n          this.$ = expression($$[$0 - 1]);\n          break;\n\n        case 23:\n        case 29:\n          this.$ = expression(toVar($$[$0]));\n          break;\n\n        case 24:\n          this.$ = {\n            having: $$[$0]\n          };\n          break;\n\n        case 25:\n          this.$ = {\n            order: $$[$0]\n          };\n          break;\n\n        case 27:\n          this.$ = expression($$[$0], {\n            descending: true\n          });\n          break;\n\n        case 30:\n          this.$ = {\n            limit: toInt($$[$0])\n          };\n          break;\n\n        case 31:\n          this.$ = {\n            offset: toInt($$[$0])\n          };\n          break;\n\n        case 32:\n          this.$ = {\n            limit: toInt($$[$0 - 2]),\n            offset: toInt($$[$0])\n          };\n          break;\n\n        case 33:\n          this.$ = {\n            limit: toInt($$[$0]),\n            offset: toInt($$[$0 - 2])\n          };\n          break;\n\n        case 34:\n          this.$ = {\n            type: 'values',\n            values: $$[$0]\n          };\n          break;\n\n        case 35:\n          $$[$0 - 3] = toVar($$[$0 - 3]);\n          this.$ = $$[$0 - 1].map(function (v) {\n            var o = {};\n            o[$$[$0 - 3]] = v;\n            return o;\n          });\n          break;\n\n        case 36:\n          this.$ = $$[$0 - 1].map(function () {\n            return {};\n          });\n          break;\n\n        case 37:\n          var length = $$[$0 - 4].length;\n          $$[$0 - 4] = $$[$0 - 4].map(toVar);\n          this.$ = $$[$0 - 1].map(function (values) {\n            if (values.length !== length) throw Error('Inconsistent VALUES length');\n            var valuesObject = {};\n\n            for (var i = 0; i < length; i++) {\n              valuesObject[$$[$0 - 4][i]] = values[i];\n            }\n\n            return valuesObject;\n          });\n          break;\n\n        case 40:\n          this.$ = undefined;\n          break;\n\n        case 41:\n        case 84:\n        case 108:\n        case 152:\n          this.$ = $$[$0 - 1];\n          break;\n\n        case 42:\n          this.$ = {\n            type: 'update',\n            updates: appendTo($$[$0 - 2], $$[$0 - 1])\n          };\n          break;\n\n        case 43:\n          this.$ = extend({\n            type: 'load',\n            silent: !!$$[$0 - 2],\n            source: $$[$0 - 1]\n          }, $$[$0] && {\n            destination: $$[$0]\n          });\n          break;\n\n        case 44:\n          this.$ = {\n            type: lowercase($$[$0 - 2]),\n            silent: !!$$[$0 - 1],\n            graph: $$[$0]\n          };\n          break;\n\n        case 45:\n          this.$ = {\n            type: lowercase($$[$0 - 4]),\n            silent: !!$$[$0 - 3],\n            source: $$[$0 - 2],\n            destination: $$[$0]\n          };\n          break;\n\n        case 46:\n          this.$ = {\n            type: 'create',\n            silent: !!$$[$0 - 2],\n            graph: $$[$0 - 1]\n          };\n          break;\n\n        case 47:\n          this.$ = {\n            updateType: 'insert',\n            insert: $$[$0]\n          };\n          break;\n\n        case 48:\n          this.$ = {\n            updateType: 'delete',\n            delete: $$[$0]\n          };\n          break;\n\n        case 49:\n          this.$ = {\n            updateType: 'deletewhere',\n            delete: $$[$0]\n          };\n          break;\n\n        case 50:\n          this.$ = extend({\n            updateType: 'insertdelete'\n          }, $$[$0 - 5], {\n            insert: $$[$0 - 4] || []\n          }, {\n            delete: $$[$0 - 3] || []\n          }, groupDatasets($$[$0 - 2]), {\n            where: $$[$0].patterns\n          });\n          break;\n\n        case 51:\n          this.$ = extend({\n            updateType: 'insertdelete'\n          }, $$[$0 - 5], {\n            delete: $$[$0 - 4] || []\n          }, {\n            insert: $$[$0 - 3] || []\n          }, groupDatasets($$[$0 - 2]), {\n            where: $$[$0].patterns\n          });\n          break;\n\n        case 52:\n        case 53:\n        case 56:\n        case 143:\n          this.$ = $$[$0];\n          break;\n\n        case 55:\n          this.$ = {\n            graph: $$[$0]\n          };\n          break;\n\n        case 57:\n          this.$ = {\n            type: 'graph',\n            default: true\n          };\n          break;\n\n        case 58:\n        case 59:\n          this.$ = {\n            type: 'graph',\n            name: $$[$0]\n          };\n          break;\n\n        case 60:\n          this.$ = {};\n          this.$[lowercase($$[$0])] = true;\n          break;\n\n        case 61:\n          this.$ = $$[$0 - 2] ? unionAll($$[$0 - 1], [$$[$0 - 2]]) : unionAll($$[$0 - 1]);\n          break;\n\n        case 62:\n          var graph = extend($$[$0 - 3] || {\n            triples: []\n          }, {\n            type: 'graph',\n            name: toVar($$[$0 - 5])\n          });\n          this.$ = $$[$0] ? [graph, $$[$0]] : [graph];\n          break;\n\n        case 63:\n        case 68:\n          this.$ = {\n            type: 'bgp',\n            triples: unionAll($$[$0 - 2], [$$[$0 - 1]])\n          };\n          break;\n\n        case 64:\n          this.$ = {\n            type: 'group',\n            patterns: [$$[$0 - 1]]\n          };\n          break;\n\n        case 65:\n          this.$ = {\n            type: 'group',\n            patterns: $$[$0 - 1]\n          };\n          break;\n\n        case 66:\n          this.$ = $$[$0 - 1] ? unionAll([$$[$0 - 1]], $$[$0]) : unionAll($$[$0]);\n          break;\n\n        case 67:\n          this.$ = $$[$0] ? [$$[$0 - 2], $$[$0]] : $$[$0 - 2];\n          break;\n\n        case 69:\n          if ($$[$0 - 1].length) this.$ = {\n            type: 'union',\n            patterns: unionAll($$[$0 - 1].map(degroupSingle), [degroupSingle($$[$0])])\n          };else this.$ = $$[$0];\n          break;\n\n        case 70:\n          this.$ = extend($$[$0], {\n            type: 'optional'\n          });\n          break;\n\n        case 71:\n          this.$ = extend($$[$0], {\n            type: 'minus'\n          });\n          break;\n\n        case 72:\n          this.$ = extend($$[$0], {\n            type: 'graph',\n            name: toVar($$[$0 - 1])\n          });\n          break;\n\n        case 73:\n          this.$ = extend($$[$0], {\n            type: 'service',\n            name: toVar($$[$0 - 1]),\n            silent: !!$$[$0 - 2]\n          });\n          break;\n\n        case 74:\n          this.$ = {\n            type: 'filter',\n            expression: $$[$0]\n          };\n          break;\n\n        case 75:\n          this.$ = {\n            type: 'bind',\n            variable: toVar($$[$0 - 1]),\n            expression: $$[$0 - 3]\n          };\n          break;\n\n        case 80:\n          this.$ = {\n            type: 'functionCall',\n            function: $$[$0 - 1],\n            args: []\n          };\n          break;\n\n        case 81:\n          this.$ = {\n            type: 'functionCall',\n            function: $$[$0 - 5],\n            args: appendTo($$[$0 - 2], $$[$0 - 1]),\n            distinct: !!$$[$0 - 3]\n          };\n          break;\n\n        case 82:\n        case 99:\n        case 110:\n        case 196:\n        case 204:\n        case 216:\n        case 218:\n        case 228:\n        case 232:\n        case 252:\n        case 254:\n        case 258:\n        case 262:\n        case 285:\n        case 291:\n        case 302:\n        case 312:\n        case 318:\n        case 324:\n        case 328:\n        case 338:\n        case 340:\n        case 344:\n        case 350:\n        case 354:\n        case 360:\n        case 362:\n        case 366:\n        case 368:\n        case 377:\n        case 385:\n        case 387:\n        case 397:\n        case 401:\n        case 403:\n        case 405:\n          this.$ = [];\n          break;\n\n        case 83:\n          this.$ = appendTo($$[$0 - 2], $$[$0 - 1]);\n          break;\n\n        case 85:\n          this.$ = unionAll($$[$0 - 2], [$$[$0 - 1]]);\n          break;\n\n        case 86:\n        case 96:\n          this.$ = $$[$0].map(function (t) {\n            return extend(triple($$[$0 - 1]), t);\n          });\n          break;\n\n        case 87:\n          this.$ = appendAllTo($$[$0].map(function (t) {\n            return extend(triple($$[$0 - 1].entity), t);\n          }), $$[$0 - 1].triples)\n          /* the subject is a blank node, possibly with more triples */\n          ;\n          break;\n\n        case 89:\n          this.$ = unionAll([$$[$0 - 1]], $$[$0]);\n          break;\n\n        case 90:\n          this.$ = unionAll($$[$0]);\n          break;\n\n        case 91:\n          this.$ = objectListToTriples($$[$0 - 1], $$[$0]);\n          break;\n\n        case 94:\n        case 106:\n        case 113:\n          this.$ = RDF_TYPE;\n          break;\n\n        case 95:\n          this.$ = appendTo($$[$0 - 1], $$[$0]);\n          break;\n\n        case 97:\n          this.$ = !$$[$0] ? $$[$0 - 1].triples : appendAllTo($$[$0].map(function (t) {\n            return extend(triple($$[$0 - 1].entity), t);\n          }), $$[$0 - 1].triples)\n          /* the subject is a blank node, possibly with more triples */\n          ;\n          break;\n\n        case 98:\n          this.$ = objectListToTriples(toVar($$[$0 - 3]), appendTo($$[$0 - 2], $$[$0 - 1]), $$[$0]);\n          break;\n\n        case 100:\n          this.$ = objectListToTriples(toVar($$[$0 - 1]), $$[$0]);\n          break;\n\n        case 101:\n          this.$ = $$[$0 - 1].length ? path('|', appendTo($$[$0 - 1], $$[$0])) : $$[$0];\n          break;\n\n        case 102:\n          this.$ = $$[$0 - 1].length ? path('/', appendTo($$[$0 - 1], $$[$0])) : $$[$0];\n          break;\n\n        case 103:\n          this.$ = $$[$0] ? path($$[$0], [$$[$0 - 1]]) : $$[$0 - 1];\n          break;\n\n        case 104:\n          this.$ = $$[$0 - 1] ? path($$[$0 - 1], [$$[$0]]) : $$[$0];\n          ;\n          break;\n\n        case 107:\n        case 114:\n          this.$ = path($$[$0 - 1], [$$[$0]]);\n          break;\n\n        case 111:\n          this.$ = path('|', appendTo($$[$0 - 2], $$[$0 - 1]));\n          break;\n\n        case 115:\n          this.$ = path($$[$0 - 1], [RDF_TYPE]);\n          break;\n\n        case 116:\n        case 118:\n          this.$ = createList($$[$0 - 1]);\n          break;\n\n        case 117:\n        case 119:\n          this.$ = createAnonymousObject($$[$0 - 1]);\n          break;\n\n        case 120:\n          this.$ = {\n            entity: $$[$0],\n            triples: []\n            /* for consistency with TriplesNode */\n\n          };\n          break;\n\n        case 122:\n          this.$ = {\n            entity: $$[$0],\n            triples: []\n            /* for consistency with TriplesNodePath */\n\n          };\n          break;\n\n        case 128:\n          this.$ = blank();\n          break;\n\n        case 129:\n          this.$ = RDF_NIL;\n          break;\n\n        case 130:\n        case 132:\n        case 137:\n        case 141:\n          this.$ = createOperationTree($$[$0 - 1], $$[$0]);\n          break;\n\n        case 131:\n          this.$ = ['||', $$[$0]];\n          break;\n\n        case 133:\n          this.$ = ['&&', $$[$0]];\n          break;\n\n        case 135:\n          this.$ = operation($$[$0 - 1], [$$[$0 - 2], $$[$0]]);\n          break;\n\n        case 136:\n          this.$ = operation($$[$0 - 2] ? 'notin' : 'in', [$$[$0 - 3], $$[$0]]);\n          break;\n\n        case 138:\n        case 142:\n          this.$ = [$$[$0 - 1], $$[$0]];\n          break;\n\n        case 139:\n          this.$ = ['+', createOperationTree($$[$0 - 1], $$[$0])];\n          break;\n\n        case 140:\n          this.$ = ['-', createOperationTree($$[$0 - 1].replace('-', ''), $$[$0])];\n          break;\n\n        case 144:\n          this.$ = operation($$[$0 - 1], [$$[$0]]);\n          break;\n\n        case 145:\n          this.$ = operation('UMINUS', [$$[$0]]);\n          break;\n\n        case 154:\n          this.$ = operation(lowercase($$[$0 - 1]));\n          break;\n\n        case 155:\n          this.$ = operation(lowercase($$[$0 - 3]), [$$[$0 - 1]]);\n          break;\n\n        case 156:\n          this.$ = operation(lowercase($$[$0 - 5]), [$$[$0 - 3], $$[$0 - 1]]);\n          break;\n\n        case 157:\n          this.$ = operation(lowercase($$[$0 - 7]), [$$[$0 - 5], $$[$0 - 3], $$[$0 - 1]]);\n          break;\n\n        case 158:\n          this.$ = operation(lowercase($$[$0 - 1]), $$[$0]);\n          break;\n\n        case 159:\n          this.$ = operation('bound', [toVar($$[$0 - 1])]);\n          break;\n\n        case 160:\n          this.$ = operation($$[$0 - 1], []);\n          break;\n\n        case 161:\n          this.$ = operation($$[$0 - 3], [$$[$0 - 1]]);\n          break;\n\n        case 162:\n          this.$ = operation($$[$0 - 2] ? 'notexists' : 'exists', [degroupSingle($$[$0])]);\n          break;\n\n        case 163:\n        case 164:\n          this.$ = expression($$[$0 - 1], {\n            type: 'aggregate',\n            aggregation: lowercase($$[$0 - 4]),\n            distinct: !!$$[$0 - 2]\n          });\n          break;\n\n        case 165:\n          this.$ = expression($$[$0 - 2], {\n            type: 'aggregate',\n            aggregation: lowercase($$[$0 - 5]),\n            distinct: !!$$[$0 - 3],\n            separator: $$[$0 - 1] || ' '\n          });\n          break;\n\n        case 166:\n          this.$ = $$[$0].substr(1, $$[$0].length - 2);\n          break;\n\n        case 168:\n          this.$ = $$[$0 - 1] + lowercase($$[$0]);\n          break;\n\n        case 169:\n          this.$ = $$[$0 - 2] + '^^' + $$[$0];\n          break;\n\n        case 170:\n        case 184:\n          this.$ = createLiteral($$[$0], XSD_INTEGER);\n          break;\n\n        case 171:\n        case 185:\n          this.$ = createLiteral($$[$0], XSD_DECIMAL);\n          break;\n\n        case 172:\n        case 186:\n          this.$ = createLiteral(lowercase($$[$0]), XSD_DOUBLE);\n          break;\n\n        case 175:\n          this.$ = XSD_TRUE;\n          break;\n\n        case 176:\n          this.$ = XSD_FALSE;\n          break;\n\n        case 177:\n        case 178:\n          this.$ = unescapeString($$[$0], 1);\n          break;\n\n        case 179:\n        case 180:\n          this.$ = unescapeString($$[$0], 3);\n          break;\n\n        case 181:\n          this.$ = createLiteral($$[$0].substr(1), XSD_INTEGER);\n          break;\n\n        case 182:\n          this.$ = createLiteral($$[$0].substr(1), XSD_DECIMAL);\n          break;\n\n        case 183:\n          this.$ = createLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);\n          break;\n\n        case 187:\n          this.$ = resolveIRI($$[$0]);\n          break;\n\n        case 188:\n          var namePos = $$[$0].indexOf(':'),\n              prefix = $$[$0].substr(0, namePos),\n              expansion = Parser.prefixes[prefix];\n          if (!expansion) throw new Error('Unknown prefix: ' + prefix);\n          this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));\n          break;\n\n        case 189:\n          $$[$0] = $$[$0].substr(0, $$[$0].length - 1);\n          if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);\n          this.$ = resolveIRI(Parser.prefixes[$$[$0]]);\n          break;\n\n        case 197:\n        case 205:\n        case 213:\n        case 217:\n        case 219:\n        case 225:\n        case 229:\n        case 233:\n        case 247:\n        case 249:\n        case 251:\n        case 253:\n        case 255:\n        case 257:\n        case 259:\n        case 261:\n        case 286:\n        case 292:\n        case 303:\n        case 319:\n        case 351:\n        case 363:\n        case 382:\n        case 384:\n        case 386:\n        case 388:\n        case 398:\n        case 402:\n        case 404:\n        case 406:\n          $$[$0 - 1].push($$[$0]);\n          break;\n\n        case 212:\n        case 224:\n        case 246:\n        case 248:\n        case 250:\n        case 256:\n        case 260:\n        case 381:\n        case 383:\n          this.$ = [$$[$0]];\n          break;\n\n        case 263:\n          $$[$0 - 3].push($$[$0 - 2]);\n          break;\n\n        case 313:\n        case 325:\n        case 329:\n        case 339:\n        case 341:\n        case 345:\n        case 355:\n        case 361:\n        case 367:\n        case 369:\n        case 378:\n          $$[$0 - 2].push($$[$0 - 1]);\n          break;\n      }\n    },\n    table: [o($V0, $V1, {\n      3: 1,\n      4: 2,\n      7: 3\n    }), {\n      1: [3]\n    }, o($V2, [2, 262], {\n      5: 4,\n      8: 5,\n      287: 6,\n      9: 7,\n      95: 8,\n      17: 9,\n      33: 10,\n      42: 11,\n      47: 12,\n      96: 13,\n      18: 14,\n      6: [2, 190],\n      24: $V3,\n      34: [1, 15],\n      43: [1, 16],\n      48: [1, 17]\n    }), o([6, 24, 34, 43, 48, 99, 109, 112, 114, 115, 124, 125, 130, 298, 299, 300, 301, 302], [2, 2], {\n      288: 19,\n      11: 20,\n      14: 21,\n      12: [1, 22],\n      15: [1, 23]\n    }), {\n      6: [1, 24]\n    }, {\n      6: [2, 192]\n    }, {\n      6: [2, 193]\n    }, {\n      6: [2, 202],\n      10: 25,\n      82: 26,\n      83: $V4\n    }, {\n      6: [2, 191]\n    }, o($V5, [2, 198]), o($V5, [2, 199]), o($V5, [2, 200]), o($V5, [2, 201]), {\n      97: 28,\n      99: [1, 29],\n      102: 30,\n      105: 31,\n      109: [1, 32],\n      112: [1, 33],\n      114: [1, 34],\n      115: [1, 35],\n      116: 36,\n      120: 37,\n      124: [2, 287],\n      125: [2, 281],\n      129: 43,\n      130: [1, 44],\n      298: [1, 38],\n      299: [1, 39],\n      300: [1, 40],\n      301: [1, 41],\n      302: [1, 42]\n    }, o($V6, [2, 204], {\n      19: 45\n    }), o($V7, [2, 218], {\n      35: 46,\n      37: 47,\n      39: [1, 48]\n    }), {\n      13: $V8,\n      16: $V9,\n      28: $Va,\n      44: 49,\n      53: 54,\n      286: $Vb,\n      293: [1, 51],\n      294: 52,\n      295: 50\n    }, o($V6, [2, 232], {\n      49: 58\n    }), o($Vc, [2, 210], {\n      25: 59,\n      289: 60,\n      290: [1, 61],\n      291: [1, 62]\n    }), o($V0, [2, 197]), o($V0, [2, 194]), o($V0, [2, 195]), {\n      13: [1, 63]\n    }, {\n      16: [1, 64]\n    }, {\n      1: [2, 1]\n    }, {\n      6: [2, 3]\n    }, {\n      6: [2, 203]\n    }, {\n      28: [1, 66],\n      29: [1, 68],\n      84: 65,\n      86: [1, 67]\n    }, {\n      6: [2, 264],\n      98: 69,\n      183: [1, 70]\n    }, o($Vd, [2, 266], {\n      100: 71,\n      297: [1, 72]\n    }), o($Ve, [2, 272], {\n      103: 73,\n      297: [1, 74]\n    }), o($Vf, [2, 277], {\n      106: 75,\n      297: [1, 76]\n    }), {\n      110: 77,\n      111: [2, 279],\n      297: [1, 78]\n    }, {\n      39: $Vg,\n      113: 79\n    }, {\n      39: $Vg,\n      113: 81\n    }, {\n      39: $Vg,\n      113: 82\n    }, {\n      117: 83,\n      125: $Vh\n    }, {\n      121: 85,\n      124: $Vi\n    }, o($Vj, [2, 270]), o($Vj, [2, 271]), o($Vk, [2, 274]), o($Vk, [2, 275]), o($Vk, [2, 276]), {\n      124: [2, 288],\n      125: [2, 282]\n    }, {\n      13: $V8,\n      16: $V9,\n      53: 87,\n      286: $Vb\n    }, {\n      20: 88,\n      38: $Vl,\n      39: $Vm,\n      50: 89,\n      51: $Vn,\n      54: 90\n    }, o($V6, [2, 216], {\n      36: 93\n    }), {\n      38: [1, 94],\n      50: 95,\n      51: $Vn\n    }, o($Vo, [2, 344], {\n      171: 96,\n      172: 97,\n      173: 98,\n      41: [2, 342]\n    }), o($Vp, [2, 228], {\n      45: 99\n    }), o($Vp, [2, 226], {\n      53: 54,\n      294: 100,\n      13: $V8,\n      16: $V9,\n      28: $Va,\n      286: $Vb\n    }), o($Vp, [2, 227]), o($Vq, [2, 224]), o($Vq, [2, 222]), o($Vq, [2, 223]), o($Vr, [2, 187]), o($Vr, [2, 188]), o($Vr, [2, 189]), {\n      20: 101,\n      38: $Vl,\n      39: $Vm,\n      50: 102,\n      51: $Vn,\n      54: 90\n    }, {\n      26: 103,\n      27: 106,\n      28: $Vs,\n      29: $Vt,\n      292: 104,\n      293: [1, 105]\n    }, o($Vc, [2, 211]), o($Vc, [2, 208]), o($Vc, [2, 209]), o($V0, [2, 4]), {\n      13: [1, 109]\n    }, o($Vu, [2, 34]), {\n      39: [1, 110]\n    }, {\n      39: [1, 111]\n    }, {\n      28: [1, 113],\n      88: 112\n    }, {\n      6: [2, 42]\n    }, o($V0, $V1, {\n      7: 3,\n      4: 114\n    }), {\n      13: $V8,\n      16: $V9,\n      53: 115,\n      286: $Vb\n    }, o($Vd, [2, 267]), {\n      104: 116,\n      111: [1, 117],\n      133: [1, 119],\n      135: 118,\n      296: [1, 120],\n      303: [1, 121]\n    }, o($Ve, [2, 273]), o($Vd, $Vv, {\n      107: 122,\n      134: 124,\n      111: $Vw,\n      133: $Vx\n    }), o($Vf, [2, 278]), {\n      111: [1, 126]\n    }, {\n      111: [2, 280]\n    }, o($Vy, [2, 47]), o($Vo, $Vz, {\n      136: 127,\n      143: 128,\n      144: 129,\n      41: $VA,\n      111: $VA\n    }), o($Vy, [2, 48]), o($Vy, [2, 49]), o($VB, [2, 283], {\n      118: 130,\n      121: 131,\n      124: $Vi\n    }), {\n      39: $Vg,\n      113: 132\n    }, o($VB, [2, 289], {\n      122: 133,\n      117: 134,\n      125: $Vh\n    }), {\n      39: $Vg,\n      113: 135\n    }, o([124, 125], [2, 55]), o($VC, $VD, {\n      21: 136,\n      56: 137,\n      60: 138,\n      61: $VE\n    }), o($V6, [2, 205]), {\n      39: $VF,\n      55: 140\n    }, o($Vd, [2, 234], {\n      52: 142,\n      296: [1, 143]\n    }), {\n      39: [2, 237]\n    }, {\n      20: 144,\n      38: $Vl,\n      39: $Vm,\n      50: 145,\n      51: $Vn,\n      54: 90\n    }, {\n      39: [1, 146]\n    }, o($V7, [2, 219]), {\n      41: [1, 147]\n    }, {\n      41: [2, 343]\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VH,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      145: 148,\n      175: 149,\n      177: 150,\n      215: $VK,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($V$, [2, 230], {\n      54: 90,\n      46: 177,\n      50: 178,\n      20: 179,\n      38: $Vl,\n      39: $Vm,\n      51: $Vn\n    }), o($Vq, [2, 225]), o($VC, $VD, {\n      56: 137,\n      60: 138,\n      21: 180,\n      61: $VE\n    }), o($V6, [2, 233]), o($V6, [2, 8]), o($V6, [2, 214], {\n      27: 181,\n      28: $Vs,\n      29: $Vt\n    }), o($V6, [2, 215]), o($V01, [2, 212]), o($V01, [2, 9]), o($V11, $V21, {\n      30: 182,\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($V0, [2, 5]), o($V61, [2, 252], {\n      85: 192\n    }), o($V71, [2, 254], {\n      87: 193\n    }), {\n      28: [1, 195],\n      32: [1, 194]\n    }, o($V81, [2, 256]), o($V2, [2, 263], {\n      6: [2, 265]\n    }), o($Vy, [2, 268], {\n      101: 196,\n      131: 197,\n      132: [1, 198]\n    }), o($Vy, [2, 44]), {\n      13: $V8,\n      16: $V9,\n      53: 199,\n      286: $Vb\n    }, o($Vy, [2, 60]), o($Vy, [2, 297]), o($Vy, [2, 298]), o($Vy, [2, 299]), {\n      108: [1, 200]\n    }, o($V91, [2, 57]), {\n      13: $V8,\n      16: $V9,\n      53: 201,\n      286: $Vb\n    }, o($Vd, [2, 296]), {\n      13: $V8,\n      16: $V9,\n      53: 202,\n      286: $Vb\n    }, o($Va1, [2, 302], {\n      137: 203\n    }), o($Va1, [2, 301]), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VH,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      145: 204,\n      175: 149,\n      177: 150,\n      215: $VK,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($VB, [2, 285], {\n      119: 205\n    }), o($VB, [2, 284]), o([38, 124, 127], [2, 53]), o($VB, [2, 291], {\n      123: 206\n    }), o($VB, [2, 290]), o([38, 125, 127], [2, 52]), o($V5, [2, 6]), o($Vb1, [2, 240], {\n      57: 207,\n      67: 208,\n      68: [1, 209]\n    }), o($VC, [2, 239]), {\n      62: [1, 210]\n    }, o([6, 41, 61, 68, 71, 79, 81, 83], [2, 16]), o($Vo, $Vc1, {\n      22: 211,\n      147: 212,\n      18: 213,\n      148: 214,\n      154: 215,\n      155: 216,\n      24: $V3,\n      39: $Vd1,\n      41: $Vd1,\n      83: $Vd1,\n      111: $Vd1,\n      159: $Vd1,\n      160: $Vd1,\n      162: $Vd1,\n      165: $Vd1,\n      166: $Vd1\n    }), {\n      13: $V8,\n      16: $V9,\n      53: 217,\n      286: $Vb\n    }, o($Vd, [2, 235]), o($VC, $VD, {\n      56: 137,\n      60: 138,\n      21: 218,\n      61: $VE\n    }), o($V6, [2, 217]), o($Vo, $Vz, {\n      144: 129,\n      40: 219,\n      143: 220,\n      41: [2, 220]\n    }), o($V6, [2, 84]), {\n      41: [2, 346],\n      174: 221,\n      304: [1, 222]\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $Ve1,\n      53: 227,\n      176: 223,\n      180: 224,\n      185: 225,\n      187: $Vf1,\n      286: $Vb\n    }, o($Vg1, [2, 348], {\n      180: 224,\n      185: 225,\n      53: 227,\n      178: 229,\n      179: 230,\n      176: 231,\n      13: $V8,\n      16: $V9,\n      28: $Ve1,\n      187: $Vf1,\n      286: $Vb\n    }), o($Vh1, [2, 124]), o($Vh1, [2, 125]), o($Vh1, [2, 126]), o($Vh1, [2, 127]), o($Vh1, [2, 128]), o($Vh1, [2, 129]), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VH,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      175: 234,\n      177: 235,\n      189: 233,\n      214: 232,\n      215: $VK,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $Ve1,\n      53: 227,\n      176: 236,\n      180: 224,\n      185: 225,\n      187: $Vf1,\n      286: $Vb\n    }, o($Vi1, [2, 167], {\n      270: [1, 237],\n      271: [1, 238]\n    }), o($Vi1, [2, 170]), o($Vi1, [2, 171]), o($Vi1, [2, 172]), o($Vi1, [2, 173]), o($Vi1, [2, 174]), o($Vi1, [2, 175]), o($Vi1, [2, 176]), o($Vj1, [2, 177]), o($Vj1, [2, 178]), o($Vj1, [2, 179]), o($Vj1, [2, 180]), o($Vi1, [2, 181]), o($Vi1, [2, 182]), o($Vi1, [2, 183]), o($Vi1, [2, 184]), o($Vi1, [2, 185]), o($Vi1, [2, 186]), o($VC, $VD, {\n      56: 137,\n      60: 138,\n      21: 239,\n      61: $VE\n    }), o($Vp, [2, 229]), o($V$, [2, 231]), o($V5, [2, 14]), o($V01, [2, 213]), {\n      31: [1, 240]\n    }, o($Vk1, [2, 385], {\n      221: 241\n    }), o($Vl1, [2, 387], {\n      225: 242\n    }), o($Vl1, [2, 134], {\n      229: 243,\n      230: 244,\n      231: [2, 395],\n      268: [1, 245],\n      311: [1, 246],\n      312: [1, 247],\n      313: [1, 248],\n      314: [1, 249],\n      315: [1, 250],\n      316: [1, 251]\n    }), o($Vm1, [2, 397], {\n      233: 252\n    }), o($Vn1, [2, 405], {\n      241: 253\n    }), {\n      13: $V8,\n      16: $V9,\n      28: $Vo1,\n      29: $Vp1,\n      53: 257,\n      65: 256,\n      66: 258,\n      75: 255,\n      80: $VI,\n      91: 259,\n      236: 163,\n      238: 164,\n      245: 254,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $Vo1,\n      29: $Vp1,\n      53: 257,\n      65: 256,\n      66: 258,\n      75: 255,\n      80: $VI,\n      91: 259,\n      236: 163,\n      238: 164,\n      245: 280,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $Vo1,\n      29: $Vp1,\n      53: 257,\n      65: 256,\n      66: 258,\n      75: 255,\n      80: $VI,\n      91: 259,\n      236: 163,\n      238: 164,\n      245: 281,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, o($V11, [2, 410]), {\n      13: $V8,\n      16: $V9,\n      41: [1, 282],\n      53: 284,\n      80: $VI,\n      90: 283,\n      91: 285,\n      92: $VG1,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, {\n      41: [1, 287],\n      86: [1, 288]\n    }, {\n      39: [1, 289]\n    }, o($V81, [2, 257]), o($Vy, [2, 43]), o($Vy, [2, 269]), {\n      111: [1, 290]\n    }, o($Vy, [2, 59]), o($Vd, $Vv, {\n      134: 124,\n      107: 291,\n      111: $Vw,\n      133: $Vx\n    }), o($V91, [2, 58]), o($Vy, [2, 46]), {\n      41: [1, 292],\n      111: [1, 294],\n      138: 293\n    }, o($Va1, [2, 314], {\n      146: 295,\n      304: [1, 296]\n    }), {\n      38: [1, 297],\n      126: 298,\n      127: $VH1\n    }, {\n      38: [1, 300],\n      126: 301,\n      127: $VH1\n    }, o($VI1, [2, 242], {\n      58: 302,\n      70: 303,\n      71: [1, 304]\n    }), o($Vb1, [2, 241]), {\n      13: $V8,\n      16: $V9,\n      29: $Vp1,\n      53: 310,\n      65: 308,\n      66: 309,\n      69: 305,\n      75: 307,\n      77: 306,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $VJ1,\n      29: $VK1,\n      53: 310,\n      63: 311,\n      64: 312,\n      65: 313,\n      66: 314,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, {\n      41: [1, 317]\n    }, {\n      41: [1, 318]\n    }, {\n      20: 319,\n      38: $Vl,\n      39: $Vm,\n      54: 90\n    }, o($VL1, [2, 318], {\n      149: 320\n    }), o($VL1, [2, 317]), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VM1,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      156: 321,\n      175: 322,\n      191: 323,\n      215: $VN1,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($Vp, [2, 15]), o($V5, [2, 11]), {\n      41: [1, 326]\n    }, {\n      41: [2, 221]\n    }, {\n      41: [2, 85]\n    }, o($Vo, [2, 345], {\n      41: [2, 347]\n    }), o($Vg1, [2, 86]), o($VO1, [2, 350], {\n      181: 327\n    }), o($Vo, $VP1, {\n      186: 328,\n      188: 329\n    }), o($Vo, [2, 92]), o($Vo, [2, 93]), o($Vo, [2, 94]), o($Vg1, [2, 87]), o($Vg1, [2, 88]), o($Vg1, [2, 349]), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VH,\n      32: [1, 330],\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      175: 234,\n      177: 235,\n      189: 331,\n      215: $VK,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($VQ1, [2, 381]), o($VR1, [2, 120]), o($VR1, [2, 121]), {\n      216: [1, 332]\n    }, o($Vi1, [2, 168]), {\n      13: $V8,\n      16: $V9,\n      53: 333,\n      286: $Vb\n    }, o($V5, [2, 13]), {\n      28: [1, 334]\n    }, o([31, 32, 183, 251], [2, 130], {\n      222: 335,\n      223: [1, 336]\n    }), o($Vk1, [2, 132], {\n      226: 337,\n      227: [1, 338]\n    }), o($V11, $V21, {\n      232: 186,\n      240: 187,\n      244: 188,\n      228: 339,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), {\n      231: [1, 340]\n    }, o($VS1, [2, 389]), o($VS1, [2, 390]), o($VS1, [2, 391]), o($VS1, [2, 392]), o($VS1, [2, 393]), o($VS1, [2, 394]), {\n      231: [2, 396]\n    }, o([31, 32, 183, 223, 227, 231, 251, 268, 311, 312, 313, 314, 315, 316], [2, 137], {\n      234: 341,\n      235: 342,\n      236: 343,\n      238: 344,\n      246: [1, 346],\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      310: [1, 345]\n    }), o($Vm1, [2, 141], {\n      242: 347,\n      243: 348,\n      293: $VT1,\n      307: $VU1\n    }), o($Vn1, [2, 143]), o($Vn1, [2, 146]), o($Vn1, [2, 147]), o($Vn1, [2, 148], {\n      29: $VV1,\n      86: $VW1\n    }), o($Vn1, [2, 149]), o($Vn1, [2, 150]), o($Vn1, [2, 151]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 353,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VX1, [2, 153]), {\n      86: [1, 354]\n    }, {\n      29: [1, 355]\n    }, {\n      29: [1, 356]\n    }, {\n      29: [1, 357]\n    }, {\n      29: $VY1,\n      86: $VZ1,\n      169: 358\n    }, {\n      29: [1, 361]\n    }, {\n      29: [1, 363],\n      86: [1, 362]\n    }, {\n      257: [1, 364]\n    }, {\n      29: [1, 365]\n    }, {\n      29: [1, 366]\n    }, {\n      29: [1, 367]\n    }, o($V_1, [2, 411]), o($V_1, [2, 412]), o($V_1, [2, 413]), o($V_1, [2, 414]), o($V_1, [2, 415]), {\n      257: [2, 417]\n    }, o($Vn1, [2, 144]), o($Vn1, [2, 145]), o($Vu, [2, 35]), o($V61, [2, 253]), o($V$1, [2, 38]), o($V$1, [2, 39]), o($V$1, [2, 40]), o($Vu, [2, 36]), o($V71, [2, 255]), o($V02, [2, 258], {\n      89: 368\n    }), {\n      13: $V8,\n      16: $V9,\n      53: 369,\n      286: $Vb\n    }, o($Vy, [2, 45]), o([6, 38, 124, 125, 127, 183], [2, 61]), o($Va1, [2, 303]), {\n      13: $V8,\n      16: $V9,\n      28: [1, 371],\n      53: 372,\n      139: 370,\n      286: $Vb\n    }, o($Va1, [2, 63]), o($Vo, [2, 313], {\n      41: $V12,\n      111: $V12\n    }), {\n      39: $VF,\n      55: 373\n    }, o($VB, [2, 286]), o($Vd, [2, 293], {\n      128: 374,\n      296: [1, 375]\n    }), {\n      39: $VF,\n      55: 376\n    }, o($VB, [2, 292]), o($V22, [2, 244], {\n      59: 377,\n      78: 378,\n      79: [1, 379],\n      81: [1, 380]\n    }), o($VI1, [2, 243]), {\n      62: [1, 381]\n    }, o($Vb1, [2, 24], {\n      247: 262,\n      253: 267,\n      256: 270,\n      75: 307,\n      65: 308,\n      66: 309,\n      53: 310,\n      77: 382,\n      13: $V8,\n      16: $V9,\n      29: $Vp1,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      254: $Vu1,\n      255: $Vv1,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }), o($V32, [2, 248]), o($V42, [2, 77]), o($V42, [2, 78]), o($V42, [2, 79]), {\n      29: $VV1,\n      86: $VW1\n    }, o($VC, [2, 18], {\n      247: 262,\n      253: 267,\n      256: 270,\n      53: 310,\n      65: 313,\n      66: 314,\n      64: 383,\n      13: $V8,\n      16: $V9,\n      28: $VJ1,\n      29: $VK1,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      254: $Vu1,\n      255: $Vv1,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }), o($V52, [2, 246]), o($V52, [2, 19]), o($V52, [2, 20]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 384,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($V52, [2, 23]), o($V62, [2, 64]), o($V62, [2, 65]), o($VC, $VD, {\n      56: 137,\n      60: 138,\n      21: 385,\n      61: $VE\n    }), {\n      39: [2, 328],\n      41: [2, 66],\n      82: 395,\n      83: $V4,\n      111: [1, 391],\n      150: 386,\n      151: 387,\n      158: 388,\n      159: [1, 389],\n      160: [1, 390],\n      162: [1, 392],\n      165: [1, 393],\n      166: [1, 394]\n    }, o($VL1, [2, 326], {\n      157: 396,\n      304: [1, 397]\n    }), o($V72, $V82, {\n      190: 398,\n      193: 399,\n      199: 400,\n      200: 402,\n      28: $V92\n    }), o($Va2, [2, 356], {\n      193: 399,\n      199: 400,\n      200: 402,\n      192: 403,\n      190: 404,\n      13: $V82,\n      16: $V82,\n      29: $V82,\n      187: $V82,\n      208: $V82,\n      213: $V82,\n      286: $V82,\n      28: $V92\n    }), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VM1,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      175: 407,\n      191: 408,\n      195: 406,\n      215: $VN1,\n      217: 405,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($V72, $V82, {\n      193: 399,\n      199: 400,\n      200: 402,\n      190: 409,\n      28: $V92\n    }), o($VC, $VD, {\n      56: 137,\n      60: 138,\n      21: 410,\n      61: $VE\n    }), o([41, 111, 216, 304], [2, 89], {\n      182: 411,\n      183: [1, 412]\n    }), o($VO1, [2, 91]), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VH,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      175: 234,\n      177: 235,\n      189: 413,\n      215: $VK,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($Vb2, [2, 116]), o($VQ1, [2, 382]), o($Vb2, [2, 117]), o($Vi1, [2, 169]), {\n      32: [1, 414]\n    }, o($Vk1, [2, 386]), o($V11, $V21, {\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      220: 415,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($Vl1, [2, 388]), o($V11, $V21, {\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      224: 416,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($Vl1, [2, 135]), {\n      29: $VY1,\n      86: $VZ1,\n      169: 417\n    }, o($Vm1, [2, 398]), o($V11, $V21, {\n      240: 187,\n      244: 188,\n      232: 418,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($Vn1, [2, 401], {\n      237: 419\n    }), o($Vn1, [2, 403], {\n      239: 420\n    }), o($VS1, [2, 399]), o($VS1, [2, 400]), o($Vn1, [2, 406]), o($V11, $V21, {\n      244: 188,\n      240: 421,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VS1, [2, 407]), o($VS1, [2, 408]), o($VX1, [2, 80]), o($VS1, [2, 336], {\n      167: 422,\n      290: [1, 423]\n    }), {\n      32: [1, 424]\n    }, o($VX1, [2, 154]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 425,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 426,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 427,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VX1, [2, 158]), o($VX1, [2, 82]), o($VS1, [2, 340], {\n      170: 428\n    }), {\n      28: [1, 429]\n    }, o($VX1, [2, 160]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 430,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), {\n      39: $VF,\n      55: 431\n    }, o($Vc2, [2, 418], {\n      259: 432,\n      290: [1, 433]\n    }), o($VS1, [2, 422], {\n      262: 434,\n      290: [1, 435]\n    }), o($VS1, [2, 424], {\n      264: 436,\n      290: [1, 437]\n    }), {\n      29: [1, 440],\n      41: [1, 438],\n      93: 439\n    }, o($Vy, [2, 56]), {\n      39: [1, 441]\n    }, {\n      39: [2, 304]\n    }, {\n      39: [2, 305]\n    }, o($Vy, [2, 50]), {\n      13: $V8,\n      16: $V9,\n      53: 442,\n      286: $Vb\n    }, o($Vd, [2, 294]), o($Vy, [2, 51]), o($V22, [2, 17]), o($V22, [2, 245]), {\n      80: [1, 443]\n    }, {\n      80: [1, 444]\n    }, {\n      13: $V8,\n      16: $V9,\n      28: $Vd2,\n      29: $Vp1,\n      53: 310,\n      65: 308,\n      66: 309,\n      72: 445,\n      73: 446,\n      74: $Ve2,\n      75: 307,\n      76: $Vf2,\n      77: 449,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, o($V32, [2, 249]), o($V52, [2, 247]), {\n      31: [1, 452],\n      32: [1, 451]\n    }, {\n      23: 453,\n      41: [2, 206],\n      82: 454,\n      83: $V4\n    }, o($VL1, [2, 319]), o($Vg2, [2, 320], {\n      152: 455,\n      304: [1, 456]\n    }), {\n      39: $VF,\n      55: 457\n    }, {\n      39: $VF,\n      55: 458\n    }, {\n      39: $VF,\n      55: 459\n    }, {\n      13: $V8,\n      16: $V9,\n      28: [1, 461],\n      53: 462,\n      161: 460,\n      286: $Vb\n    }, o($Vh2, [2, 332], {\n      163: 463,\n      297: [1, 464]\n    }), {\n      13: $V8,\n      16: $V9,\n      29: $Vp1,\n      53: 310,\n      65: 308,\n      66: 309,\n      75: 307,\n      77: 465,\n      247: 262,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      253: 267,\n      254: $Vu1,\n      255: $Vv1,\n      256: 270,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }, {\n      29: [1, 466]\n    }, o($Vi2, [2, 76]), o($VL1, [2, 68]), o($Vo, [2, 325], {\n      39: $Vj2,\n      41: $Vj2,\n      83: $Vj2,\n      111: $Vj2,\n      159: $Vj2,\n      160: $Vj2,\n      162: $Vj2,\n      165: $Vj2,\n      166: $Vj2\n    }), o($Va2, [2, 96]), o($Vo, [2, 360], {\n      194: 467\n    }), o($Vo, [2, 358]), o($Vo, [2, 359]), o($V72, [2, 368], {\n      201: 468,\n      202: 469\n    }), o($Va2, [2, 97]), o($Va2, [2, 357]), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VM1,\n      32: [1, 470],\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      175: 407,\n      191: 408,\n      195: 471,\n      215: $VN1,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($VQ1, [2, 383]), o($VR1, [2, 122]), o($VR1, [2, 123]), {\n      216: [1, 472]\n    }, o($V5, [2, 12]), o($VO1, [2, 351]), o($VO1, [2, 352], {\n      185: 225,\n      53: 227,\n      184: 473,\n      180: 474,\n      13: $V8,\n      16: $V9,\n      28: $Ve1,\n      187: $Vf1,\n      286: $Vb\n    }), o($Vk2, [2, 95], {\n      251: [1, 475]\n    }), o($V01, [2, 10]), o($Vk1, [2, 131]), o($Vl1, [2, 133]), o($Vl1, [2, 136]), o($Vm1, [2, 138]), o($Vm1, [2, 139], {\n      243: 348,\n      242: 476,\n      293: $VT1,\n      307: $VU1\n    }), o($Vm1, [2, 140], {\n      243: 348,\n      242: 477,\n      293: $VT1,\n      307: $VU1\n    }), o($Vn1, [2, 142]), o($VS1, [2, 338], {\n      168: 478\n    }), o($VS1, [2, 337]), o([6, 13, 16, 28, 29, 31, 32, 39, 41, 71, 74, 76, 79, 80, 81, 83, 86, 111, 159, 160, 162, 165, 166, 183, 215, 218, 219, 223, 227, 231, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 263, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 304, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], [2, 152]), {\n      32: [1, 479]\n    }, {\n      251: [1, 480]\n    }, {\n      251: [1, 481]\n    }, o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 482,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), {\n      32: [1, 483]\n    }, {\n      32: [1, 484]\n    }, o($VX1, [2, 162]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      260: 485,\n      30: 487,\n      208: $V31,\n      246: $V41,\n      293: [1, 486],\n      310: $V51\n    }), o($Vc2, [2, 419]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 488,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VS1, [2, 423]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 489,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VS1, [2, 425]), o($Vu, [2, 37]), o($V02, [2, 259]), {\n      13: $V8,\n      16: $V9,\n      53: 284,\n      80: $VI,\n      90: 491,\n      91: 285,\n      92: $VG1,\n      94: 490,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($Vo, $Vz, {\n      144: 129,\n      140: 492,\n      143: 493,\n      41: [2, 306]\n    }), o($VB, [2, 54]), o($V22, [2, 30], {\n      81: [1, 494]\n    }), o($V22, [2, 31], {\n      79: [1, 495]\n    }), o($VI1, [2, 25], {\n      247: 262,\n      253: 267,\n      256: 270,\n      75: 307,\n      65: 308,\n      66: 309,\n      53: 310,\n      77: 449,\n      73: 496,\n      13: $V8,\n      16: $V9,\n      28: $Vd2,\n      29: $Vp1,\n      74: $Ve2,\n      76: $Vf2,\n      248: $Vq1,\n      249: $Vr1,\n      250: $Vs1,\n      252: $Vt1,\n      254: $Vu1,\n      255: $Vv1,\n      257: $Vw1,\n      258: $Vx1,\n      261: $Vy1,\n      263: $Vz1,\n      286: $Vb,\n      316: $VA1,\n      317: $VB1,\n      318: $VC1,\n      319: $VD1,\n      320: $VE1,\n      321: $VF1\n    }), o($Vl2, [2, 250]), {\n      29: $Vp1,\n      75: 497\n    }, {\n      29: $Vp1,\n      75: 498\n    }, o($Vl2, [2, 28]), o($Vl2, [2, 29]), o($V52, [2, 21]), {\n      28: [1, 499]\n    }, {\n      41: [2, 7]\n    }, {\n      41: [2, 207]\n    }, o($Vo, $Vc1, {\n      155: 216,\n      153: 500,\n      154: 501,\n      39: $Vm2,\n      41: $Vm2,\n      83: $Vm2,\n      111: $Vm2,\n      159: $Vm2,\n      160: $Vm2,\n      162: $Vm2,\n      165: $Vm2,\n      166: $Vm2\n    }), o($Vg2, [2, 321]), o($Vi2, [2, 69], {\n      305: [1, 502]\n    }), o($Vi2, [2, 70]), o($Vi2, [2, 71]), {\n      39: $VF,\n      55: 503\n    }, {\n      39: [2, 330]\n    }, {\n      39: [2, 331]\n    }, {\n      13: $V8,\n      16: $V9,\n      28: [1, 505],\n      53: 506,\n      164: 504,\n      286: $Vb\n    }, o($Vh2, [2, 333]), o($Vi2, [2, 74]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 507,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), {\n      13: $V8,\n      16: $V9,\n      28: $VG,\n      29: $VM1,\n      53: 152,\n      80: $VI,\n      86: $VJ,\n      91: 153,\n      175: 407,\n      191: 408,\n      195: 508,\n      215: $VN1,\n      218: $VL,\n      219: $VM,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($VQ1, [2, 101], {\n      306: [1, 509]\n    }), o($Vn2, [2, 375], {\n      203: 510,\n      207: 511,\n      213: [1, 512]\n    }), o($Vh1, [2, 118]), o($VQ1, [2, 384]), o($Vh1, [2, 119]), o($VO1, [2, 90]), o($VO1, [2, 353]), o($Vo, [2, 355]), o($Vn1, [2, 402]), o($Vn1, [2, 404]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 513,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VX1, [2, 155]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 514,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 515,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), {\n      32: [1, 516],\n      251: [1, 517]\n    }, o($VX1, [2, 159]), o($VX1, [2, 161]), {\n      32: [1, 518]\n    }, {\n      32: [2, 420]\n    }, {\n      32: [2, 421]\n    }, {\n      32: [1, 519]\n    }, {\n      32: [2, 426],\n      183: [1, 522],\n      265: 520,\n      266: 521\n    }, {\n      13: $V8,\n      16: $V9,\n      32: [1, 523],\n      53: 284,\n      80: $VI,\n      90: 524,\n      91: 285,\n      92: $VG1,\n      236: 163,\n      238: 164,\n      269: 159,\n      272: $VN,\n      273: $VO,\n      274: $VP,\n      275: $VQ,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU,\n      280: $VV,\n      281: $VW,\n      282: $VX,\n      283: $VY,\n      284: $VZ,\n      285: $V_,\n      286: $Vb\n    }, o($Vo2, [2, 260]), {\n      41: [1, 525]\n    }, {\n      41: [2, 307]\n    }, {\n      80: [1, 526]\n    }, {\n      80: [1, 527]\n    }, o($Vl2, [2, 251]), o($Vl2, [2, 26]), o($Vl2, [2, 27]), {\n      32: [1, 528]\n    }, o($VL1, [2, 67]), o($VL1, [2, 323]), {\n      39: [2, 329]\n    }, o($Vi2, [2, 72]), {\n      39: $VF,\n      55: 529\n    }, {\n      39: [2, 334]\n    }, {\n      39: [2, 335]\n    }, {\n      31: [1, 530]\n    }, o($Vk2, [2, 362], {\n      196: 531,\n      251: [1, 532]\n    }), o($V72, [2, 367]), o([13, 16, 28, 29, 32, 80, 86, 215, 218, 219, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 306], [2, 102], {\n      307: [1, 533]\n    }), {\n      13: $V8,\n      16: $V9,\n      29: [1, 539],\n      53: 536,\n      187: [1, 537],\n      204: 534,\n      205: 535,\n      208: [1, 538],\n      286: $Vb\n    }, o($Vn2, [2, 376]), {\n      32: [1, 540],\n      251: [1, 541]\n    }, {\n      32: [1, 542]\n    }, {\n      251: [1, 543]\n    }, o($VX1, [2, 83]), o($VS1, [2, 341]), o($VX1, [2, 163]), o($VX1, [2, 164]), {\n      32: [1, 544]\n    }, {\n      32: [2, 427]\n    }, {\n      267: [1, 545]\n    }, o($V02, [2, 41]), o($Vo2, [2, 261]), o($Vp2, [2, 308], {\n      141: 546,\n      304: [1, 547]\n    }), o($V22, [2, 32]), o($V22, [2, 33]), o($V52, [2, 22]), o($Vi2, [2, 73]), {\n      28: [1, 548]\n    }, o([39, 41, 83, 111, 159, 160, 162, 165, 166, 216, 304], [2, 98], {\n      197: 549,\n      183: [1, 550]\n    }), o($Vo, [2, 361]), o($V72, [2, 369]), o($Vq2, [2, 104]), o($Vq2, [2, 373], {\n      206: 551,\n      308: 552,\n      293: [1, 554],\n      309: [1, 553],\n      310: [1, 555]\n    }), o($Vr2, [2, 105]), o($Vr2, [2, 106]), {\n      13: $V8,\n      16: $V9,\n      29: [1, 559],\n      53: 560,\n      86: [1, 558],\n      187: $Vs2,\n      209: 556,\n      210: 557,\n      213: $Vt2,\n      286: $Vb\n    }, o($V72, $V82, {\n      200: 402,\n      199: 563\n    }), o($VX1, [2, 81]), o($VS1, [2, 339]), o($VX1, [2, 156]), o($V11, $V21, {\n      220: 183,\n      224: 184,\n      228: 185,\n      232: 186,\n      240: 187,\n      244: 188,\n      30: 564,\n      208: $V31,\n      246: $V41,\n      310: $V51\n    }), o($VX1, [2, 165]), {\n      268: [1, 565]\n    }, o($Vo, $Vz, {\n      144: 129,\n      142: 566,\n      143: 567,\n      41: $Vu2,\n      111: $Vu2\n    }), o($Vp2, [2, 309]), {\n      32: [1, 568]\n    }, o($Vk2, [2, 363]), o($Vk2, [2, 99], {\n      200: 402,\n      198: 569,\n      199: 570,\n      13: $V82,\n      16: $V82,\n      29: $V82,\n      187: $V82,\n      208: $V82,\n      213: $V82,\n      286: $V82,\n      28: [1, 571]\n    }), o($Vq2, [2, 103]), o($Vq2, [2, 374]), o($Vq2, [2, 370]), o($Vq2, [2, 371]), o($Vq2, [2, 372]), o($Vr2, [2, 107]), o($Vr2, [2, 109]), o($Vr2, [2, 110]), o($Vv2, [2, 377], {\n      211: 572\n    }), o($Vr2, [2, 112]), o($Vr2, [2, 113]), {\n      13: $V8,\n      16: $V9,\n      53: 573,\n      187: [1, 574],\n      286: $Vb\n    }, {\n      32: [1, 575]\n    }, {\n      32: [1, 576]\n    }, {\n      269: 577,\n      276: $VR,\n      277: $VS,\n      278: $VT,\n      279: $VU\n    }, o($Va1, [2, 62]), o($Va1, [2, 311]), o($Vi2, [2, 75]), o($Vo, $VP1, {\n      188: 329,\n      186: 578\n    }), o($Vo, [2, 364]), o($Vo, [2, 365]), {\n      13: $V8,\n      16: $V9,\n      32: [2, 379],\n      53: 560,\n      187: $Vs2,\n      210: 580,\n      212: 579,\n      213: $Vt2,\n      286: $Vb\n    }, o($Vr2, [2, 114]), o($Vr2, [2, 115]), o($Vr2, [2, 108]), o($VX1, [2, 157]), {\n      32: [2, 166]\n    }, o($Vk2, [2, 100]), {\n      32: [1, 581]\n    }, {\n      32: [2, 380],\n      306: [1, 582]\n    }, o($Vr2, [2, 111]), o($Vv2, [2, 378])],\n    defaultActions: {\n      5: [2, 192],\n      6: [2, 193],\n      8: [2, 191],\n      24: [2, 1],\n      25: [2, 3],\n      26: [2, 203],\n      69: [2, 42],\n      78: [2, 280],\n      92: [2, 237],\n      97: [2, 343],\n      220: [2, 221],\n      221: [2, 85],\n      251: [2, 396],\n      279: [2, 417],\n      371: [2, 304],\n      372: [2, 305],\n      453: [2, 7],\n      454: [2, 207],\n      461: [2, 330],\n      462: [2, 331],\n      486: [2, 420],\n      487: [2, 421],\n      493: [2, 307],\n      502: [2, 329],\n      505: [2, 334],\n      506: [2, 335],\n      521: [2, 427],\n      577: [2, 166]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          tstack = [],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n\n      lexer.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer;\n      sharedState.yy.parser = this;\n\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n      }\n\n      var yyloc = lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer.options && lexer.options.ranges;\n\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      _token_stack: var lex = function lex() {\n        var token;\n        token = lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      };\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng;\n              yytext = lexer.yytext;\n              yylineno = lexer.yylineno;\n              yyloc = lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  /*\n    SPARQL parser in the Jison parser generator format.\n  */\n  // Common namespaces and entities\n\n  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n      RDF_TYPE = RDF + 'type',\n      RDF_FIRST = RDF + 'first',\n      RDF_REST = RDF + 'rest',\n      RDF_NIL = RDF + 'nil',\n      XSD = 'http://www.w3.org/2001/XMLSchema#',\n      XSD_INTEGER = XSD + 'integer',\n      XSD_DECIMAL = XSD + 'decimal',\n      XSD_DOUBLE = XSD + 'double',\n      XSD_BOOLEAN = XSD + 'boolean',\n      XSD_TRUE = '\"true\"^^' + XSD_BOOLEAN,\n      XSD_FALSE = '\"false\"^^' + XSD_BOOLEAN;\n  var base = '',\n      basePath = '',\n      baseRoot = ''; // Returns a lowercase version of the given string\n\n  function lowercase(string) {\n    return string.toLowerCase();\n  } // Appends the item to the array and returns the array\n\n\n  function appendTo(array, item) {\n    return array.push(item), array;\n  } // Appends the items to the array and returns the array\n\n\n  function appendAllTo(array, items) {\n    return array.push.apply(array, items), array;\n  } // Extends a base object with properties of other objects\n\n\n  function extend(base) {\n    if (!base) base = {};\n\n    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {\n      for (var name in arg) {\n        base[name] = arg[name];\n      }\n    }\n\n    return base;\n  } // Creates an array that contains all items of the given arrays\n\n\n  function unionAll() {\n    var union = [];\n\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      union = union.concat.apply(union, arguments[i]);\n    }\n\n    return union;\n  } // Resolves an IRI against a base path\n\n\n  function resolveIRI(iri) {\n    // Strip off possible angular brackets\n    if (iri[0] === '<') iri = iri.substring(1, iri.length - 1); // Return absolute IRIs unmodified\n\n    if (/^[a-z]+:/.test(iri)) return iri;\n    if (!Parser.base) throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');\n\n    if (!base) {\n      base = Parser.base;\n      basePath = base.replace(/[^\\/:]*$/, '');\n      baseRoot = base.match(/^(?:[a-z]+:\\/*)?[^\\/]*/)[0];\n    }\n\n    switch (iri[0]) {\n      // An empty relative IRI indicates the base IRI\n      case undefined:\n        return base;\n      // Resolve relative fragment IRIs against the base IRI\n\n      case '#':\n        return base + iri;\n      // Resolve relative query string IRIs by replacing the query string\n\n      case '?':\n        return base.replace(/(?:\\?.*)?$/, iri);\n      // Resolve root relative IRIs at the root of the base IRI\n\n      case '/':\n        return baseRoot + iri;\n      // Resolve all other IRIs at the base IRI's path\n\n      default:\n        return basePath + iri;\n    }\n  } // If the item is a variable, ensures it starts with a question mark\n\n\n  function toVar(variable) {\n    if (variable) {\n      var first = variable[0];\n      if (first === '?') return variable;\n      if (first === '$') return '?' + variable.substr(1);\n    }\n\n    return variable;\n  } // Creates an operation with the given name and arguments\n\n\n  function operation(operatorName, args) {\n    return {\n      type: 'operation',\n      operator: operatorName,\n      args: args || []\n    };\n  } // Creates an expression with the given type and attributes\n\n\n  function expression(expr, attr) {\n    var expression = {\n      expression: expr\n    };\n    if (attr) for (var a in attr) {\n      expression[a] = attr[a];\n    }\n    return expression;\n  } // Creates a path with the given type and items\n\n\n  function path(type, items) {\n    return {\n      type: 'path',\n      pathType: type,\n      items: items\n    };\n  } // Transforms a list of operations types and arguments into a tree of operations\n\n\n  function createOperationTree(initialExpression, operationList) {\n    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++) {\n      initialExpression = operation(item[0], [initialExpression, item[1]]);\n    }\n\n    return initialExpression;\n  } // Group datasets by default and named\n\n\n  function groupDatasets(fromClauses) {\n    var defaults = [],\n        named = [],\n        l = fromClauses.length,\n        fromClause;\n\n    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++) {\n      (fromClause.named ? named : defaults).push(fromClause.iri);\n    }\n\n    return l ? {\n      from: {\n        default: defaults,\n        named: named\n      }\n    } : null;\n  } // Converts the number to a string\n\n\n  function toInt(string) {\n    return parseInt(string, 10);\n  } // Transforms a possibly single group into its patterns\n\n\n  function degroupSingle(group) {\n    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;\n  } // Creates a literal with the given value and type\n\n\n  function createLiteral(value, type) {\n    return '\"' + value + '\"^^' + type;\n  } // Creates a triple with the given subject, predicate, and object\n\n\n  function triple(subject, predicate, object) {\n    var triple = {};\n    if (subject != null) triple.subject = subject;\n    if (predicate != null) triple.predicate = predicate;\n    if (object != null) triple.object = object;\n    return triple;\n  } // Creates a new blank node identifier\n\n\n  function blank() {\n    return '_:b' + blankId++;\n  }\n\n  ;\n  var blankId = 0;\n\n  Parser._resetBlanks = function () {\n    blankId = 0;\n  }; // Regular expression and replacement strings to escape strings\n\n\n  var escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\(.)/g,\n      escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    't': '\\t',\n    'b': '\\b',\n    'n': '\\n',\n    'r': '\\r',\n    'f': '\\f'\n  },\n      fromCharCode = String.fromCharCode; // Translates escape codes in the string into their textual equivalent\n\n  function unescapeString(string, trimLength) {\n    string = string.substring(trimLength, string.length - trimLength);\n\n    try {\n      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {\n        var charCode;\n\n        if (unicode4) {\n          charCode = parseInt(unicode4, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n\n          return fromCharCode(charCode);\n        } else if (unicode8) {\n          charCode = parseInt(unicode8, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n\n          if (charCode < 0xFFFF) return fromCharCode(charCode);\n          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n        } else {\n          var replacement = escapeReplacements[escapedChar];\n          if (!replacement) throw new Error();\n          return replacement;\n        }\n      });\n    } catch (error) {\n      return '';\n    }\n\n    return '\"' + string + '\"';\n  } // Creates a list, collecting its (possibly blank) items and triples associated with those items\n\n\n  function createList(objects) {\n    var list = blank(),\n        head = list,\n        listItems = [],\n        listTriples,\n        triples = [];\n    objects.forEach(function (o) {\n      listItems.push(o.entity);\n      appendAllTo(triples, o.triples);\n    }); // Build an RDF list out of the items\n\n    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;) {\n      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]), listTriples[j++] = triple(head, RDF_REST, head = ++i < l ? blank() : RDF_NIL);\n    } // Return the list's identifier, its triples, and the triples associated with its items\n\n\n    return {\n      entity: list,\n      triples: appendAllTo(listTriples, triples)\n    };\n  } // Creates a blank node identifier, collecting triples with that blank node as subject\n\n\n  function createAnonymousObject(propertyList) {\n    var entity = blank();\n    return {\n      entity: entity,\n      triples: propertyList.map(function (t) {\n        return extend(triple(entity), t);\n      })\n    };\n  } // Collects all (possibly blank) objects, and triples that have them as subject\n\n\n  function objectListToTriples(predicate, objectList, otherTriples) {\n    var objects = [],\n        triples = [];\n    objectList.forEach(function (l) {\n      objects.push(triple(null, predicate, l.entity));\n      appendAllTo(triples, l.triples);\n    });\n    return unionAll(objects, otherTriples || [], triples);\n  } // Simplifies groups by merging adjacent BGPs\n\n\n  function mergeAdjacentBGPs(groups) {\n    var merged = [],\n        currentBgp;\n\n    for (var i = 0, group; group = groups[i]; i++) {\n      switch (group.type) {\n        // Add a BGP's triples to the current BGP\n        case 'bgp':\n          if (group.triples.length) {\n            if (!currentBgp) appendTo(merged, currentBgp = group);else appendAllTo(currentBgp.triples, group.triples);\n          }\n\n          break;\n        // All other groups break up a BGP\n\n        default:\n          // Only add the group if its pattern is non-empty\n          if (!group.patterns || group.patterns.length > 0) {\n            appendTo(merged, group);\n            currentBgp = null;\n          }\n\n      }\n    }\n\n    return merged;\n  }\n  /* generated by jison-lex 0.3.4 */\n\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function setInput(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function input() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function unput(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function more() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function reject() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function less(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function pastInput() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function upcomingInput() {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function showPosition() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function test_match(match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function next() {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"flex\": true,\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            /* ignore */\n            break;\n\n          case 1:\n            return 12;\n            break;\n\n          case 2:\n            return 15;\n            break;\n\n          case 3:\n            return 24;\n            break;\n\n          case 4:\n            return 290;\n            break;\n\n          case 5:\n            return 291;\n            break;\n\n          case 6:\n            return 29;\n            break;\n\n          case 7:\n            return 31;\n            break;\n\n          case 8:\n            return 32;\n            break;\n\n          case 9:\n            return 293;\n            break;\n\n          case 10:\n            return 34;\n            break;\n\n          case 11:\n            return 38;\n            break;\n\n          case 12:\n            return 39;\n            break;\n\n          case 13:\n            return 41;\n            break;\n\n          case 14:\n            return 43;\n            break;\n\n          case 15:\n            return 48;\n            break;\n\n          case 16:\n            return 51;\n            break;\n\n          case 17:\n            return 296;\n            break;\n\n          case 18:\n            return 61;\n            break;\n\n          case 19:\n            return 62;\n            break;\n\n          case 20:\n            return 68;\n            break;\n\n          case 21:\n            return 71;\n            break;\n\n          case 22:\n            return 74;\n            break;\n\n          case 23:\n            return 76;\n            break;\n\n          case 24:\n            return 79;\n            break;\n\n          case 25:\n            return 81;\n            break;\n\n          case 26:\n            return 83;\n            break;\n\n          case 27:\n            return 183;\n            break;\n\n          case 28:\n            return 99;\n            break;\n\n          case 29:\n            return 297;\n            break;\n\n          case 30:\n            return 132;\n            break;\n\n          case 31:\n            return 298;\n            break;\n\n          case 32:\n            return 299;\n            break;\n\n          case 33:\n            return 109;\n            break;\n\n          case 34:\n            return 300;\n            break;\n\n          case 35:\n            return 108;\n            break;\n\n          case 36:\n            return 301;\n            break;\n\n          case 37:\n            return 302;\n            break;\n\n          case 38:\n            return 112;\n            break;\n\n          case 39:\n            return 114;\n            break;\n\n          case 40:\n            return 115;\n            break;\n\n          case 41:\n            return 130;\n            break;\n\n          case 42:\n            return 124;\n            break;\n\n          case 43:\n            return 125;\n            break;\n\n          case 44:\n            return 127;\n            break;\n\n          case 45:\n            return 133;\n            break;\n\n          case 46:\n            return 111;\n            break;\n\n          case 47:\n            return 303;\n            break;\n\n          case 48:\n            return 304;\n            break;\n\n          case 49:\n            return 159;\n            break;\n\n          case 50:\n            return 162;\n            break;\n\n          case 51:\n            return 166;\n            break;\n\n          case 52:\n            return 92;\n            break;\n\n          case 53:\n            return 160;\n            break;\n\n          case 54:\n            return 305;\n            break;\n\n          case 55:\n            return 165;\n            break;\n\n          case 56:\n            return 251;\n            break;\n\n          case 57:\n            return 187;\n            break;\n\n          case 58:\n            return 306;\n            break;\n\n          case 59:\n            return 307;\n            break;\n\n          case 60:\n            return 213;\n            break;\n\n          case 61:\n            return 309;\n            break;\n\n          case 62:\n            return 310;\n            break;\n\n          case 63:\n            return 208;\n            break;\n\n          case 64:\n            return 215;\n            break;\n\n          case 65:\n            return 216;\n            break;\n\n          case 66:\n            return 223;\n            break;\n\n          case 67:\n            return 227;\n            break;\n\n          case 68:\n            return 268;\n            break;\n\n          case 69:\n            return 311;\n            break;\n\n          case 70:\n            return 312;\n            break;\n\n          case 71:\n            return 313;\n            break;\n\n          case 72:\n            return 314;\n            break;\n\n          case 73:\n            return 315;\n            break;\n\n          case 74:\n            return 231;\n            break;\n\n          case 75:\n            return 316;\n            break;\n\n          case 76:\n            return 246;\n            break;\n\n          case 77:\n            return 254;\n            break;\n\n          case 78:\n            return 255;\n            break;\n\n          case 79:\n            return 248;\n            break;\n\n          case 80:\n            return 249;\n            break;\n\n          case 81:\n            return 250;\n            break;\n\n          case 82:\n            return 317;\n            break;\n\n          case 83:\n            return 318;\n            break;\n\n          case 84:\n            return 252;\n            break;\n\n          case 85:\n            return 320;\n            break;\n\n          case 86:\n            return 319;\n            break;\n\n          case 87:\n            return 321;\n            break;\n\n          case 88:\n            return 257;\n            break;\n\n          case 89:\n            return 258;\n            break;\n\n          case 90:\n            return 261;\n            break;\n\n          case 91:\n            return 263;\n            break;\n\n          case 92:\n            return 267;\n            break;\n\n          case 93:\n            return 271;\n            break;\n\n          case 94:\n            return 274;\n            break;\n\n          case 95:\n            return 275;\n            break;\n\n          case 96:\n            return 13;\n            break;\n\n          case 97:\n            return 16;\n            break;\n\n          case 98:\n            return 286;\n            break;\n\n          case 99:\n            return 218;\n            break;\n\n          case 100:\n            return 28;\n            break;\n\n          case 101:\n            return 270;\n            break;\n\n          case 102:\n            return 80;\n            break;\n\n          case 103:\n            return 272;\n            break;\n\n          case 104:\n            return 273;\n            break;\n\n          case 105:\n            return 280;\n            break;\n\n          case 106:\n            return 281;\n            break;\n\n          case 107:\n            return 282;\n            break;\n\n          case 108:\n            return 283;\n            break;\n\n          case 109:\n            return 284;\n            break;\n\n          case 110:\n            return 285;\n            break;\n\n          case 111:\n            return 'EXPONENT';\n            break;\n\n          case 112:\n            return 276;\n            break;\n\n          case 113:\n            return 277;\n            break;\n\n          case 114:\n            return 278;\n            break;\n\n          case 115:\n            return 279;\n            break;\n\n          case 116:\n            return 86;\n            break;\n\n          case 117:\n            return 219;\n            break;\n\n          case 118:\n            return 6;\n            break;\n\n          case 119:\n            return 'INVALID';\n            break;\n\n          case 120:\n            console.log(yy_.yytext);\n            break;\n        }\n      },\n      rules: [/^(?:\\s+|#[^\\n\\r]*)/i, /^(?:BASE)/i, /^(?:PREFIX)/i, /^(?:SELECT)/i, /^(?:DISTINCT)/i, /^(?:REDUCED)/i, /^(?:\\()/i, /^(?:AS)/i, /^(?:\\))/i, /^(?:\\*)/i, /^(?:CONSTRUCT)/i, /^(?:WHERE)/i, /^(?:\\{)/i, /^(?:\\})/i, /^(?:DESCRIBE)/i, /^(?:ASK)/i, /^(?:FROM)/i, /^(?:NAMED)/i, /^(?:GROUP)/i, /^(?:BY)/i, /^(?:HAVING)/i, /^(?:ORDER)/i, /^(?:ASC)/i, /^(?:DESC)/i, /^(?:LIMIT)/i, /^(?:OFFSET)/i, /^(?:VALUES)/i, /^(?:;)/i, /^(?:LOAD)/i, /^(?:SILENT)/i, /^(?:INTO)/i, /^(?:CLEAR)/i, /^(?:DROP)/i, /^(?:CREATE)/i, /^(?:ADD)/i, /^(?:TO)/i, /^(?:MOVE)/i, /^(?:COPY)/i, /^(?:INSERT\\s+DATA)/i, /^(?:DELETE\\s+DATA)/i, /^(?:DELETE\\s+WHERE)/i, /^(?:WITH)/i, /^(?:DELETE)/i, /^(?:INSERT)/i, /^(?:USING)/i, /^(?:DEFAULT)/i, /^(?:GRAPH)/i, /^(?:ALL)/i, /^(?:\\.)/i, /^(?:OPTIONAL)/i, /^(?:SERVICE)/i, /^(?:BIND)/i, /^(?:UNDEF)/i, /^(?:MINUS)/i, /^(?:UNION)/i, /^(?:FILTER)/i, /^(?:,)/i, /^(?:a)/i, /^(?:\\|)/i, /^(?:\\/)/i, /^(?:\\^)/i, /^(?:\\?)/i, /^(?:\\+)/i, /^(?:!)/i, /^(?:\\[)/i, /^(?:\\])/i, /^(?:\\|\\|)/i, /^(?:&&)/i, /^(?:=)/i, /^(?:!=)/i, /^(?:<)/i, /^(?:>)/i, /^(?:<=)/i, /^(?:>=)/i, /^(?:IN)/i, /^(?:NOT)/i, /^(?:-)/i, /^(?:BOUND)/i, /^(?:BNODE)/i, /^(?:(RAND|NOW|UUID|STRUUID))/i, /^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i, /^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i, /^(?:CONCAT)/i, /^(?:COALESCE)/i, /^(?:IF)/i, /^(?:REGEX)/i, /^(?:SUBSTR)/i, /^(?:REPLACE)/i, /^(?:EXISTS)/i, /^(?:COUNT)/i, /^(?:SUM|MIN|MAX|AVG|SAMPLE)/i, /^(?:GROUP_CONCAT)/i, /^(?:SEPARATOR)/i, /^(?:\\^\\^)/i, /^(?:true)/i, /^(?:false)/i, /^(?:(<([^<>\\\"\\{\\}\\|\\^`\\\\\\u0000-\\u0020])*>))/i, /^(?:((([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040])|\\.)*(((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040]))?)?:))/i, /^(?:(((([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040])|\\.)*(((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040])|\\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)))))?)))/i, /^(?:(_:(((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040])|\\.)*(((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040]))?))/i, /^(?:([\\?\\$]((((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_))|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040])*)))/i, /^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i, /^(?:([0-9]+))/i, /^(?:([0-9]*\\.[0-9]+))/i, /^(?:([0-9]+\\.[0-9]*([eE][+-]?[0-9]+)|\\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i, /^(?:(\\+([0-9]+)))/i, /^(?:(\\+([0-9]*\\.[0-9]+)))/i, /^(?:(\\+([0-9]+\\.[0-9]*([eE][+-]?[0-9]+)|\\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i, /^(?:(-([0-9]+)))/i, /^(?:(-([0-9]*\\.[0-9]+)))/i, /^(?:(-([0-9]+\\.[0-9]*([eE][+-]?[0-9]+)|\\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i, /^(?:([eE][+-]?[0-9]+))/i, /^(?:('(([^\\u0027\\u005C\\u000A\\u000D])|(\\\\[tbnrf\\\\\\\"']|\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i, /^(?:(\"(([^\\u0022\\u005C\\u000A\\u000D])|(\\\\[tbnrf\\\\\\\"']|\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*\"))/i, /^(?:('''(('|'')?([^'\\\\]|(\\\\[tbnrf\\\\\\\"']|\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i, /^(?:(\"\"\"((\"|\"\")?([^\\\"\\\\]|(\\\\[tbnrf\\\\\\\"']|\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*\"\"\"))/i, /^(?:(\\((\\u0020|\\u0009|\\u000D|\\u000A)*\\)))/i, /^(?:(\\[(\\u0020|\\u0009|\\u000D|\\u000A)*\\]))/i, /^(?:$)/i, /^(?:.)/i, /^(?:.)/i],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = SparqlParser;\n  exports.Parser = SparqlParser.Parser;\n\n  exports.parse = function () {\n    return SparqlParser.parse.apply(SparqlParser, arguments);\n  };\n\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE');\n      process.exit(1);\n    }\n\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n\n    return exports.parser.parse(source);\n  };\n\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1));\n  }\n}","map":null,"metadata":{},"sourceType":"script"}