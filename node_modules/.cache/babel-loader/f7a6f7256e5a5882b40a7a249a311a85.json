{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/evan/Documents/Solid/solid-app/solid-ignite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bus_rdf_metadata_extract_1 = require(\"@comunica/bus-rdf-metadata-extract\");\n\nvar uritemplate_1 = require(\"uritemplate\");\n/**\n * An RDF Metadata Extract Actor that extracts all Hydra controls from the metadata stream.\n */\n\n\nvar ActorRdfMetadataExtractHydraControls =\n/*#__PURE__*/\nfunction (_bus_rdf_metadata_ext) {\n  _inherits(ActorRdfMetadataExtractHydraControls, _bus_rdf_metadata_ext);\n\n  function ActorRdfMetadataExtractHydraControls(args) {\n    var _this;\n\n    _classCallCheck(this, ActorRdfMetadataExtractHydraControls);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActorRdfMetadataExtractHydraControls).call(this, args));\n    _this.parsedUriTemplateCache = {};\n    return _this;\n  }\n\n  _createClass(ActorRdfMetadataExtractHydraControls, [{\n    key: \"test\",\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function test(_x) {\n        return _test.apply(this, arguments);\n      }\n\n      return test;\n    }()\n    /**\n     * Collect all Hydra page links from the given Hydra properties object.\n     * @param pageUrl The page URL in which the Hydra properties are defined.\n     * @param hydraProperties The collected Hydra properties.\n     * @return The Hydra links\n     */\n\n  }, {\n    key: \"getLinks\",\n    value: function getLinks(pageUrl, hydraProperties) {\n      return ActorRdfMetadataExtractHydraControls.LINK_TYPES.reduce(function (metadata, link) {\n        // First check the correct hydra:next, then the deprecated hydra:nextPage\n        var links = hydraProperties[link] || hydraProperties[link + 'Page'];\n        var linkTargets = links && links[pageUrl];\n\n        if (linkTargets && linkTargets.length > 0) {\n          metadata[link] = linkTargets[0];\n        }\n\n        return metadata;\n      }, {});\n    }\n    /**\n     * Parse a URI template, or retrieve it from a cache.\n     * @param {string} template A URI template string.\n     * @return {} A parsed URI template object.\n     */\n\n  }, {\n    key: \"parseUriTemplateCached\",\n    value: function parseUriTemplateCached(template) {\n      var cachedUriTemplate = this.parsedUriTemplateCache[template];\n\n      if (cachedUriTemplate) {\n        return cachedUriTemplate;\n      }\n\n      return this.parsedUriTemplateCache[template] = uritemplate_1.parse(template);\n    }\n    /**\n     * Collect all search forms from the given Hydra properties object.\n     * @param hydraProperties The collected Hydra properties.\n     * @return The search forms.\n     */\n\n  }, {\n    key: \"getSearchForms\",\n    value: function getSearchForms(hydraProperties) {\n      var _this2 = this;\n\n      var searchFormData = hydraProperties.search;\n      var searchForms;\n\n      if (!searchFormData) {\n        searchForms = [];\n      } else {\n        searchForms = require('lodash.flatten')(require('lodash.values')(require('lodash.mapvalues')(searchFormData, function (searchFormValues) {\n          return searchFormValues.map(function (searchFormId) {\n            var searchTemplates = (hydraProperties.template || {})[searchFormId] || []; // Parse the template\n\n            if (searchTemplates.length !== 1) {\n              throw new Error('Expected 1 hydra:template for ' + searchFormId);\n            }\n\n            var template = searchTemplates[0];\n\n            var searchTemplate = _this2.parseUriTemplateCached(template); // Parse the template mappings\n\n\n            var mappings = ((hydraProperties.mapping || {})[searchFormId] || []).reduce(function (acc, mapping) {\n              var variable = ((hydraProperties.variable || {})[mapping] || [])[0];\n              var property = ((hydraProperties.property || {})[mapping] || [])[0];\n\n              if (!variable) {\n                throw new Error('Expected a hydra:variable for ' + mapping);\n              }\n\n              if (!property) {\n                throw new Error('Expected a hydra:property for ' + mapping);\n              }\n\n              acc[property] = variable;\n              return acc;\n            }, {}); // Gets the URL of the Triple Pattern Fragment with the given triple pattern\n\n            var getUri = function getUri(entries) {\n              return searchTemplate.expand(Object.keys(entries).reduce(function (variables, key) {\n                variables[mappings[key]] = entries[key];\n                return variables;\n              }, {}));\n            };\n\n            return {\n              template: template,\n              mappings: mappings,\n              getUri: getUri\n            };\n          });\n        })));\n      }\n\n      return {\n        values: searchForms\n      };\n    }\n    /**\n     * Collect all hydra properties from a given metadata stream\n     * in a nice convenient nested hash (property / subject / objects).\n     * @param {RDF.Stream} metadata\n     * @return The collected Hydra properties.\n     */\n\n  }, {\n    key: \"getHydraProperties\",\n    value: function getHydraProperties(metadata) {\n      return new Promise(function (resolve, reject) {\n        metadata.on('error', reject); // Collect all hydra properties in a nice convenient nested hash (property / subject / objects).\n\n        var hydraProperties = {};\n        metadata.on('data', function (quad) {\n          if (quad.predicate.value.startsWith(ActorRdfMetadataExtractHydraControls.HYDRA)) {\n            var property = quad.predicate.value.substr(ActorRdfMetadataExtractHydraControls.HYDRA.length);\n            var subjectProperties = hydraProperties[property] || (hydraProperties[property] = {});\n            var objects = subjectProperties[quad.subject.value] || (subjectProperties[quad.subject.value] = []);\n            objects.push(quad.object.value);\n          }\n        });\n        metadata.on('end', function () {\n          return resolve(hydraProperties);\n        });\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(action) {\n        var metadata, hydraProperties;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                metadata = {};\n                _context2.next = 3;\n                return this.getHydraProperties(action.metadata);\n\n              case 3:\n                hydraProperties = _context2.sent;\n\n                require('lodash.assign')(metadata, this.getLinks(action.pageUrl, hydraProperties));\n\n                metadata.searchForms = this.getSearchForms(hydraProperties);\n                return _context2.abrupt(\"return\", {\n                  metadata: metadata\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return ActorRdfMetadataExtractHydraControls;\n}(bus_rdf_metadata_extract_1.ActorRdfMetadataExtract);\n\nActorRdfMetadataExtractHydraControls.HYDRA = 'http://www.w3.org/ns/hydra/core#';\nActorRdfMetadataExtractHydraControls.LINK_TYPES = ['first', 'next', 'previous', 'last'];\nexports.ActorRdfMetadataExtractHydraControls = ActorRdfMetadataExtractHydraControls;","map":null,"metadata":{},"sourceType":"script"}