"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ldflexComunica = _interopRequireDefault(require("ldflex-comunica"));

var _solidAuthClient = _interopRequireDefault(require("solid-auth-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An extension of ComunicaEngine that delegates
 * SPARQL UPDATE queries directly to the documents
 * using authenticated request.
 */
class ComunicaUpdateEngine extends _ldflexComunica.default {
  /**
   * Delegates SPARQL UPDATE queries directly to the document.
   */
  executeUpdate(sparql) {
    if (this._source) throw new Error('Updates on non-subject sources not yet supported.');
    let executed = false;

    const next = async () => {
      if (!executed) {
        executed = true; // Send authenticated PATCH request to the document

        const document = this.getDocument((await this._subject));
        const response = await _solidAuthClient.default.fetch(document, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/sparql-update'
          },
          body: sparql
        }); // Error if the server response was not ok

        if (!response.ok) throw new Error(`Update query failed (${response.status}): ${response.statusText}`); // Invalidate Comunica's internal caches, as they may have changed because of the update

        await this._engine.invalidateHttpCache(document); // Mock Comunica's response for bindings as a Immutable.js object.

        return {
          value: {
            size: 1,
            values: () => ({
              next: () => ({
                value: {
                  ok: true
                }
              })
            })
          }
        };
      }

      return {
        done: true
      };
    };

    return {
      next,

      [Symbol.asyncIterator]() {
        return this;
      }

    };
  }

}

exports.default = ComunicaUpdateEngine;