"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = withWebId;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _solidAuthClient = _interopRequireDefault(require("solid-auth-client"));

var _util = require("../util");

// Track all instances to inform them of WebID changes
const instances = new Set();
let authState = {
  webId: undefined
};
/**
 * Higher-order component that passes the WebID of the logged-in user
 * to the webId property of the wrapped component.
 */

function withWebId(Component) {
  var _class, _temp;

  return _temp = _class = class WithWebID extends _react.default.Component {
    constructor(...args) {
      super(...args);
      (0, _defineProperty2.default)(this, "state", authState);
    }

    componentDidMount() {
      instances.add(this);
    }

    componentWillUnmount() {
      instances.delete(this);
    }

    render() {
      return _react.default.createElement(Component, (0, _extends2.default)({
        webId: this.state.webId
      }, this.props));
    }

  }, (0, _defineProperty2.default)(_class, "displayName", `WithWebId(${(0, _util.getDisplayName)(Component)})`), _temp;
} // Inform all instances when the WebID changes


_solidAuthClient.default.trackSession(session => {
  authState = {
    webId: session && session.webId
  };

  for (const instance of instances) instance.setState(authState);
});